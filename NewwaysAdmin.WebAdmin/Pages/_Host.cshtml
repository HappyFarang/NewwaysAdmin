@page "/"
@using Microsoft.AspNetCore.Components.Web
@using NewwaysAdmin.WebAdmin.Components
@namespace NewwaysAdmin.WebAdmin.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="lib/bootstrap/icons/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="css/site.css" rel="stylesheet" />
    <link href="NewwaysAdmin.WebAdmin.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="lib/bootstrap/js/bootstrap.bundle.min.js"></script>
</body>
</html>
<script>
    // ✅ CSV Download Function - Missing JavaScript Function
    window.downloadFile = function (filename, content, contentType) {
        // Create a blob with the content
        const blob = new Blob([content], { type: contentType });

        // Create a temporary URL for the blob
        const url = window.URL.createObjectURL(blob);

        // Create a temporary anchor element to trigger download
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;

        // Trigger the download
        document.body.appendChild(a);
        a.click();

        // Clean up
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);

        console.log('✅ Downloaded file:', filename);
    };

    // ✅ Copy to Clipboard Function (also useful for sheet URLs)
    window.copyToClipboard = function (text) {
        if (navigator.clipboard && navigator.clipboard.writeText) {
            return navigator.clipboard.writeText(text).then(function () {
                console.log('✅ Copied to clipboard:', text.substring(0, 50) + '...');
                return true;
            }).catch(function (err) {
                console.error('❌ Could not copy to clipboard:', err);
                return false;
            });
        } else {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();

            try {
                const successful = document.execCommand('copy');
                document.body.removeChild(textArea);
                if (successful) {
                    console.log('✅ Copied to clipboard (fallback):', text.substring(0, 50) + '...');
                    return Promise.resolve(true);
                } else {
                    console.error('❌ Copy command failed');
                    return Promise.resolve(false);
                }
            } catch (err) {
                console.error('❌ Copy failed:', err);
                document.body.removeChild(textArea);
                return Promise.resolve(false);
            }
        }
    };
</script>
