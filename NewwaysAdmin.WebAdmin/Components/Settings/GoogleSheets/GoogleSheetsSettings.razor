@* Production version of GoogleSheetsSettings.razor *@
@page "/settings/google-sheets-v2"
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets
@using NewwaysAdmin.WebAdmin.Services.GoogleSheets
@inject ModuleColumnRegistry ColumnRegistry
@inject IJSRuntime JSRuntime
@inject ILogger<GoogleSheetsSettings> Logger
@inject ITemplateStorageService TemplateStorageService

<div class="google-sheets-settings">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-1">Google Sheets Configuration</h4>
            <p class="text-muted mb-0">Configure admin templates and manage module exports</p>
        </div>
        <div class="btn-group">
            <button class="btn btn-outline-primary" @onclick="ShowOverview">
                <i class="bi bi-house me-1"></i>Overview
            </button>
            <button class="btn btn-primary" @onclick="ShowTemplateBuilder">
                <i class="bi bi-plus-lg me-1"></i>Create Template
            </button>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading templates...</p>
        </div>
    }
    else if (_currentView == ViewMode.Overview)
    {
        <!-- Overview Dashboard -->
        <div class="row">
            <!-- Available Modules -->
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-puzzle me-2"></i>Available Modules
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (_availableModules.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var module in _availableModules)
                                {
                                    var columns = ColumnRegistry.GetModuleColumns(module);
                                    var hasTemplate = _adminTemplates.ContainsKey(module);
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@module</strong>
                                            <br />
                                            <small class="text-muted">@columns.Count columns available</small>
                                        </div>
                                        <div>
                                            @if (hasTemplate)
                                            {
                                                <span class="badge bg-success me-2">
                                                    <i class="bi bi-check-circle me-1"></i>Template Ready
                                                </span>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" @onclick="@(() => EditTemplate(module))"
                                                            title="Edit Template">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-info" @onclick="@(() => PreviewTemplate(_adminTemplates[module]))"
                                                            title="Preview Template">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="@(() => DeleteTemplate(module))"
                                                            title="Delete Template">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="@(() => CreateTemplateForModule(module))">
                                                    <i class="bi bi-plus me-1"></i>Create Template
                                                </button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No modules available.</p>
                        }
                    </div>
                </div>
            </div>

            <!-- Template Statistics -->
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-bar-chart me-2"></i>Template Statistics
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="h3 text-primary">@_adminTemplates.Count</div>
                                <small class="text-muted">Templates</small>
                            </div>
                            <div class="col-4">
                                <div class="h3 text-success">@_totalColumnsConfigured</div>
                                <small class="text-muted">Columns</small>
                            </div>
                            <div class="col-4">
                                <div class="h3 text-warning">@_templatesWithFormulas</div>
                                <small class="text-muted">With Formulas</small>
                            </div>
                        </div>

                        @if (_adminTemplates.Any())
                        {
                            <hr />
                            <h6>Recent Templates</h6>
                            @foreach (var template in _adminTemplates.Values.OrderByDescending(t => t.CreatedAt).Take(3))
                            {
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div>
                                        <strong>@template.TemplateName</strong>
                                        <br />
                                        <small class="text-muted">@template.CreatedAt.ToString("MMM dd, yyyy")</small>
                                    </div>
                                    <button class="btn btn-outline-info btn-sm" @onclick="@(() => PreviewTemplate(template))">
                                        @if (_previewingTemplate == template.ModuleName)
                                        {
                                            <i class="bi bi-eye-slash"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-eye"></i>
                                        }
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="bi bi-inbox display-4"></i>
                                <p class="mt-2">No templates created yet</p>
                                <button class="btn btn-primary btn-sm" @onclick="ShowTemplateBuilder">
                                    Create Your First Template
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Template Preview -->
        @if (!string.IsNullOrEmpty(_previewingTemplate) && _adminTemplates.ContainsKey(_previewingTemplate))
        {
            var template = _adminTemplates[_previewingTemplate];
            <div class="mt-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-eye me-2"></i>Template Preview: @template.TemplateName
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        @foreach (var column in template.SelectedColumns)
                                        {
                                            <th style="width: @(column.Width)px;">
                                                @column.DisplayName
                                                @if (column.IncludeSum)
                                                {
                                                    <small><i class="bi bi-calculator ms-1"></i></small>
                                                }
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        @foreach (var column in template.SelectedColumns)
                                        {
                                            <td class="text-muted">Sample data...</td>
                                        }
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <strong>@template.SelectedColumns.Count</strong> columns configured,
                                <strong>@template.SelectedColumns.Count(c => c.IncludeSum)</strong> with sum formulas
                                @if (template.SelectedColumns.Any(c => !string.IsNullOrEmpty(c.Formula)))
                                {
                                    <text>, <strong>@template.SelectedColumns.Count(c => !string.IsNullOrEmpty(c.Formula))</strong> with custom formulas</text>
                                }
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else if (_currentView == ViewMode.TemplateBuilder)
    {
        <AdminTemplateBuilder OnTemplateSaved="HandleTemplateSaved"
                              EditingModuleName="@_editingModuleName"
                              EditingTemplate="@_editingTemplate" />
    }

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="@(_statusIsError ? "alert alert-danger" : "alert alert-success") alert-dismissible fade show mt-3">
            @_statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatus"></button>
        </div>
    }
</div>

@code {
    private ViewMode _currentView = ViewMode.Overview;
    private List<string> _availableModules = new();
    private Dictionary<string, AdminTemplateBuilder.AdminTemplateConfig> _adminTemplates = new();
    private string _previewingTemplate = string.Empty;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;
    private bool _isLoading = false;

    // For editing existing templates
    private string _editingModuleName = string.Empty;
    private AdminTemplateBuilder.AdminTemplateConfig? _editingTemplate = null;

    // Computed properties for stats
    private int _totalColumnsConfigured => _adminTemplates.Values.Sum(t => t.SelectedColumns.Count);
    private int _templatesWithFormulas => _adminTemplates.Values.Count(t =>
        t.SelectedColumns.Any(c => c.IncludeSum || !string.IsNullOrEmpty(c.Formula)));

    private enum ViewMode
    {
        Overview,
        TemplateBuilder
    }

    protected override async Task OnInitializedAsync()
    {
        _availableModules = ColumnRegistry.GetAvailableModules();
        await LoadExistingTemplates();
    }

    private async Task LoadExistingTemplates()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            _adminTemplates = await TemplateStorageService.LoadAllTemplatesAsync();

            Logger.LogInformation("Loaded {Count} existing templates", _adminTemplates.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading existing templates");
            ShowStatus("Error loading existing templates", true);
            _adminTemplates = new Dictionary<string, AdminTemplateBuilder.AdminTemplateConfig>();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowOverview()
    {
        _currentView = ViewMode.Overview;
        _previewingTemplate = string.Empty;
        _editingModuleName = string.Empty;
        _editingTemplate = null;
        StateHasChanged();
    }

    private void ShowTemplateBuilder()
    {
        _currentView = ViewMode.TemplateBuilder;
        StateHasChanged();
    }

    private void CreateTemplateForModule(string module)
    {
        _editingModuleName = module;
        _editingTemplate = null;
        ShowTemplateBuilder();
    }

    private void EditTemplate(string moduleName)
    {
        if (_adminTemplates.TryGetValue(moduleName, out var template))
        {
            _editingModuleName = moduleName;
            _editingTemplate = template;
            ShowTemplateBuilder();
        }
        else
        {
            ShowStatus($"Template for {moduleName} not found", true);
        }
    }

    private async Task DeleteTemplate(string moduleName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete the template for {moduleName}?");

        if (confirmed)
        {
            try
            {
                var success = await TemplateStorageService.DeleteTemplateAsync(moduleName);

                if (success)
                {
                    _adminTemplates.Remove(moduleName);
                    ShowStatus($"Template for {moduleName} deleted successfully.", false);
                }
                else
                {
                    ShowStatus($"Failed to delete template for {moduleName}", true);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting template for {ModuleName}", moduleName);
                ShowStatus($"Error deleting template: {ex.Message}", true);
            }

            StateHasChanged();
        }
    }

    private void PreviewTemplate(AdminTemplateBuilder.AdminTemplateConfig template)
    {
        _previewingTemplate = _previewingTemplate == template.ModuleName ? string.Empty : template.ModuleName;
        StateHasChanged();
    }

    private async Task HandleTemplateSaved(AdminTemplateBuilder.AdminTemplateConfig template)
    {
        try
        {
            // Save to storage using the service
            var success = await TemplateStorageService.SaveTemplateAsync(template);

            if (success)
            {
                // Update local cache
                _adminTemplates[template.ModuleName] = template;

                ShowStatus($"Template '{template.TemplateName}' saved successfully!", false);
                ShowOverview();
            }
            else
            {
                ShowStatus("Failed to save template to storage", true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving template");
            ShowStatus($"Error saving template: {ex.Message}", true);
        }
    }

    private void ShowStatus(string message, bool isError)
    {
        _statusMessage = message;
        _statusIsError = isError;
        StateHasChanged();

        // Auto-clear success messages after 5 seconds
        if (!isError)
        {
            _ = Task.Delay(5000).ContinueWith(_ =>
            {
                InvokeAsync(() =>
                {
                    if (_statusMessage == message)
                    {
                        ClearStatus();
                    }
                });
            });
        }
    }

    private void ClearStatus()
    {
        _statusMessage = string.Empty;
        StateHasChanged();
    }
}