@* Fixed GoogleSheetsSettings.razor - No Service Dependencies *@
@page "/settings/google-sheets"
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.GoogleSheets.Models.Extensions
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets.Models
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets.Designer
@inject IJSRuntime JSRuntime
@inject ILogger<GoogleSheetsSettings> Logger

<div class="google-sheets-settings">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-1">
                <i class="bi bi-google me-2 text-success"></i>Google Sheets Templates
            </h4>
            <p class="text-muted mb-0">Create and manage flexible sheet templates with custom row layouts</p>
        </div>
        <div class="btn-group">
            <button class="btn @(_currentView == ViewMode.Overview ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SetView(ViewMode.Overview)">
                <i class="bi bi-grid me-1"></i>Templates
            </button>
            <button class="btn @(_currentView == ViewMode.Designer ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SetView(ViewMode.Designer)">
                <i class="bi bi-plus-lg me-1"></i>Create New
            </button>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        @switch (_currentView)
        {
            case ViewMode.Overview:
                @RenderOverview()
                break;
            case ViewMode.Designer:
                @RenderDesigner()
                break;
            case ViewMode.Preview:
                @RenderPreview()
                break;
        }
    }

    @* Status Messages *@
    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="@(_statusIsError ? "alert alert-danger" : "alert alert-success") alert-dismissible fade show mt-3">
            <i class="bi @(_statusIsError ? "bi-exclamation-triangle" : "bi-check-circle") me-2"></i>
            @_statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatus"></button>
        </div>
    }
</div>

@code {
    private enum ViewMode { Overview, Designer, Preview }

    private ViewMode _currentView = ViewMode.Overview;
    private List<SheetTemplate> _templates = new();
    private SheetTemplate _currentTemplate = new();
    private SheetData? _previewData = null;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;
    private bool _isLoading = true;
    private string _editingTemplateId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadMockTemplatesAsync();
    }

    // Overview Section
    private RenderFragment RenderOverview() => __builder =>
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-collection me-2"></i>Your Templates
                        </h5>
                        <small class="text-muted">@_templates.Count template(s)</small>
                    </div>
                    <div class="card-body">
                        @if (!_templates.Any())
                        {
                            <div class="text-center py-5">
                                <i class="bi bi-file-earmark-plus display-1 text-muted"></i>
                                <h5 class="mt-3 text-muted">No Templates Yet</h5>
                                <p class="text-muted">Create your first template to get started with flexible Google Sheets exports.</p>
                                <button class="btn btn-primary" @onclick="() => SetView(ViewMode.Designer)">
                                    <i class="bi bi-plus-lg me-1"></i>Create Your First Template
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="row g-3">
                                @foreach (var template in _templates)
                                {
                                    <div class="col-md-6">
                                        <div class="card border template-card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="card-title mb-1">@template.Name</h6>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                                type="button" data-bs-toggle="dropdown">
                                                            <i class="bi bi-three-dots"></i>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li>
                                                                <a class="dropdown-item" @onclick="() => EditTemplate(template.Id)">
                                                                    <i class="bi bi-pencil me-2"></i>Edit
                                                                </a>
                                                            </li>
                                                            <li>
                                                                <a class="dropdown-item" @onclick="() => PreviewTemplate(template.Id)">
                                                                    <i class="bi bi-eye me-2"></i>Preview
                                                                </a>
                                                            </li>
                                                            <li>
                                                                <a class="dropdown-item" @onclick="() => CloneTemplate(template.Id)">
                                                                    <i class="bi bi-files me-2"></i>Clone
                                                                </a>
                                                            </li>
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li>
                                                                <a class="dropdown-item text-danger" @onclick="() => DeleteTemplate(template.Id)">
                                                                    <i class="bi bi-trash me-2"></i>Delete
                                                                </a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>

                                                <p class="card-text text-muted small mb-2">
                                                    @(string.IsNullOrEmpty(template.Description) ? "No description" : template.Description)
                                                </p>

                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <span class="badge bg-secondary me-1">@template.DataType</span>
                                                        <span class="badge bg-light text-dark">@template.Columns.Count columns</span>
                                                        <span class="badge bg-light text-dark">@template.RowTemplates.Count rows</span>
                                                    </div>
                                                    <small class="text-muted">@template.CreatedAt.ToString("MMM dd")</small>
                                                </div>

                                                <div class="mt-2">
                                                    <button class="btn btn-sm btn-outline-primary me-1"
                                                            @onclick="() => PreviewTemplate(template.Id)">
                                                        <i class="bi bi-eye me-1"></i>Preview
                                                    </button>
                                                    <button class="btn btn-sm btn-primary"
                                                            @onclick="() => EditTemplate(template.Id)">
                                                        <i class="bi bi-pencil me-1"></i>Edit
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>Getting Started
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h6 class="text-primary">What are Sheet Templates?</h6>
                            <p class="small text-muted mb-2">
                                Templates define how your data appears in Google Sheets. You can control:
                            </p>
                            <ul class="small text-muted">
                                <li>Column layout and formatting</li>
                                <li>Row structure (headers, formulas, data)</li>
                                <li>Dynamic formulas that adjust to your data</li>
                                <li>Visual styling and colors</li>
                            </ul>
                        </div>

                        <div class="mb-3">
                            <h6 class="text-success">Row Layout Control</h6>
                            <p class="small text-muted mb-2">
                                NEW: You can now design exactly where each type of content goes:
                            </p>
                            <div class="small">
                                <div class="border rounded p-2 mb-1 bg-light">
                                    <strong>Row 1:</strong> Headers
                                </div>
                                <div class="border rounded p-2 mb-1 bg-info text-white">
                                    <strong>Row 2:</strong> Summary Formulas
                                </div>
                                <div class="border rounded p-2 mb-1">
                                    <strong>Row 3+:</strong> Your Data
                                </div>
                                <div class="border rounded p-2 bg-warning">
                                    <strong>Row N:</strong> More Formulas
                                </div>
                            </div>
                        </div>

                        <button class="btn btn-success w-100" @onclick="() => SetView(ViewMode.Designer)">
                            <i class="bi bi-plus-lg me-1"></i>Create Your First Template
                        </button>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-graph-up me-2"></i>Quick Stats
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="h4 text-primary mb-0">@_templates.Count</div>
                                <small class="text-muted">Templates</small>
                            </div>
                            <div class="col-4">
                                <div class="h4 text-success mb-0">@_templates.SelectMany(t => t.Columns).Count()</div>
                                <small class="text-muted">Columns</small>
                            </div>
                            <div class="col-4">
                                <div class="h4 text-info mb-0">@_templates.SelectMany(t => t.Formulas).Count()</div>
                                <small class="text-muted">Formulas</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    };

    // Designer Section - NOW WITH FULL FUNCTIONALITY!
    private RenderFragment RenderDesigner() => __builder =>
    {
        <div class="template-designer">
            <div class="row">
                <!-- Left Panel: Template Settings -->
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="bi bi-gear me-2"></i>Template Settings
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Template Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control"
                                       @bind="_currentTemplate.Name"
                                       placeholder="Enter a descriptive name for your template">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Data Type</label>
                                <select class="form-select" @bind="_currentTemplate.DataType">
                                    <option value="BankSlipData">Bank Slip Data</option>
                                    <option value="SalesData">Sales Data</option>
                                    <option value="InventoryData">Inventory Data</option>
                                    <option value="Custom">Custom</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" rows="3"
                                          @bind="_currentTemplate.Description"
                                          placeholder="Describe what this template is for..."></textarea>
                            </div>
                        </div>
                    </div>

                    <!-- Column Management -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="bi bi-columns me-2"></i>Columns (@_currentTemplate.Columns.Count)
                            </h6>
                            <button type="button" class="btn btn-primary btn-sm" @onclick="AddColumn">
                                <i class="bi bi-plus-circle me-1"></i>Add Column
                            </button>
                        </div>
                        <div class="card-body">
                            @if (!_currentTemplate.Columns.Any())
                            {
                                <div class="text-center py-4 text-muted">
                                    <i class="bi bi-table display-4"></i>
                                    <p class="mt-2">No columns added yet</p>
                                    <button type="button" class="btn btn-outline-primary" @onclick="AddColumn">
                                        <i class="bi bi-plus-circle me-1"></i>Add First Column
                                    </button>
                                </div>
                            }
                            else
                            {
                                @for (int i = 0; i < _currentTemplate.Columns.Count; i++)
                                {
                                    var index = i;
                                    var column = _currentTemplate.Columns[index];
                                    <div class="card border mb-2">
                                        <div class="card-body p-3">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="mb-1">Column @(index + 1)</h6>
                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                        @onclick="() => RemoveColumn(index)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                            <div class="row g-2">
                                                <div class="col-md-6">
                                                    <label class="form-label">Header</label>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="column.Header"
                                                           placeholder="Column name">
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Data Type</label>
                                                    <select class="form-select form-select-sm" @bind="column.DataType">
                                                        <option value="Text">Text</option>
                                                        <option value="Number">Number</option>
                                                        <option value="Currency">Currency</option>
                                                        <option value="Date">Date</option>
                                                        <option value="DateTime">Date Time</option>
                                                        <option value="Checkbox">Checkbox</option>
                                                        <option value="Email">Email</option>
                                                        <option value="Phone">Phone</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Right Panel: Row Layout -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="bi bi-list-ol me-2"></i>Row Layout (@_currentTemplate.RowTemplates.Count)
                            </h6>
                            <div class="dropdown">
                                <button class="btn btn-success btn-sm dropdown-toggle" type="button"
                                        data-bs-toggle="dropdown">
                                    <i class="bi bi-plus-lg me-1"></i>Add Row
                                </button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <a class="dropdown-item" @onclick="() => AddRowType(RowType.Header)">
                                            <i class="bi bi-header me-2"></i>Header Row
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" @onclick="() => AddRowType(RowType.Formula)">
                                            <i class="bi bi-calculator me-2"></i>Formula Row
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" @onclick="() => AddRowType(RowType.Data)">
                                            <i class="bi bi-table me-2"></i>Data Rows
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" @onclick="() => AddRowType(RowType.Summary)">
                                            <i class="bi bi-info-circle me-2"></i>Summary Row
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" @onclick="() => AddRowType(RowType.Separator)">
                                            <i class="bi bi-dash me-2"></i>Empty Row
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (!_currentTemplate.RowTemplates.Any())
                            {
                                <div class="text-center py-4 text-muted">
                                    <i class="bi bi-layout-text-window-reverse display-4"></i>
                                    <p class="mt-2">No row layout defined</p>
                                    <button class="btn btn-outline-primary" @onclick="() => AddRowType(RowType.Header)">
                                        <i class="bi bi-plus-lg me-1"></i>Add Header Row
                                    </button>
                                </div>
                            }
                            else
                            {
                                <!-- Row Preview -->
                                <div class="row-layout-preview mb-3">
                                    <div class="border rounded">
                                        @foreach (var row in _currentTemplate.RowTemplates.OrderBy(r => r.Order))
                                        {
                                            <div class="d-flex align-items-center p-2 border-bottom @GetRowClass(row.Type)">
                                                <div class="row-number me-3">@row.Order</div>
                                                <div class="flex-grow-1">
                                                    <strong>@GetRowIcon(row.Type) @row.Type</strong>
                                                    @if (!string.IsNullOrEmpty(row.Name))
                                                    {
                                                        <span class="text-muted"> - @row.Name</span>
                                                    }
                                                </div>
                                                <button class="btn btn-sm btn-outline-danger"
                                                        @onclick="() => RemoveRow(row)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Row Configuration -->
                                @foreach (var row in _currentTemplate.RowTemplates.OrderBy(r => r.Order))
                                {
                                    <div class="card border mb-2">
                                        <div class="card-body p-3">
                                            <div class="row g-2">
                                                <div class="col-md-8">
                                                    <label class="form-label">Row Name</label>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="row.Name"
                                                           placeholder="Row description">
                                                </div>
                                                <div class="col-md-4">
                                                    <label class="form-label">Type</label>
                                                    <span class="badge bg-secondary d-block mt-1">@row.Type</span>
                                                </div>
                                            </div>
                                            @if (row.Type == RowType.Formula)
                                            {
                                                <div class="mt-2">
                                                    <small class="text-info">
                                                        <i class="bi bi-info-circle me-1"></i>
                                                        Formulas will be configured in a future update
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex justify-content-between mt-4">
                <button class="btn btn-outline-secondary" @onclick="() => SetView(ViewMode.Overview)">
                    <i class="bi bi-arrow-left me-1"></i>Cancel
                </button>
                <div>
                    <button class="btn btn-outline-primary me-2" @onclick="PreviewCurrentTemplate">
                        <i class="bi bi-eye me-1"></i>Preview
                    </button>
                    <button class="btn btn-success" @onclick="SaveCurrentTemplate" disabled="@(!IsValidTemplate())">
                        <i class="bi bi-save me-1"></i>Save Template
                    </button>
                </div>
            </div>
        </div>

        <style>
            .row-number {
                width: 25px;
                height: 25px;
                background: #007bff;
                color: white;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.8rem;
                font-weight: bold;
            }

            .row-layout-preview .border-bottom:last-child {
                border-bottom: none !important;
            }
        </style>
    };

    // Preview Section
    private RenderFragment RenderPreview() => __builder =>
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-eye me-2"></i>Template Preview
                </h5>
                <button class="btn btn-outline-secondary" @onclick="() => SetView(ViewMode.Overview)">
                    <i class="bi bi-arrow-left me-1"></i>Back to Templates
                </button>
            </div>
            <div class="card-body">
                @if (_previewData != null)
                {
                    <div class="table-responsive">
                        <table class="table table-bordered table-sm preview-table">
                            @foreach (var (row, index) in _previewData.Rows.Select((r, i) => (r, i)))
                            {
                                <tr class="@GetPreviewRowClass(row, index)">
                                    @foreach (var cell in row.Cells)
                                    {
                                        <td class="@GetPreviewCellClass(cell)">
                                            @if (!string.IsNullOrEmpty(cell.Formula))
                                            {
                                                <code class="small">@cell.Formula</code>
                                            }
                                            else
                                            {
                                                @cell.Value
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </table>
                    </div>

                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="bi bi-info-circle me-1"></i>
                            This preview shows how your template will look with sample data.
                            Formulas will automatically adjust based on the actual amount of data exported.
                        </small>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading preview...</span>
                        </div>
                        <p class="mt-2 text-muted small">Generating preview...</p>
                    </div>
                }
            </div>
        </div>
    };

    // Helper Methods - ALL USING MOCK DATA
    private async Task LoadMockTemplatesAsync()
    {
        try
        {
            _isLoading = true;

            // Simulate loading delay
            await Task.Delay(500);

            // MOCK DATA for testing UI
            _templates = new List<SheetTemplate>
            {
                new SheetTemplate
                {
                    Id = "1",
                    Name = "Bank Slip Template",
                    Description = "Template for exporting bank slip data with summary formulas",
                    DataType = "BankSlipData",
                    CreatedAt = DateTime.Now.AddDays(-5),
                    Columns = new List<ColumnTemplate>
                    {
                        new() { Header = "Date", DataType = "Date" },
                        new() { Header = "Amount", DataType = "Currency" },
                        new() { Header = "Account", DataType = "Text" }
                    },
                    RowTemplates = new List<RowTemplate>
                    {
                        new() { Type = RowType.Header, Order = 1 },
                        new() { Type = RowType.Formula, Order = 2 },
                        new() { Type = RowType.Data, Order = 3 }
                    },
                    Formulas = new List<FormulaTemplate>
                    {
                        new() { Name = "Total Amount", Formula = "=SUM(B:B)" }
                    }
                },
                new SheetTemplate
                {
                    Id = "2",
                    Name = "Sales Report Template",
                    Description = "Comprehensive sales data export with analysis",
                    DataType = "SalesData",
                    CreatedAt = DateTime.Now.AddDays(-2),
                    Columns = new List<ColumnTemplate>
                    {
                        new() { Header = "Product", DataType = "Text" },
                        new() { Header = "Revenue", DataType = "Currency" },
                        new() { Header = "Quantity", DataType = "Number" }
                    },
                    RowTemplates = new List<RowTemplate>
                    {
                        new() { Type = RowType.Header, Order = 1 },
                        new() { Type = RowType.Data, Order = 2 }
                    },
                    Formulas = new List<FormulaTemplate>()
                }
            };

            Logger.LogInformation("Loaded {Count} mock templates", _templates.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading templates");
            ShowError("Failed to load templates: " + ex.Message);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void AddColumn()
    {
        _currentTemplate.Columns.Add(new ColumnTemplate
            {
                Index = _currentTemplate.Columns.Count,
                Header = $"Column {_currentTemplate.Columns.Count + 1}",
                DataType = "Text",
                Width = 150,
                IsVisible = true
            });
    }

    private void RemoveColumn(int index)
    {
        if (index >= 0 && index < _currentTemplate.Columns.Count)
        {
            _currentTemplate.Columns.RemoveAt(index);
            // Reindex remaining columns
            for (int i = 0; i < _currentTemplate.Columns.Count; i++)
            {
                _currentTemplate.Columns[i].Index = i;
            }
        }
    }

    private void AddRowType(RowType type)
    {
        var maxOrder = _currentTemplate.RowTemplates.Any() ? _currentTemplate.RowTemplates.Max(r => r.Order) : 0;

        _currentTemplate.RowTemplates.Add(new RowTemplate
            {
                Type = type,
                Order = maxOrder + 1,
                Name = GetDefaultRowName(type),
                IsBold = type == RowType.Header,
                BackgroundColor = GetDefaultBackgroundColor(type),
                IsVisible = true
            });
    }

    private void RemoveRow(RowTemplate row)
    {
        _currentTemplate.RowTemplates.Remove(row);
        // Reorder remaining rows
        var orderedRows = _currentTemplate.RowTemplates.OrderBy(r => r.Order).ToList();
        for (int i = 0; i < orderedRows.Count; i++)
        {
            orderedRows[i].Order = i + 1;
        }
    }

    private bool IsValidTemplate()
    {
        return !string.IsNullOrWhiteSpace(_currentTemplate.Name) &&
               _currentTemplate.Columns.Any() &&
               _currentTemplate.RowTemplates.Any();
    }

    private string GetRowIcon(RowType type) => type switch
    {
        RowType.Header => "📋",
        RowType.Formula => "🧮",
        RowType.Data => "📊",
        RowType.Summary => "📋",
        RowType.Separator => "➖",
        _ => "❓"
    };

    private string GetRowClass(RowType type) => type switch
    {
        RowType.Header => "bg-light",
        RowType.Formula => "bg-info bg-opacity-10",
        RowType.Data => "bg-success bg-opacity-10",
        RowType.Summary => "bg-warning bg-opacity-10",
        _ => ""
    };

    private string GetDefaultRowName(RowType type) => type switch
    {
        RowType.Header => "Column Headers",
        RowType.Formula => "Summary Formulas",
        RowType.Data => "Data Records",
        RowType.Summary => "Summary Information",
        RowType.Separator => "Spacing",
        _ => type.ToString()
    };

    private string GetDefaultBackgroundColor(RowType type) => type switch
    {
        RowType.Header => "#E9ECEF",
        RowType.Formula => "#E7F3FF",
        RowType.Summary => "#FFF3CD",
        _ => ""
    };

    private async Task PreviewCurrentTemplate()
    {
        await PreviewCurrentTemplate(_currentTemplate);
    }
    private void SetView(ViewMode view)
    {
        _currentView = view;
        ClearStatus();

        if (view == ViewMode.Designer)
        {
            // Initialize new template
            _currentTemplate = new SheetTemplate
                {
                    Name = "New Template",
                    DataType = "BankSlipData", // Default, user can change
                    CreatedAt = DateTime.UtcNow,
                    Columns = new List<ColumnTemplate>(),
                    RowTemplates = new List<RowTemplate>
                {
                    new RowTemplate
                    {
                        Type = RowType.Header,
                        Order = 1,
                        Name = "Column Headers",
                        IsBold = true,
                        BackgroundColor = "#E8E8E8"
                    },
                    new RowTemplate
                    {
                        Type = RowType.Data,
                        Order = 2,
                        Name = "Data Records"
                    }
                },
                    Formulas = new List<FormulaTemplate>()
                };
        }
    }

    private void EditTemplate(string templateId)
    {
        try
        {
            var template = _templates.FirstOrDefault(t => t.Id == templateId);
            if (template != null)
            {
                _currentTemplate = template;
                _editingTemplateId = templateId;
                SetView(ViewMode.Designer);
            }
            else
            {
                ShowError("Template not found");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading template {TemplateId}", templateId);
            ShowError("Failed to load template: " + ex.Message);
        }
    }

    private void PreviewTemplate(string templateId)
    {
        try
        {
            var template = _templates.FirstOrDefault(t => t.Id == templateId);
            if (template != null)
            {
                _currentTemplate = template;
                SetView(ViewMode.Preview);

                // MOCK PREVIEW DATA
                _previewData = new SheetData
                    {
                        Title = $"Preview: {template.Name}",
                        Rows = new List<SheetRow>
                    {
                        new SheetRow
                        {
                            IsHeader = true,
                            Cells = template.Columns.Select(c => new SheetCell { Value = c.Header, IsBold = true }).ToList()
                        },
                        new SheetRow
                        {
                            Cells = new List<SheetCell>
                            {
                                new() { Formula = "=COUNTA(A:A)", IsBold = true },
                                new() { Formula = "=SUM(B:B)", IsBold = true },
                                new() { Value = "", IsBold = true }
                            }
                        },
                        new SheetRow
                        {
                            Cells = new List<SheetCell>
                            {
                                new() { Value = "2024-01-01" },
                                new() { Value = "1000.00" },
                                new() { Value = "Sample Account" }
                            }
                        },
                        new SheetRow
                        {
                            Cells = new List<SheetCell>
                            {
                                new() { Value = "2024-01-02" },
                                new() { Value = "1500.00" },
                                new() { Value = "Another Account" }
                            }
                        }
                    }
                    };
            }
            else
            {
                ShowError("Template not found");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error previewing template {TemplateId}", templateId);
            ShowError("Failed to preview template: " + ex.Message);
        }
    }

    private async Task CloneTemplate(string templateId)
    {
        try
        {
            var original = _templates.FirstOrDefault(t => t.Id == templateId);
            if (original != null)
            {
                var cloned = new SheetTemplate
                    {
                        Id = Guid.NewGuid().ToString(),
                        Name = $"{original.Name} (Copy)",
                        Description = original.Description,
                        DataType = original.DataType,
                        CreatedAt = DateTime.UtcNow,
                        Columns = original.Columns.ToList(),
                        RowTemplates = original.RowTemplates.ToList(),
                        Formulas = original.Formulas.ToList()
                    };

                _templates.Add(cloned);
                ShowSuccess($"Template cloned as '{cloned.Name}'");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cloning template {TemplateId}", templateId);
            ShowError("Failed to clone template: " + ex.Message);
        }
    }

    private async Task DeleteTemplate(string templateId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this template?"))
        {
            try
            {
                _templates.RemoveAll(t => t.Id == templateId);
                ShowSuccess("Template deleted successfully");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting template {TemplateId}", templateId);
                ShowError("Failed to delete template: " + ex.Message);
            }
        }
    }

    private string GetPreviewRowClass(SheetRow row, int index)
    {
        if (row.IsHeader) return "table-secondary fw-bold";
        if (index == 1) return "table-info"; // Assume second row is formula
        return "";
    }

    private string GetPreviewCellClass(SheetCell cell)
    {
        var classes = new List<string>();

        if (cell.IsBold) classes.Add("fw-bold");
        if (!string.IsNullOrEmpty(cell.Formula)) classes.Add("font-monospace small");

        return string.Join(" ", classes);
    }

    private void ShowSuccess(string message)
    {
        _statusMessage = message;
        _statusIsError = false;
    }

    private void ShowError(string message)
    {
        _statusMessage = message;
        _statusIsError = true;
    }

    private void ClearStatus()
    {
        _statusMessage = string.Empty;
        _statusIsError = false;
    }

    // Template Designer Integration Methods
    private async Task OnCurrentTemplateChanged(SheetTemplate template)
    {
        _currentTemplate = template;
        StateHasChanged();
    }

    private async Task SaveCurrentTemplate()
    {
        try
        {
            if (string.IsNullOrEmpty(_editingTemplateId))
            {
                // New template
                _currentTemplate.Id = Guid.NewGuid().ToString();
                _currentTemplate.CreatedAt = DateTime.UtcNow;
                _templates.Add(_currentTemplate);
                ShowSuccess($"Template '{_currentTemplate.Name}' created successfully!");
            }
            else
            {
                // Editing existing template
                var existingIndex = _templates.FindIndex(t => t.Id == _editingTemplateId);
                if (existingIndex >= 0)
                {
                    _templates[existingIndex] = _currentTemplate;
                    ShowSuccess($"Template '{_currentTemplate.Name}' updated successfully!");
                }
            }

            _editingTemplateId = string.Empty;
            SetView(ViewMode.Overview);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving template");
            ShowError("Failed to save template: " + ex.Message);
        }
    }

    private async Task PreviewCurrentTemplate(SheetTemplate template)
    {
        try
        {
            _currentTemplate = template;

            // Generate mock preview data
            _previewData = new SheetData
                {
                    Title = $"Preview: {template.Name}",
                    Rows = new List<SheetRow>()
                };

            foreach (var rowTemplate in template.RowTemplates.Where(r => r.IsVisible).OrderBy(r => r.Order))
            {
                switch (rowTemplate.Type)
                {
                    case RowType.Header:
                        var headerRow = new SheetRow
                            {
                                IsHeader = true,
                                Cells = template.Columns.Select(c => new SheetCell { Value = c.Header, IsBold = true }).ToList()
                            };
                        _previewData.Rows.Add(headerRow);
                        break;

                    case RowType.Formula:
                        var formulaRow = new SheetRow
                            {
                                Cells = new List<SheetCell>()
                            };
                        foreach (var column in template.Columns)
                        {
                            var formula = template.Formulas.FirstOrDefault(f => f.RowTemplateId == rowTemplate.Id && f.ColumnHeader == column.Header);
                            formulaRow.Cells.Add(new SheetCell
                                {
                                    Formula = formula?.Formula?.Replace("{DATA_RANGE}", "B3:B25") ?? "",
                                    IsBold = true
                                });
                        }
                        _previewData.Rows.Add(formulaRow);
                        break;

                    case RowType.Data:
                        // Add 3 sample data rows
                        for (int i = 0; i < 3; i++)
                        {
                            var dataRow = new SheetRow
                                {
                                    Cells = template.Columns.Select((c, index) => new SheetCell
                                    {
                                        Value = GetSampleDataForColumn(c, i)
                                    }).ToList()
                                };
                            _previewData.Rows.Add(dataRow);
                        }
                        break;

                    case RowType.Summary:
                        var summaryRow = new SheetRow
                            {
                                Cells = new List<SheetCell>
                            {
                                new() { Value = "Summary:", IsBold = true }
                            }
                            };
                        // Fill remaining cells
                        for (int i = 1; i < template.Columns.Count; i++)
                        {
                            summaryRow.Cells.Add(new SheetCell
                                {
                                    Value = i == template.Columns.Count - 1 ? DateTime.Now.ToString("yyyy-MM-dd") : ""
                                });
                        }
                        _previewData.Rows.Add(summaryRow);
                        break;

                    case RowType.Separator:
                        var separatorRow = new SheetRow
                            {
                                Cells = template.Columns.Select(c => new SheetCell { Value = "" }).ToList()
                            };
                        _previewData.Rows.Add(separatorRow);
                        break;
                }
            }

            SetView(ViewMode.Preview);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating preview");
            ShowError("Failed to generate preview: " + ex.Message);
        }
    }

    private string GetSampleDataForColumn(ColumnTemplate column, int rowIndex)
    {
        return column.DataType?.ToLower() switch
        {
            "number" => (100 + rowIndex * 50).ToString(),
            "currency" => $"${(100 + rowIndex * 50):F2}",
            "date" => DateTime.Now.AddDays(rowIndex).ToString("yyyy-MM-dd"),
            "datetime" => DateTime.Now.AddDays(rowIndex).ToString("yyyy-MM-dd HH:mm"),
            "checkbox" => rowIndex % 2 == 0 ? "☑" : "☐",
            "email" => $"user{rowIndex + 1}@example.com",
            _ => $"Sample {column.Header} {rowIndex + 1}"
        };
    }
}

<style>
    .template-card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .template-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

    .preview-table {
        font-size: 0.9rem;
    }

        .preview-table th, .preview-table td {
            padding: 0.5rem;
            max-width: 150px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

    .google-sheets-settings {
        max-width: 1200px;
        margin: 0 auto;
    }
</style>