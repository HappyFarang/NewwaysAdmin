@page "/settings/google-sheets"
@using NewwaysAdmin.GoogleSheets.Models.Templates
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets.Designer
@using NewwaysAdmin.GoogleSheets.Services
@inject IJSRuntime JSRuntime
@inject IEnhancedSheetTemplateService TemplateService
@inject ILogger<GoogleSheetsSettings> Logger

<div class="google-sheets-settings">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-1">Google Sheets Templates</h4>
            <p class="text-muted mb-0">Create and manage your enhanced Google Sheets templates</p>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading templates...</p>
        </div>
    }
    else if (_hasError)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error Loading Templates</h4>
            <p>@_errorMessage</p>
            <hr>
            <button class="btn btn-outline-danger" @onclick="RetryLoad">
                <i class="bi bi-arrow-clockwise me-1"></i>Try Again
            </button>
        </div>
    }
    else if (_currentMode == DisplayMode.Welcome)
    {
        <div class="text-center py-5">
            <i class="bi bi-file-earmark-spreadsheet display-1 text-primary"></i>
            <h3 class="mt-3">Welcome to Google Sheets Templates</h3>
            <p class="text-muted mb-4">
                Create powerful spreadsheet templates with interactive checkboxes, formulas, and advanced formatting.
            </p>
            <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                <button class="btn btn-primary" @onclick="HandleGetStarted">
                    <i class="bi bi-grid-3x3-gap me-2"></i>Get Started
                </button>
                <button class="btn btn-success" @onclick="ShowDesigner">
                    <i class="bi bi-plus-lg me-2"></i>Create Template
                </button>
            </div>
        </div>
    }
    else if (_currentMode == DisplayMode.List)
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h6 class="mb-0">@_templates.Count Template@(_templates.Count == 1 ? "" : "s")</h6>
                <small class="text-muted">Enhanced templates with advanced features</small>
            </div>
            <button class="btn btn-primary" @onclick="ShowDesigner">
                <i class="bi bi-plus-lg me-2"></i>Create New Template
            </button>
        </div>

        @if (!_templates.Any())
        {
            <div class="empty-state text-center py-5">
                <i class="bi bi-file-earmark-spreadsheet display-1 text-muted"></i>
                <h4 class="mt-3 text-muted">No Templates Yet</h4>
                <p class="text-muted mb-4">
                    Get started by creating your first enhanced Google Sheets template with checkboxes, formulas, and formatting.
                </p>
                <button class="btn btn-success" @onclick="ShowDesigner">
                    <i class="bi bi-plus-lg me-2"></i>Create Your First Template
                </button>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var template in _templates)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@template.Name</h5>
                                <p class="card-text">@template.Description</p>
                                <small class="text-muted">
                                    Modified: @template.LastModified.ToString("MMM d, yyyy")
                                </small>
                            </div>
                            <div class="card-footer bg-transparent">
                                <div class="btn-group w-100">
                                    <button class="btn btn-outline-primary" @onclick="() => HandleEditTemplate(template)">
                                        <i class="bi bi-pencil me-1"></i>Edit
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => HandleDeleteTemplate(template)">
                                        <i class="bi bi-trash me-1"></i>Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
    else if (_currentMode == DisplayMode.Designer)
    {
        <EnhancedTemplateDesigner Template="_currentTemplate"
                                  IsEditing="_isEditing"
                                  OnSave="HandleTemplateSaved"
                                  OnCancel="HandleDesignerCancel" />
    }
</div>

@code {
    private enum DisplayMode { Welcome, List, Designer }

    private DisplayMode _currentMode = DisplayMode.Welcome;
    private List<EnhancedSheetTemplate> _templates = new();
    private EnhancedSheetTemplate? _currentTemplate;
    private bool _isEditing = false;
    private bool _isLoading = true;
    private bool _hasError = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("GoogleSheetsSettings: Starting initialization");

            // Add timeout and cancellation support
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));

            await LoadTemplatesWithErrorHandling(cts.Token);

            // If user has templates, show list instead of welcome
            if (_templates.Any())
            {
                _currentMode = DisplayMode.List;
            }

            Logger.LogInformation("GoogleSheetsSettings: Initialization completed successfully");
        }
        catch (OperationCanceledException)
        {
            Logger.LogWarning("GoogleSheetsSettings: Initialization timed out");
            SetError("The operation timed out. Please try again.");
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("circuit"))
        {
            Logger.LogWarning("GoogleSheetsSettings: Circuit closed during initialization");
            // Don't call StateHasChanged() here - circuit is closed
            return;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "GoogleSheetsSettings: Error during initialization");
            SetError($"Failed to load templates: {ex.Message}");
        }
        finally
        {
            _isLoading = false;

            // Only call StateHasChanged if we can
            await SafeStateHasChanged();
        }
    }

    private async Task LoadTemplatesWithErrorHandling(CancellationToken cancellationToken = default)
    {
        try
        {
            Logger.LogDebug("Loading templates from service");
            _templates = await TemplateService.GetTemplatesAsync();
            _hasError = false;
            _errorMessage = string.Empty;
            Logger.LogDebug("Successfully loaded {Count} templates", _templates.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading templates from service");
            _templates = new List<EnhancedSheetTemplate>();
            throw; // Re-throw to be handled by caller
        }
    }

    private async Task RetryLoad()
    {
        _isLoading = true;
        _hasError = false;
        await SafeStateHasChanged();

        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));
            await LoadTemplatesWithErrorHandling(cts.Token);

            if (_templates.Any())
            {
                _currentMode = DisplayMode.List;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during retry load");
            SetError($"Failed to load templates: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            await SafeStateHasChanged();
        }
    }

    private void SetError(string message)
    {
        _hasError = true;
        _errorMessage = message;
    }

    private async Task SafeStateHasChanged()
    {
        try
        {
            StateHasChanged();
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("circuit"))
        {
            Logger.LogWarning("Cannot update UI - circuit is closed");
            // Ignore - circuit is closed
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calling StateHasChanged");
        }
    }

    private async Task HandleGetStarted()
    {
        _currentMode = DisplayMode.List;
        await SafeStateHasChanged();
    }

    private async Task ShowDesigner()
    {
        try
        {
            // Create a new template
            _currentTemplate = new EnhancedSheetTemplate
                {
                    CreatedAt = DateTime.UtcNow,
                    LastModified = DateTime.UtcNow,
                    Formatting = new EnhancedSheetFormatting(),
                    DataColumns = new List<DataColumnTemplate>(),
                    CheckboxColumns = new List<CheckboxColumnTemplate>(),
                    FormulaRows = new List<FormulaRowTemplate>(),
                    Metadata = new Dictionary<string, string>()
                };

            _isEditing = false;
            _currentMode = DisplayMode.Designer;
            await SafeStateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error showing designer");
            SetError($"Error opening designer: {ex.Message}");
            await SafeStateHasChanged();
        }
    }

    private async Task HandleEditTemplate(EnhancedSheetTemplate template)
    {
        try
        {
            _currentTemplate = template;
            _isEditing = true;
            _currentMode = DisplayMode.Designer;
            await SafeStateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error editing template");
            SetError($"Error opening template for editing: {ex.Message}");
            await SafeStateHasChanged();
        }
    }

    private async Task HandleDeleteTemplate(EnhancedSheetTemplate template)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete '{template.Name}'?");

            if (confirmed)
            {
                await TemplateService.DeleteTemplateAsync(template.Id);
                await LoadTemplatesWithErrorHandling();
                await SafeStateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting template");
            SetError($"Error deleting template: {ex.Message}");
            await SafeStateHasChanged();
        }
    }

    private async Task HandleTemplateSaved(EnhancedSheetTemplate template)
    {
        try
        {
            await LoadTemplatesWithErrorHandling();
            _currentMode = DisplayMode.List;
            await SafeStateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error after saving template");
            SetError($"Template saved but error refreshing list: {ex.Message}");
            await SafeStateHasChanged();
        }
    }

    private async Task HandleDesignerCancel()
    {
        _currentMode = _templates.Any() ? DisplayMode.List : DisplayMode.Welcome;
        await SafeStateHasChanged();
    }
}