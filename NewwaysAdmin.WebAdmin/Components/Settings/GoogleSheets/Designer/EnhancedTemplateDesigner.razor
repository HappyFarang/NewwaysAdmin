@namespace NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets.Designer
@using NewwaysAdmin.GoogleSheets.Models.Templates
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets.Designer.Shared

<div class="enhanced-template-designer">
    <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
        <div class="row">
            <div class="col-12">
                <!-- Basic Template Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>Template Information
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="templateName" class="form-label">Template Name *</label>
                                <input type="text" class="form-control" id="templateName"
                                       @bind="_template.Name"
                                       placeholder="Enter template name" required />
                            </div>
                            <div class="col-md-6">
                                <label for="dataType" class="form-label">Data Type *</label>
                                <select class="form-select" id="dataType" @bind="_template.DataType" required>
                                    <option value="">Select data type...</option>
                                    <option value="BankSlipData">Bank Slip Data</option>
                                    <option value="SalesData">Sales Data</option>
                                    <option value="InventoryData">Inventory Data</option>
                                    <option value="CustomerData">Customer Data</option>
                                    <option value="FinancialData">Financial Data</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" rows="2"
                                          @bind="_template.Description"
                                          placeholder="Describe this template..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Data Columns Section -->
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-table me-2"></i>Data Columns
                        </h6>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="AddDataColumn">
                            <i class="bi bi-plus me-1"></i>Add Column
                        </button>
                    </div>
                    <div class="card-body">
                        @if (_template.DataColumns.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Header</th>
                                            <th>Field</th>
                                            <th>Width</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var column in _template.DataColumns.OrderBy(c => c.Index))
                                        {
                                            <tr>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="column.Header" placeholder="Column header" />
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="column.DataField" placeholder="Property name" />
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm"
                                                           @bind="column.Width" min="50" max="500" />
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => RemoveDataColumn(column)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-3">
                                <i class="bi bi-table display-4"></i>
                                <p>No data columns added yet</p>
                                <button type="button" class="btn btn-primary" @onclick="AddDataColumn">
                                    <i class="bi bi-plus me-1"></i>Add First Column
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Checkbox Columns Section -->
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="bi bi-check-square me-2"></i>Checkbox Columns
                        </h6>
                        <button type="button" class="btn btn-sm btn-success" @onclick="AddCheckboxColumn">
                            <i class="bi bi-plus me-1"></i>Add Checkbox
                        </button>
                    </div>
                    <div class="card-body">
                        @if (_template.CheckboxColumns.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Type</th>
                                            <th>Width</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var checkbox in _template.CheckboxColumns.OrderBy(c => c.Index))
                                        {
                                            <tr>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="checkbox.Name" placeholder="Checkbox name" />
                                                </td>
                                                <td>
                                                    <select class="form-select form-select-sm" @bind="checkbox.Type">
                                                        <option value="@CheckboxType.Manual">Manual</option>
                                                        <option value="@CheckboxType.Calculated">Calculated</option>
                                                        <option value="@CheckboxType.ReadOnly">Read Only</option>
                                                    </select>
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm"
                                                           @bind="checkbox.Width" min="50" max="200" />
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => RemoveCheckboxColumn(checkbox)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-3">
                                <i class="bi bi-check-square display-4"></i>
                                <p>No checkbox columns added yet</p>
                                <button type="button" class="btn btn-success" @onclick="AddCheckboxColumn">
                                    <i class="bi bi-plus me-1"></i>Add First Checkbox
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Advanced Options -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>Formatting Options
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="freezeHeader"
                                           @bind="_template.Formatting.FreezeHeaderRow" />
                                    <label class="form-check-label" for="freezeHeader">
                                        Freeze Header Row
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="alternateColors"
                                           @bind="_template.Formatting.AlternateRowColors" />
                                    <label class="form-check-label" for="alternateColors">
                                        Alternate Row Colors
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="protectSheet"
                                           @bind="_template.Formatting.ProtectSheet" />
                                    <label class="form-check-label" for="protectSheet">
                                        Protect Sheet
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-outline-secondary" @onclick="SaveAsDraft">
                        <i class="bi bi-save me-1"></i>Save as Draft
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="HandleCancel">
                        <i class="bi bi-x me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid())">
                        <i class="bi bi-check me-1"></i>Save Template
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

@code {
    [Parameter] public EnhancedSheetTemplate? Template { get; set; }
    [Parameter] public EventCallback<EnhancedSheetTemplate> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsEditing { get; set; } = false;

    private EnhancedSheetTemplate _template = new();
    private string _sheetName = "Sheet1";

    protected override void OnInitialized()
    {
        if (Template != null)
        {
            _template = CloneTemplate(Template);
        }
        else
        {
            _template = new EnhancedSheetTemplate
                {
                    CreatedAt = DateTime.UtcNow,
                    LastModified = DateTime.UtcNow,
                    Formatting = new EnhancedSheetFormatting()
                };
        }
    }

    private EnhancedSheetTemplate CloneTemplate(EnhancedSheetTemplate source)
    {
        return new EnhancedSheetTemplate
            {
                Id = source.Id,
                Name = source.Name,
                Description = source.Description,
                DataType = source.DataType,
                Version = source.Version,
                IsActive = source.IsActive,
                CreatedAt = source.CreatedAt,
                CreatedBy = source.CreatedBy,
                LastModified = source.LastModified,
                LastModifiedBy = source.LastModifiedBy,
                DataColumns = source.DataColumns.Select(c => new DataColumnTemplate
                {
                    Index = c.Index,
                    Header = c.Header,
                    DataField = c.DataField,
                    Format = c.Format,
                    Width = c.Width,
                    IsVisible = c.IsVisible,
                    BackgroundColor = c.BackgroundColor,
                    FontColor = c.FontColor,
                    IsBold = c.IsBold,
                    IsItalic = c.IsItalic,
                    TextAlignment = c.TextAlignment,
                    IsLocked = c.IsLocked,
                    ValidationRule = c.ValidationRule
                }).ToList(),
                FormulaRows = source.FormulaRows.Select(f => new FormulaRowTemplate
                {
                    RowIndex = f.RowIndex,
                    BackgroundColor = f.BackgroundColor,
                    FontColor = f.FontColor,
                    IsBold = f.IsBold,
                    IsLocked = f.IsLocked,
                    Height = f.Height,
                    ColumnFormulas = new Dictionary<int, string>(f.ColumnFormulas),
                    ColumnLabels = new Dictionary<int, string>(f.ColumnLabels),
                    ColumnFormats = new Dictionary<int, string>(f.ColumnFormats)
                }).ToList(),
                CheckboxColumns = source.CheckboxColumns.Select(c => new CheckboxColumnTemplate
                {
                    Id = c.Id,
                    Index = c.Index,
                    Name = c.Name,
                    Description = c.Description,
                    Type = c.Type,
                    Width = c.Width,
                    IsVisible = c.IsVisible,
                    BackgroundColor = c.BackgroundColor,
                    CheckedColor = c.CheckedColor,
                    UncheckedColor = c.UncheckedColor,
                    FormulaTemplate = c.FormulaTemplate,
                    ShowFormulaResult = c.ShowFormulaResult,
                    FormulaResultFormat = c.FormulaResultFormat,
                    IsReusable = c.IsReusable,
                    Category = c.Category,
                    CreatedAt = c.CreatedAt,
                    CreatedBy = c.CreatedBy
                }).ToList(),
                Formatting = new EnhancedSheetFormatting
                {
                    FreezeHeaderRow = source.Formatting.FreezeHeaderRow,
                    FreezeFormulaRow = source.Formatting.FreezeFormulaRow,
                    HeaderBackgroundColor = source.Formatting.HeaderBackgroundColor,
                    HeaderFontColor = source.Formatting.HeaderFontColor,
                    HeaderIsBold = source.Formatting.HeaderIsBold,
                    HeaderHeight = source.Formatting.HeaderHeight,
                    AlternateRowColors = source.Formatting.AlternateRowColors,
                    AlternateColor = source.Formatting.AlternateColor,
                    AddAutoFilter = source.Formatting.AddAutoFilter,
                    AddBorders = source.Formatting.AddBorders,
                    BorderStyle = source.Formatting.BorderStyle,
                    BorderColor = source.Formatting.BorderColor,
                    ProtectSheet = source.Formatting.ProtectSheet,
                    AllowSort = source.Formatting.AllowSort,
                    AllowFilter = source.Formatting.AllowFilter,
                    AllowEditCheckboxes = source.Formatting.AllowEditCheckboxes,
                    AllowEditData = source.Formatting.AllowEditData,
                    ShowGridlines = source.Formatting.ShowGridlines,
                    DefaultRowHeight = source.Formatting.DefaultRowHeight,
                    SheetTabColor = source.Formatting.SheetTabColor,
                    HideFormulaBar = source.Formatting.HideFormulaBar
                },
                Metadata = new Dictionary<string, string>(source.Metadata)
            };
    }

    private void AddDataColumn()
    {
        var newIndex = _template.DataColumns.Any() ? _template.DataColumns.Max(c => c.Index) + 1 : 0;
        _template.DataColumns.Add(new DataColumnTemplate
            {
                Index = newIndex,
                Header = $"Column {newIndex + 1}",
                DataField = string.Empty,
                Width = 120,
                IsVisible = true,
                TextAlignment = "LEFT"
            });
    }

    private void RemoveDataColumn(DataColumnTemplate column)
    {
        _template.DataColumns.Remove(column);
        // Reindex remaining columns
        for (int i = 0; i < _template.DataColumns.Count; i++)
        {
            _template.DataColumns[i].Index = i;
        }
    }

    private void AddCheckboxColumn()
    {
        var newIndex = _template.CheckboxColumns.Any() ? _template.CheckboxColumns.Max(c => c.Index) + 1 : 0;
        _template.CheckboxColumns.Add(new CheckboxColumnTemplate
            {
                Id = Guid.NewGuid().ToString(),
                Index = newIndex,
                Name = $"Checkbox {newIndex + 1}",
                Type = CheckboxType.Manual,
                Width = 100,
                IsVisible = true,
                BackgroundColor = "#F8F8F8",
                CheckedColor = "#4CAF50",
                UncheckedColor = "#FFFFFF"
            });
    }

    private void RemoveCheckboxColumn(CheckboxColumnTemplate checkbox)
    {
        _template.CheckboxColumns.Remove(checkbox);
        // Reindex remaining checkboxes
        for (int i = 0; i < _template.CheckboxColumns.Count; i++)
        {
            _template.CheckboxColumns[i].Index = i;
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(_template.Name) &&
               !string.IsNullOrWhiteSpace(_template.DataType) &&
               _template.DataColumns.Any();
    }

    private async Task HandleSubmit()
    {
        if (!IsFormValid()) return;

        _template.LastModified = DateTime.UtcNow;
        _template.LastModifiedBy = "Current User"; // TODO: Get from auth service

        if (string.IsNullOrEmpty(_template.Id))
        {
            _template.Id = Guid.NewGuid().ToString();
            _template.CreatedAt = DateTime.UtcNow;
            _template.CreatedBy = "Current User";
        }

        await OnSave.InvokeAsync(_template);
    }

    private async Task SaveAsDraft()
    {
        // TODO: Implement draft saving functionality
        Console.WriteLine("Saving as draft...");
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }
}