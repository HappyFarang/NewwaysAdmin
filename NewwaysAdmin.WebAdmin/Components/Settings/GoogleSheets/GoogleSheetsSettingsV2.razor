@* NewwaysAdmin.WebAdmin/Components/Settings/GoogleSheets/GoogleSheetsSettingsV2.razor *@
@page "/settings/google-sheets-v2"
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets
@inject ModuleColumnRegistry ColumnRegistry
@inject IJSRuntime JSRuntime
@inject ILogger<GoogleSheetsSettingsV2> Logger

<div class="google-sheets-settings">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-1">Google Sheets Configuration</h4>
            <p class="text-muted mb-0">Configure admin templates and manage module exports</p>
        </div>
        <div class="btn-group">
            <button class="btn btn-outline-primary" @onclick="ShowOverview">
                <i class="bi bi-house me-1"></i>Overview
            </button>
            <button class="btn btn-primary" @onclick="ShowTemplateBuilder">
                <i class="bi bi-plus-lg me-1"></i>Create Template
            </button>
        </div>
    </div>

    @if (_currentView == ViewMode.Overview)
    {
        <!-- Overview Dashboard -->
        <div class="row">
            <!-- Available Modules -->
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-puzzle me-2"></i>Available Modules
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (_availableModules.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var module in _availableModules)
                                {
                                    var columns = ColumnRegistry.GetModuleColumns(module);
                                    var hasTemplate = _adminTemplates.ContainsKey(module);

                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-1">@module</h6>
                                            <small class="text-muted">@columns.Count available columns</small>
                                        </div>
                                        <div>
                                            @if (hasTemplate)
                                            {
                                                <span class="badge bg-success me-2">Configured</span>
                                                <button class="btn btn-outline-primary btn-sm"
                                                        @onclick="@(() => EditTemplate(module))">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary me-2">Not Configured</span>
                                                <button class="btn btn-primary btn-sm"
                                                        @onclick="@(() => CreateTemplateForModule(module))">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <i class="bi bi-puzzle display-4"></i>
                                <p class="mt-2">No modules available</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Configured Templates -->
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-file-earmark-spreadsheet me-2"></i>Admin Templates
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (_adminTemplates.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var template in _adminTemplates.Values)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="mb-1">@template.TemplateName</h6>
                                                <small class="text-muted">
                                                    @template.SelectedColumns.Count columns |
                                                    Created @template.CreatedAt.ToString("MM/dd/yyyy")
                                                </small>
                                            </div>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-info"
                                                        @onclick="@(() => PreviewTemplate(template))">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-primary"
                                                        @onclick="@(() => EditTemplate(template.ModuleName))">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-outline-danger"
                                                        @onclick="@(() => DeleteTemplate(template.ModuleName))">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>

                                        @if (_previewingTemplate == template.ModuleName)
                                        {
                                            <div class="mt-3 p-3 bg-light rounded">
                                                <h6>Columns:</h6>
                                                <div class="row">
                                                    @foreach (var col in template.SelectedColumns)
                                                    {
                                                        <div class="col-md-6 mb-1">
                                                            <small>
                                                                <strong>@col.DisplayName</strong>
                                                                @if (col.IncludeSum || !string.IsNullOrEmpty(col.Formula))
                                                                {
                                                                    <span class="badge bg-info ms-1">@(col.IncludeSum ? "SUM" : col.Formula)</span>
                                                                }
                                                            </small>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <i class="bi bi-file-earmark-plus display-4"></i>
                                <p class="mt-2">No templates configured</p>
                                <small>Create your first template to get started</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <h3 class="text-primary">@_availableModules.Count</h3>
                                <small class="text-muted">Available Modules</small>
                            </div>
                            <div class="col-md-3">
                                <h3 class="text-success">@_adminTemplates.Count</h3>
                                <small class="text-muted">Configured Templates</small>
                            </div>
                            <div class="col-md-3">
                                <h3 class="text-info">@_totalColumnsConfigured</h3>
                                <small class="text-muted">Total Columns</small>
                            </div>
                            <div class="col-md-3">
                                <h3 class="text-warning">@_templatesWithFormulas</h3>
                                <small class="text-muted">Templates with Formulas</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (_currentView == ViewMode.TemplateBuilder)
    {
        <!-- Template Builder -->
        <AdminTemplateBuilder OnTemplateSaved="HandleTemplateSaved" />
    }

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="alert @(_statusIsError ? "alert-danger" : "alert-success") alert-dismissible fade show mt-3">
            @_statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatus"></button>
        </div>
    }
</div>

@code {
    private ViewMode _currentView = ViewMode.Overview;
    private List<string> _availableModules = new();
    private Dictionary<string, AdminTemplateBuilder.AdminTemplateConfig> _adminTemplates = new();
    private string _previewingTemplate = string.Empty;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;

    // Computed properties for stats
    private int _totalColumnsConfigured => _adminTemplates.Values.Sum(t => t.SelectedColumns.Count);
    private int _templatesWithFormulas => _adminTemplates.Values.Count(t =>
        t.SelectedColumns.Any(c => c.IncludeSum || !string.IsNullOrEmpty(c.Formula)));

    private enum ViewMode
    {
        Overview,
        TemplateBuilder
    }

    protected override void OnInitialized()
    {
        _availableModules = ColumnRegistry.GetAvailableModules();
        LoadExistingTemplates();
    }

    private void LoadExistingTemplates()
    {
        // TODO: Load saved templates from storage
        // For now, simulate some data
        _adminTemplates = new Dictionary<string, AdminTemplateBuilder.AdminTemplateConfig>();
    }

    private void ShowOverview()
    {
        _currentView = ViewMode.Overview;
        _previewingTemplate = string.Empty;
        StateHasChanged();
    }

    private void ShowTemplateBuilder()
    {
        _currentView = ViewMode.TemplateBuilder;
        StateHasChanged();
    }

    private void CreateTemplateForModule(string module)
    {
        // TODO: Pre-populate the template builder with the selected module
        ShowTemplateBuilder();
    }

    private void EditTemplate(string moduleName)
    {
        // TODO: Load existing template for editing
        ShowTemplateBuilder();
    }

    private async Task DeleteTemplate(string moduleName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete the template for {moduleName}?");

        if (confirmed)
        {
            _adminTemplates.Remove(moduleName);
            ShowStatus($"Template for {moduleName} deleted successfully.", false);
            StateHasChanged();
        }
    }

    private void PreviewTemplate(AdminTemplateBuilder.AdminTemplateConfig template)
    {
        _previewingTemplate = _previewingTemplate == template.ModuleName ? string.Empty : template.ModuleName;
        StateHasChanged();
    }

    private async Task HandleTemplateSaved(AdminTemplateBuilder.AdminTemplateConfig template)
    {
        try
        {
            // Save the template
            _adminTemplates[template.ModuleName] = template;

            // TODO: Persist to storage

            ShowStatus($"Template '{template.TemplateName}' saved successfully!", false);
            ShowOverview();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving template");
            ShowStatus($"Error saving template: {ex.Message}", true);
        }
    }

    private void ShowStatus(string message, bool isError)
    {
        _statusMessage = message;
        _statusIsError = isError;
        StateHasChanged();
    }

    private void ClearStatus()
    {
        _statusMessage = string.Empty;
        StateHasChanged();
    }
}