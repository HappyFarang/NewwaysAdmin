@* NewwaysAdmin.WebAdmin/Components/Settings/GoogleSheets/AdminTemplateBuilder.razor *@
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.GoogleSheets.Models
@inject ModuleColumnRegistry ColumnRegistry

<div class="admin-template-builder">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-gear me-2"></i>
                @if (_isEditMode)
                {
                    <text>Edit Template: @_templateName</text>
                }
                else
                {
                    <text>Admin Template Configuration</text>
                }
            </h5>
        </div>
        <div class="card-body">
            @if (_step == 1 && !_isEditMode)
            {
                <!-- Step 1: Select Module (skip in edit mode) -->
                <div class="step-container">
                    <h6>Step 1: Select Data Module</h6>
                    <p class="text-muted">Choose which data type you want to create a template for:</p>

                    <div class="row">
                        @foreach (var module in _availableModules)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card module-card @(_selectedModule == module ? "border-primary" : "")"
                                     style="cursor: pointer;"
                                     @onclick="@(() => SelectModule(module))">
                                    <div class="card-body text-center">
                                        <i class="bi @GetModuleIcon(module) display-6 mb-2"></i>
                                        <h6>@module</h6>
                                        <small class="text-muted">@GetModuleDescription(module)</small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(_selectedModule))
                    {
                        <div class="mt-3">
                            <button class="btn btn-primary" @onclick="NextStep">
                                Next: Configure Columns <i class="bi bi-arrow-right ms-1"></i>
                            </button>
                        </div>
                    }
                </div>
            }
            else if (_step == 2 || _isEditMode)
            {
                <!-- Step 2: Select and Configure Columns -->
                <div class="step-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h6>
                                @if (_isEditMode)
                                {
                                    <text>Edit Template for @_selectedModule</text>
                                }
                                else
                                {
                                    <text>Step 2: Configure Columns for @_selectedModule</text>
                                }
                            </h6>
                            <p class="text-muted mb-0">Select which columns to include and configure formulas:</p>
                        </div>
                        @if (!_isEditMode)
                        {
                            <button class="btn btn-outline-secondary btn-sm" @onclick="PrevStep">
                                <i class="bi bi-arrow-left me-1"></i>Back
                            </button>
                        }
                    </div>

                    <!-- Template Name Input -->
                    <div class="mb-4">
                        <label class="form-label">Template Name</label>
                        <input type="text" class="form-control" @bind="_templateName"
                               placeholder="@($"{_selectedModule} Admin Template")" />
                        <div class="form-text">
                            @if (_isEditMode)
                            {
                                <text>Update the template name or leave as is</text>
                            }
                            else
                            {
                                <text>Leave blank to use default name</text>
                            }
                        </div>
                    </div>

                    <div class="row">
                        <!-- Column Selection -->
                        <div class="col-md-8">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 40px;">
                                                <input type="checkbox" class="form-check-input"
                                                       checked="@_allColumnsSelected"
                                                       @onchange="@((ChangeEventArgs e) => ToggleAllColumns((bool)e.Value!))" />
                                            </th>
                                            <th>Column Name</th>
                                            <th>Type</th>
                                            <th>Width</th>
                                            <th>Sum</th>
                                            <th>Formula</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var column in _availableColumns)
                                        {
                                            <tr class="@(column.IsSelected ? "table-light" : "")">
                                                <td>
                                                    <input type="checkbox" class="form-check-input"
                                                           checked="@column.IsSelected"
                                                           @onchange="@((ChangeEventArgs e) => OnColumnSelectionChanged(column, (bool)e.Value!))" />
                                                </td>
                                                <td>
                                                    <div>
                                                        <strong>@column.DisplayName</strong>
                                                        <br />
                                                        <small class="text-muted">@column.PropertyName</small>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge @GetTypeBadgeClass(column.DataType)">
                                                        @column.DataType
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (column.IsSelected)
                                                    {
                                                        <input type="number" class="form-control form-control-sm"
                                                               @bind="column.Width"
                                                               min="50" max="500" step="10"
                                                               style="width: 80px;" />
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">@column.Width</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (column.IsSelected && column.CanSum)
                                                    {
                                                        <input type="checkbox" class="form-check-input"
                                                               @bind="column.IncludeSum" />
                                                    }
                                                    else if (column.CanSum)
                                                    {
                                                        <span class="text-muted">
                                                            <i class="bi bi-calculator"></i>
                                                        </span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (column.IsSelected)
                                                    {
                                                        <input type="text" class="form-control form-control-sm"
                                                               @bind="column.Formula"
                                                               placeholder="e.g., =SUM(A:A)"
                                                               style="width: 120px;" />
                                                    }
                                                    else if (!string.IsNullOrEmpty(column.Formula))
                                                    {
                                                        <small class="text-muted">@column.Formula</small>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Preview Panel -->
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-eye me-1"></i>Preview
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @if (_selectedColumns.Any())
                                    {
                                        <div class="preview-table">
                                            <table class="table table-sm table-bordered">
                                                <thead class="table-dark">
                                                    <tr>
                                                        @foreach (var (column, index) in _selectedColumns.Select((c, i) => (c, i)))
                                                        {
                                                            <th style="width: @(column.Width)px; font-size: 0.75rem;">
                                                                @GetColumnLetter(index)
                                                                <br />
                                                                <small>@column.DisplayName</small>
                                                            </th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        @foreach (var column in _selectedColumns)
                                                        {
                                                            <td style="font-size: 0.75rem; padding: 4px;">
                                                                @if (column.DataType == "Currency")
                                                                {
                                                                    <text>$123.45</text>
                                                                }
                                                                else if (column.DataType == "Date")
                                                                {
                                                                    <text>12/25/24</text>
                                                                }
                                                                else if (column.DataType == "Number")
                                                                {
                                                                    <text>42</text>
                                                                }
                                                                else
                                                                {
                                                                    <text>Sample</text>
                                                                }
                                                            </td>
                                                        }
                                                    </tr>
                                                    @if (_selectedColumns.Any(c => c.IncludeSum))
                                                    {
                                                        <tr class="table-warning">
                                                            @foreach (var column in _selectedColumns)
                                                            {
                                                                <td style="font-size: 0.75rem; padding: 4px;">
                                                                    @if (column.IncludeSum)
                                                                    {
                                                                        <strong>SUM</strong>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>

                                            @if (_selectedColumns.Any(c => !string.IsNullOrEmpty(c.Formula)))
                                            {
                                                <div class="mt-2">
                                                    <small class="text-muted">
                                                        <i class="bi bi-info-circle me-1"></i>
                                                        Custom formulas: @_selectedColumns.Count(c => !string.IsNullOrEmpty(c.Formula))
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center text-muted py-4">
                                            <i class="bi bi-table"></i>
                                            <p class="mb-0 small">Select columns to see preview</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (_selectedColumns.Any())
                    {
                        <div class="mt-4">
                            <button class="btn btn-success" @onclick="SaveTemplate">
                                <i class="bi bi-save me-1"></i>
                                @if (_isEditMode)
                                {
                                    <text>Update Template</text>
                                }
                                else
                                {
                                    <text>Save Admin Template</text>
                                }
                            </button>
                            <button class="btn btn-outline-secondary ms-2" @onclick="Reset">
                                @if (_isEditMode)
                                {
                                    <text>Cancel Changes</text>
                                }
                                else
                                {
                                    <text>Cancel</text>
                                }
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<AdminTemplateConfig> OnTemplateSaved { get; set; }
    [Parameter] public string EditingModuleName { get; set; } = string.Empty;
    [Parameter] public AdminTemplateConfig? EditingTemplate { get; set; } = null;

    private int _step = 1;
    private string _selectedModule = string.Empty;
    private List<string> _availableModules = new();
    private List<ColumnDefinitionExtended> _availableColumns = new();
    private bool _allColumnsSelected = false;
    private bool _isEditMode = false;
    private string _templateName = string.Empty;

    private List<ColumnDefinitionExtended> _selectedColumns =>
        _availableColumns.Where(c => c.IsSelected).ToList();

    protected override void OnInitialized()
    {
        _availableModules = ColumnRegistry.GetAvailableModules();
    }

    protected override void OnParametersSet()
    {
        // Check if we're in edit mode
        if (!string.IsNullOrEmpty(EditingModuleName) && EditingTemplate != null)
        {
            _isEditMode = true;
            _selectedModule = EditingModuleName;
            _templateName = EditingTemplate.TemplateName;
            LoadModuleColumnsForEdit();
            _step = 2; // Skip module selection step
        }
        else
        {
            _isEditMode = false;
            if (_step == 2) // Only reset if we were in step 2
            {
                Reset();
            }
        }
    }

    private void SelectModule(string module)
    {
        _selectedModule = module;
        StateHasChanged();
    }

    private void NextStep()
    {
        if (_step == 1 && !string.IsNullOrEmpty(_selectedModule))
        {
            LoadModuleColumns();
            _step = 2;
        }
        StateHasChanged();
    }

    private void PrevStep()
    {
        if (_step > 1)
        {
            _step--;
            StateHasChanged();
        }
    }

    private void LoadModuleColumns()
    {
        var columns = ColumnRegistry.GetModuleColumns(_selectedModule);
        _availableColumns = columns.Select(c => new ColumnDefinitionExtended
            {
                PropertyName = c.PropertyName,
                DisplayName = c.DisplayName,
                DataType = c.DataType,
                Format = c.Format,
                Width = c.Width,
                CanSum = c.CanSum,
                Formula = c.Formula,
                IsSelected = false,
                IncludeSum = false
            }).ToList();
    }

    private void LoadModuleColumnsForEdit()
    {
        if (EditingTemplate == null) return;

        var columns = ColumnRegistry.GetModuleColumns(_selectedModule);
        _availableColumns = columns.Select(c =>
        {
            var extended = new ColumnDefinitionExtended
                {
                    PropertyName = c.PropertyName,
                    DisplayName = c.DisplayName,
                    DataType = c.DataType,
                    Format = c.Format,
                    Width = c.Width,
                    CanSum = c.CanSum,
                    Formula = c.Formula,
                    IsSelected = false,
                    IncludeSum = false
                };

            // Check if this column was selected in the existing template
            var existingColumn = EditingTemplate.SelectedColumns
                .FirstOrDefault(sc => sc.PropertyName == c.PropertyName);

            if (existingColumn != null)
            {
                extended.IsSelected = true;
                extended.Width = existingColumn.Width;
                extended.IncludeSum = existingColumn.IncludeSum;
                extended.Formula = existingColumn.Formula;
            }

            return extended;
        }).ToList();

        _allColumnsSelected = _availableColumns.All(c => c.IsSelected);
    }

    private void ToggleAllColumns(bool selectAll)
    {
        foreach (var column in _availableColumns)
        {
            column.IsSelected = selectAll;
        }
        _allColumnsSelected = selectAll;
        StateHasChanged();
    }

    private void OnColumnSelectionChanged(ColumnDefinitionExtended column, bool isSelected)
    {
        column.IsSelected = isSelected;
        _allColumnsSelected = _availableColumns.All(c => c.IsSelected);
        StateHasChanged();
    }

    private async Task SaveTemplate()
    {
        var config = new AdminTemplateConfig
            {
                ModuleName = _selectedModule,
                TemplateName = !string.IsNullOrEmpty(_templateName) ? _templateName : $"{_selectedModule} Admin Template",
                SelectedColumns = _selectedColumns.Select(c => new SelectedColumnConfig
                {
                    PropertyName = c.PropertyName,
                    DisplayName = c.DisplayName,
                    Width = c.Width,
                    IncludeSum = c.IncludeSum,
                    Formula = c.Formula
                }).ToList(),
                CreatedAt = _isEditMode && EditingTemplate != null ? EditingTemplate.CreatedAt : DateTime.UtcNow
            };

        await OnTemplateSaved.InvokeAsync(config);
        Reset();
    }

    private void Reset()
    {
        _step = 1;
        _selectedModule = string.Empty;
        _templateName = string.Empty;
        _availableColumns.Clear();
        _isEditMode = false;
        StateHasChanged();
    }

    private string GetModuleIcon(string module) => module switch
    {
        "BankSlips" => "bi-credit-card",
        "Sales" => "bi-graph-up",
        "Orders" => "bi-basket",
        "Inventory" => "bi-boxes",
        _ => "bi-table"
    };

    private string GetModuleDescription(string module) => module switch
    {
        "BankSlips" => "Bank transaction data",
        "Sales" => "Sales and revenue data",
        "Orders" => "Order and purchase data",
        "Inventory" => "Stock and inventory data",
        _ => "Generic data module"
    };

    private string GetTypeBadgeClass(string dataType) => dataType switch
    {
        "Currency" => "bg-success",
        "Date" => "bg-info",
        "Number" => "bg-warning",
        "Text" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetColumnLetter(int index)
    {
        return ColumnLetterHelper.GetColumnLetter(index);
    }

    public class ColumnDefinitionExtended : ColumnDefinition
    {
        public bool IncludeSum { get; set; } = false;
    }

    public class AdminTemplateConfig
    {
        public string ModuleName { get; set; } = string.Empty;
        public string TemplateName { get; set; } = string.Empty;
        public List<SelectedColumnConfig> SelectedColumns { get; set; } = new();
        public DateTime CreatedAt { get; set; }
    }

    public class SelectedColumnConfig
    {
        public string PropertyName { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public int Width { get; set; }
        public bool IncludeSum { get; set; }
        public string Formula { get; set; } = string.Empty;
    }
}