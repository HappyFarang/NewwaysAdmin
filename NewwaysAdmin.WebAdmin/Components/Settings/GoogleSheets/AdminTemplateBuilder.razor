@* NewwaysAdmin.WebAdmin/Components/Settings/GoogleSheets/AdminTemplateBuilder.razor *@
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.GoogleSheets.Models
@inject ModuleColumnRegistry ColumnRegistry

<div class="admin-template-builder">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                <i class="bi bi-gear me-2"></i>Admin Template Configuration
            </h5>
        </div>
        <div class="card-body">
            @if (_step == 1)
            {
                <!-- Step 1: Select Module -->
                <div class="step-container">
                    <h6>Step 1: Select Data Module</h6>
                    <p class="text-muted">Choose which data type you want to create a template for:</p>
                    
                    <div class="row">
                        @foreach (var module in _availableModules)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card module-card @(_selectedModule == module ? "border-primary" : "")" 
                                     style="cursor: pointer;" 
                                     @onclick="@(() => SelectModule(module))">
                                    <div class="card-body text-center">
                                        <i class="bi @GetModuleIcon(module) display-6 mb-2"></i>
                                        <h6>@module</h6>
                                        <small class="text-muted">@GetModuleDescription(module)</small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(_selectedModule))
                    {
                        <div class="mt-3">
                            <button class="btn btn-primary" @onclick="NextStep">
                                Next: Configure Columns <i class="bi bi-arrow-right ms-1"></i>
                            </button>
                        </div>
                    }
                </div>
            }
            else if (_step == 2)
            {
                <!-- Step 2: Select and Configure Columns -->
                <div class="step-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h6>Step 2: Configure Columns for @_selectedModule</h6>
                            <p class="text-muted mb-0">Select which columns to include and configure formulas:</p>
                        </div>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="PrevStep">
                            <i class="bi bi-arrow-left me-1"></i>Back
                        </button>
                    </div>

                    <div class="row">
                        <!-- Column Selection -->
                        <div class="col-md-8">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 40px;">
                                                <input type="checkbox" class="form-check-input" 
                                                       @onchange="ToggleAllColumns" 
                                                       checked="@_allColumnsSelected" />
                                            </th>
                                            <th>Column Name</th>
                                            <th>Type</th>
                                            <th>Width</th>
                                            <th>Formula</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var column in _availableColumns)
                                        {
                                            <tr class="@(column.IsSelected ? "table-light" : "")">
                                                <td>
                                                    <input type="checkbox" class="form-check-input"
                                                           @bind="column.IsSelected"
                                                           @bind:after="OnColumnSelectionChanged" />
                                                </td>
                                                <td>
                                                    <strong>@column.DisplayName</strong>
                                                    <br><small class="text-muted">@column.PropertyName</small>
                                                </td>
                                                <td>
                                                    <span class="badge @GetTypeBadgeClass(column.DataType)">
                                                        @column.DataType
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (column.IsSelected)
                                                    {
                                                        <input type="number" class="form-control form-control-sm" 
                                                               style="width: 80px;" 
                                                               @bind="column.Width" 
                                                               min="50" max="500" />
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">@column.Width</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (column.IsSelected && (column.CanSum || !string.IsNullOrEmpty(column.Formula)))
                                                    {
                                                        <div class="d-flex gap-2">
                                                            @if (column.CanSum)
                                                            {
                                                                <div class="form-check form-check-inline">
                                                                    <input type="checkbox" class="form-check-input" 
                                                                           @bind="column.IncludeSum" 
                                                                           id="sum_@column.PropertyName" />
                                                                    <label class="form-check-label small" for="sum_@column.PropertyName">SUM</label>
                                                                </div>
                                                            }
                                                            <select class="form-select form-select-sm" style="width: 100px;" 
                                                                    @bind="column.Formula">
                                                                <option value="">None</option>
                                                                <option value="SUM">SUM</option>
                                                                <option value="AVERAGE">AVERAGE</option>
                                                                <option value="COUNT">COUNT</option>
                                                                <option value="MAX">MAX</option>
                                                                <option value="MIN">MIN</option>
                                                            </select>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Preview -->
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">Template Preview</h6>
                                </div>
                                <div class="card-body">
                                    @if (_selectedColumns.Any())
                                    {
                                        <div class="template-preview">
                                            <small class="text-muted">Row 1 (Headers):</small>
                                            <div class="border rounded p-2 mb-2 small">
                                                @string.Join(" | ", _selectedColumns.Select(c => c.DisplayName))
                                            </div>

                                            @if (_selectedColumns.Any(c => c.IncludeSum || !string.IsNullOrEmpty(c.Formula)))
                                            {
                                                <small class="text-muted">Row 2 (Formulas):</small>
                                                <div class="border rounded p-2 mb-2 small">
                                                    @foreach (var col in _selectedColumns)
                                                    {
                                                        if (col.IncludeSum || !string.IsNullOrEmpty(col.Formula))
                                                        {
                                                            <div>@col.DisplayName: =@(col.IncludeSum ? "SUM" : col.Formula)(@GetColumnLetter(_selectedColumns.IndexOf(col))3:@GetColumnLetter(_selectedColumns.IndexOf(col)))</div>
                                                        }
                                                    }
                                                </div>
                                            }

                                            <small class="text-muted">Row 3+ (Data):</small>
                                            <div class="border rounded p-2 small text-muted">
                                                User data will populate here...
                                            </div>

                                            <div class="mt-3">
                                                <small class="text-success">
                                                    <i class="bi bi-check-circle me-1"></i>
                                                    @_selectedColumns.Count column(s) selected
                                                </small>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center text-muted py-3">
                                            <i class="bi bi-table"></i>
                                            <p class="mb-0 small">Select columns to see preview</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (_selectedColumns.Any())
                    {
                        <div class="mt-4">
                            <button class="btn btn-success" @onclick="SaveTemplate">
                                <i class="bi bi-save me-1"></i>Save Admin Template
                            </button>
                            <button class="btn btn-outline-secondary ms-2" @onclick="Reset">
                                Cancel
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<AdminTemplateConfig> OnTemplateSaved { get; set; }

    private int _step = 1;
    private string _selectedModule = string.Empty;
    private List<string> _availableModules = new();
    private List<ColumnDefinitionExtended> _availableColumns = new();
    private bool _allColumnsSelected = false;

    private List<ColumnDefinitionExtended> _selectedColumns => 
        _availableColumns.Where(c => c.IsSelected).ToList();

    protected override void OnInitialized()
    {
        _availableModules = ColumnRegistry.GetAvailableModules();
    }

    private void SelectModule(string module)
    {
        _selectedModule = module;
        StateHasChanged();
    }

    private void NextStep()
    {
        if (_step == 1 && !string.IsNullOrEmpty(_selectedModule))
        {
            LoadModuleColumns();
            _step = 2;
        }
        StateHasChanged();
    }

    private void PrevStep()
    {
        if (_step > 1)
        {
            _step--;
            StateHasChanged();
        }
    }

    private void LoadModuleColumns()
    {
        var columns = ColumnRegistry.GetModuleColumns(_selectedModule);
        _availableColumns = columns.Select(c => new ColumnDefinitionExtended
        {
            PropertyName = c.PropertyName,
            DisplayName = c.DisplayName,
            DataType = c.DataType,
            Format = c.Format,
            Width = c.Width,
            CanSum = c.CanSum,
            Formula = c.Formula,
            IsSelected = false,
            IncludeSum = false
        }).ToList();
    }

    private void ToggleAllColumns(ChangeEventArgs e)
    {
        var selectAll = (bool)e.Value!;
        foreach (var column in _availableColumns)
        {
            column.IsSelected = selectAll;
        }
        _allColumnsSelected = selectAll;
        StateHasChanged();
    }

    private void OnColumnSelectionChanged()
    {
        _allColumnsSelected = _availableColumns.All(c => c.IsSelected);
        StateHasChanged();
    }

    private async Task SaveTemplate()
    {
        var config = new AdminTemplateConfig
        {
            ModuleName = _selectedModule,
            TemplateName = $"{_selectedModule} Admin Template",
            SelectedColumns = _selectedColumns.Select(c => new SelectedColumnConfig
            {
                PropertyName = c.PropertyName,
                DisplayName = c.DisplayName,
                Width = c.Width,
                IncludeSum = c.IncludeSum,
                Formula = c.Formula
            }).ToList(),
            CreatedAt = DateTime.UtcNow
        };

        await OnTemplateSaved.InvokeAsync(config);
        Reset();
    }

    private void Reset()
    {
        _step = 1;
        _selectedModule = string.Empty;
        _availableColumns.Clear();
        StateHasChanged();
    }

    private string GetModuleIcon(string module) => module switch
    {
        "BankSlips" => "bi-credit-card",
        "Sales" => "bi-graph-up",
        "Orders" => "bi-basket",
        "Inventory" => "bi-boxes",
        _ => "bi-table"
    };

    private string GetModuleDescription(string module) => module switch
    {
        "BankSlips" => "Bank transaction data",
        "Sales" => "Sales and revenue data", 
        "Orders" => "Order and purchase data",
        "Inventory" => "Stock and inventory data",
        _ => "Generic data module"
    };

    private string GetTypeBadgeClass(string dataType) => dataType switch
    {
        "Currency" => "bg-success",
        "Date" => "bg-info", 
        "Number" => "bg-warning",
        "Text" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetColumnLetter(int index)
    {
        return ColumnLetterHelper.GetColumnLetter(index);
    }

    public class ColumnDefinitionExtended : ColumnDefinition
    {
        public bool IncludeSum { get; set; } = false;
    }

    public class AdminTemplateConfig
    {
        public string ModuleName { get; set; } = string.Empty;
        public string TemplateName { get; set; } = string.Empty;
        public List<SelectedColumnConfig> SelectedColumns { get; set; } = new();
        public DateTime CreatedAt { get; set; }
    }

    public class SelectedColumnConfig
    {
        public string PropertyName { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public int Width { get; set; }
        public bool IncludeSum { get; set; }
        public string Formula { get; set; } = string.Empty;
    }
}