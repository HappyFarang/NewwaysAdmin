@namespace NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets
@using static NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets.GoogleSheetsSettings

<div class="template-list">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h5 class="mb-1">Your Templates</h5>
            <p class="text-muted mb-0">Manage your Google Sheets templates</p>
        </div>
        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="bi bi-plus-lg me-2"></i>Create New
            </button>
            <ul class="dropdown-menu">
                <li>
                    <button class="dropdown-item" @onclick="() => OnCreateNew.InvokeAsync()">
                        <i class="bi bi-lightning-charge me-2"></i>Basic Template
                    </button>
                </li>
                <li>
                    <button class="dropdown-item" @onclick="() => OnCreateNew.InvokeAsync()">
                        <i class="bi bi-gear-wide-connected me-2"></i>Enhanced Template
                    </button>
                </li>
            </ul>
        </div>
    </div>

    @if (!Templates.Any())
    {
        <div class="empty-state text-center py-5">
            <div class="mb-4">
                <i class="bi bi-file-earmark-spreadsheet display-1 text-muted"></i>
            </div>
            <h5 class="mb-3">No templates yet</h5>
            <p class="text-muted mb-4">
                Create your first Google Sheets template to get started
            </p>
            <button class="btn btn-primary" @onclick="() => OnCreateNew.InvokeAsync()">
                <i class="bi bi-plus-lg me-2"></i>Create Your First Template
            </button>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var template in Templates)
            {
                <div class="col-lg-6 col-xl-4">
                    <div class="card template-card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div class="flex-grow-1">
                                    <h6 class="card-title mb-1">@template.Name</h6>
                                    <small class="text-muted">
                                        @template.Type.ToString() Template
                                    </small>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle"
                                            type="button" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <button class="dropdown-item"
                                                    @onclick="() => OnEditTemplate.InvokeAsync(template)">
                                                <i class="bi bi-pencil me-2"></i>Edit
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item"
                                                    @onclick="() => OnDuplicateTemplate.InvokeAsync(template)">
                                                <i class="bi bi-files me-2"></i>Duplicate
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger"
                                                    @onclick="() => OnDeleteTemplate.InvokeAsync(template)">
                                                <i class="bi bi-trash me-2"></i>Delete
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            @if (!string.IsNullOrWhiteSpace(template.Description))
                            {
                                <p class="card-text text-muted small mb-3">
                                    @template.Description
                                </p>
                            }

                            <div class="template-info">
                                <div class="row text-center">
                                    <div class="col-6">
                                        <div class="border-end">
                                            <div class="text-muted small">Created</div>
                                            <div class="fw-medium small">
                                                @template.CreatedDate.ToString("MMM dd")
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-muted small">Type</div>
                                        <div class="fw-medium small">
                                            @if (template.Type == TemplateType.Basic)
                                            {
                                                <span class="badge bg-primary-subtle text-primary">
                                                    <i class="bi bi-lightning-charge me-1"></i>Basic
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success-subtle text-success">
                                                    <i class="bi bi-gear-wide-connected me-1"></i>Enhanced
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card-footer bg-transparent border-top-0 pt-0">
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button class="btn btn-outline-primary btn-sm"
                                        @onclick="() => OnEditTemplate.InvokeAsync(template)">
                                    <i class="bi bi-pencil me-1"></i>Edit
                                </button>
                                <button class="btn btn-primary btn-sm"
                                        @onclick="() => ExportTemplate(template)">
                                    <i class="bi bi-download me-1"></i>Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (Templates.Count > 6)
        {
            <div class="text-center mt-4">
                <button class="btn btn-outline-secondary" @onclick="LoadMoreTemplates">
                    Load More Templates
                </button>
            </div>
        }
    }
</div>

<style>
    .template-card {
        transition: all 0.2s ease-in-out;
        border: 1px solid rgba(0,0,0,0.125);
    }

    .template-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .template-info {
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        padding: 0.75rem;
        margin-top: auto;
    }

    .empty-state .display-1 {
        font-size: 4rem;
    }

    .bg-primary-subtle {
        background-color: rgba(13, 110, 253, 0.1) !important;
    }

    .bg-success-subtle {
        background-color: rgba(25, 135, 84, 0.1) !important;
    }

    .text-primary {
        color: #0d6efd !important;
    }

    .text-success {
        color: #198754 !important;
    }
</style>

@code {
    [Parameter] public List<GoogleSheetTemplate> Templates { get; set; } = new();
    [Parameter] public EventCallback OnCreateNew { get; set; }
    [Parameter] public EventCallback<GoogleSheetTemplate> OnEditTemplate { get; set; }
    [Parameter] public EventCallback<GoogleSheetTemplate> OnDeleteTemplate { get; set; }
    [Parameter] public EventCallback<GoogleSheetTemplate> OnDuplicateTemplate { get; set; }

    private async Task ExportTemplate(GoogleSheetTemplate template)
    {
        // TODO: Implement template export functionality
        // This would generate the actual Google Sheet from the template
        Console.WriteLine($"Exporting template: {template.Name}");
    }

    private void LoadMoreTemplates()
    {
        // TODO: Implement pagination if needed
        Console.WriteLine("Loading more templates...");
    }
}