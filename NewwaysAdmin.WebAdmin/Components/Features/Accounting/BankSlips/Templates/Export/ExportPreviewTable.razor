@* Components/Features/Accounting/BankSlips/Templates/Export/ExportPreviewTable.razor *@
@using NewwaysAdmin.WebAdmin.Services.BankSlips.Templates
@using NewwaysAdmin.Shared.Tables
@inject ILogger<ExportPreviewTable> Logger
@inject DictionaryTableParser TableParser

<div class="export-preview-container">

    @* Field Selection Toggle Buttons *@
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="bi bi-toggles me-2"></i>
                Select Fields to Export
                @if (AnalysisResult != null)
                {
                    <small class="text-muted ms-2">(@SelectedFieldCount/@AnalysisResult.FieldStatistics.Count fields selected)</small>
                }
            </h6>
        </div>
        <div class="card-body">
            @if (AnalysisResult != null && AnalysisResult.FieldStatistics.Any())
            {
                <div class="row g-2">
                    @foreach (var field in AnalysisResult.GetFieldNamesByUsage())
                    {
                        var stats = AnalysisResult.FieldStatistics[field];
                        var isSelected = SelectedFields.Contains(field);
                        var buttonClass = isSelected ? "btn-primary" : GetFieldButtonClass(stats);

                        <div class="col-md-3 col-sm-4 col-6">
                            <button class="btn @buttonClass w-100 field-toggle-btn"
                                    @onclick="() => ToggleField(field)"
                                    title="@GetFieldTooltip(stats)">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-truncate">
                                        @if (isSelected)
                                        {
                                            <i class="bi bi-check-circle me-1"></i>
                                        }
                                        @field
                                    </span>
                                    <small class="@(isSelected ? "text-light" : "text-muted")">
                                        @stats.UsagePercentage.ToString("F0")%
                                    </small>
                                </div>
                            </button>
                        </div>
                    }
                </div>

                @* Quick Action Buttons *@
                <div class="mt-3">
                    <button class="btn btn-outline-success btn-sm me-2" @onclick="SelectRecommendedFields">
                        <i class="bi bi-stars me-1"></i>Recommended
                    </button>
                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="SelectAllFields">
                        <i class="bi bi-check-all me-1"></i>All Fields
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="ClearAllFields">
                        <i class="bi bi-x-circle me-1"></i>Clear
                    </button>
                </div>
            }
            else
            {
                <div class="text-center text-muted py-3">
                    <i class="bi bi-inbox me-2"></i>
                    Process some documents first.
                </div>
            }
        </div>
    </div>

    @* Custom Tick Box Columns *@
    @if (CustomTickBoxColumns.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-check2-square me-2"></i>
                    Custom Tick Box Columns
                    <small class="text-muted ms-2">(@CustomTickBoxColumns.Count columns)</small>
                </h6>
            </div>
            <div class="card-body">
                <div class="row g-2">
                    @foreach (var tickBox in CustomTickBoxColumns)
                    {
                        <div class="col-md-3 col-sm-4 col-6">
                            <div class="btn btn-success w-100" disabled>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-truncate">
                                        <i class="bi bi-check-square me-1"></i>
                                        @tickBox.Name
                                    </span>
                                    <small class="text-light">✓</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @* DEBUG INFO *@
    <div class="alert alert-info mb-3">
        <strong>🔍 DEBUG:</strong>
        SessionResults: @(SessionResults?.Count ?? 0),
        SelectedFields: @SelectedFields.Count,
        HasPreviewData: @HasPreviewData
        @if (DebugInfo != null)
        {
            <br />
            <small>@DebugInfo</small>
        }
    </div>

    @* Export Preview Table *@
    <div class="card">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="bi bi-table me-2"></i>
                Export Preview
                @if (HasPreviewData)
                {
                    <small class="text-muted ms-2">(showing sample data)</small>
                }
            </h6>
        </div>
        <div class="card-body">
            @if (HasPreviewData)
            {
                var tableData = GetTableData();

                @* Improved Inline Table *@
                <div class="export-preview-table-container">
                    <table class="table table-sm table-bordered export-preview-table">
                        <thead class="table-primary">
                            <tr>
                                @foreach (var columnName in tableData.Keys)
                                {
                                    <th class="@GetColumnCssClass(columnName)">@columnName</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int maxRows = tableData.Values.Any() ? tableData.Values.Max(list => list.Count) : 0;
                            }
                            @for (int rowIndex = 0; rowIndex < maxRows; rowIndex++)
                            {
                                <tr class="@GetRowCssClass(rowIndex, tableData)">
                                    @foreach (var column in tableData)
                                    {
                                        <td class="@GetColumnCssClass(column.Key)">
                                            @GetCellValue(column.Value, rowIndex)
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @* Preview Stats *@
                <div class="mt-3 text-muted small">
                    <i class="bi bi-info-circle me-1"></i>
                    Preview shows @GetSampleData().Count sample rows from @(SessionResults?.Count ?? 0) total documents.
                    @if (CustomTickBoxColumns.Any())
                    {
                        <span class="ms-2">Tick boxes will be interactive in the actual export.</span>
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-4">
                    @if (!SelectedFields.Any())
                    {
                        <i class="bi bi-arrow-up me-2"></i>
                        <span>Select fields above to see export preview</span>
                    }
                    else
                    {
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span>No sample data available for preview</span>
                    }
                </div>
            }
        </div>
    </div>

</div>

@code {
    [Parameter] public FieldAnalysisResult? AnalysisResult { get; set; }
    [Parameter] public List<Dictionary<string, string>>? SessionResults { get; set; }
    [Parameter] public List<TickBoxColumnConfig> CustomTickBoxColumns { get; set; } = new();
    [Parameter] public bool ShowFormulaRow { get; set; } = true;
    [Parameter] public int MaxPreviewRows { get; set; } = 5;
    [Parameter] public EventCallback<List<string>> OnSelectedFieldsChanged { get; set; }

    private HashSet<string> SelectedFields { get; set; } = new();
    private string? DebugInfo { get; set; }

    private int SelectedFieldCount => SelectedFields.Count;
    private bool HasPreviewData => SelectedFields.Any() && SessionResults?.Any() == true;

    protected override void OnParametersSet()
    {
        // Auto-select recommended fields on first load
        if (AnalysisResult != null && !SelectedFields.Any())
        {
            SelectRecommendedFields();
        }

        // Update debug info
        UpdateDebugInfo();
    }

    private void UpdateDebugInfo()
    {
        if (SessionResults?.Any() == true)
        {
            var firstDoc = SessionResults.First();
            DebugInfo = $"First doc has {firstDoc.Count} fields: {string.Join(", ", firstDoc.Keys.Take(3))}";
            if (firstDoc.Count > 3) DebugInfo += $" ... (+{firstDoc.Count - 3} more)";
        }
        else
        {
            DebugInfo = "No session results available";
        }

        if (SelectedFields.Any())
        {
            DebugInfo += $" | Selected: {string.Join(", ", SelectedFields.Take(3))}";
            if (SelectedFields.Count > 3) DebugInfo += $" ... (+{SelectedFields.Count - 3} more)";
        }
    }

    /// <summary>
    /// Transform data using the parser for the table component
    /// </summary>
    private Dictionary<string, List<string>> GetTableData()
    {
        Console.WriteLine("🔍 GetTableData() CALLED");
        Console.WriteLine($"   SessionResults: {SessionResults?.Count ?? 0} documents");
        Console.WriteLine($"   SelectedFields: {SelectedFields.Count} fields");

        if (SessionResults == null || !SelectedFields.Any())
        {
            Console.WriteLine("❌ Returning empty - no data or no fields selected");
            return new Dictionary<string, List<string>>();
        }

        var options = new TableParseOptions
            {
                IncludeFormulaRow = ShowFormulaRow,
                MaxRows = MaxPreviewRows,
                MaxValueLength = 50, // Allow longer text for preview
                CustomColumns = CustomTickBoxColumns.Select(tb => new TableCustomColumn
                {
                    Name = tb.Name,
                    Type = TableCustomColumnType.Checkbox,
                    SumFieldName = tb.SumFieldName
                }).ToList()
            };

        Console.WriteLine($"   Options: FormulaRow={options.IncludeFormulaRow}, MaxRows={options.MaxRows}");

        try
        {
            Console.WriteLine("🚀 Calling TableParser.ParseToColumns...");
            var result = TableParser.ParseToColumns(SessionResults, SelectedFields.ToList(), options);

            Console.WriteLine($"✅ Parser returned: {result.Count} columns");
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Parser error: {ex.Message}");
            return new Dictionary<string, List<string>>();
        }
    }

    /// <summary>
    /// Get CSS class for column based on field type
    /// </summary>
    private string GetColumnCssClass(string columnName)
    {
        // Check if it's a custom checkbox column
        if (CustomTickBoxColumns.Any(cb => cb.Name == columnName))
        {
            return "col-checkbox";
        }

        // Determine column type by field name patterns
        if (IsDateField(columnName))
        {
            return "col-date";
        }

        if (IsAmountField(columnName))
        {
            return "col-amount";
        }

        // Default to text column
        return "col-text";
    }

    /// <summary>
    /// Get CSS class for row based on content
    /// </summary>
    private string GetRowCssClass(int rowIndex, Dictionary<string, List<string>> tableData)
    {
        // Check if this is a formula row (first row contains formulas)
        if (ShowFormulaRow && rowIndex == 0 && tableData.Values.Any())
        {
            var firstColumn = tableData.Values.First();
            if (rowIndex < firstColumn.Count && firstColumn[rowIndex].StartsWith("="))
            {
                return "formula-row";
            }
        }

        return "";
    }

    /// <summary>
    /// Get cell value with proper formatting
    /// </summary>
    private string GetCellValue(List<string> columnData, int index)
    {
        if (index < columnData.Count)
        {
            var value = columnData[index];
            return string.IsNullOrEmpty(value) ? "—" : value;
        }
        return "—"; // Em dash for missing values
    }

    /// <summary>
    /// Check if field is a date field
    /// </summary>
    private bool IsDateField(string fieldName)
    {
        var dateKeywords = new[] { "Date", "Time", "Created", "Updated", "Processed" };
        return dateKeywords.Any(keyword =>
            fieldName.Contains(keyword, StringComparison.OrdinalIgnoreCase));
    }

    /// <summary>
    /// Check if field is an amount/numeric field
    /// </summary>
    private bool IsAmountField(string fieldName)
    {
        var amountKeywords = new[] { "Amount", "Total", "Sum", "Fee", "Cost", "Balance", "Price" };
        return amountKeywords.Any(keyword =>
            fieldName.Contains(keyword, StringComparison.OrdinalIgnoreCase));
    }

    // Field selection methods
    private async Task ToggleField(string fieldName)
    {
        if (SelectedFields.Contains(fieldName))
        {
            SelectedFields.Remove(fieldName);
        }
        else
        {
            SelectedFields.Add(fieldName);
        }

        await OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
        UpdateDebugInfo();
    }

    private async Task SelectRecommendedFields()
    {
        if (AnalysisResult == null) return;

        SelectedFields.Clear();

        // Select fields with >= 70% usage rate
        var recommendedFields = AnalysisResult.FieldStatistics.Values
            .Where(stats => stats.UsagePercentage >= 70)
            .Select(stats => stats.FieldName)
            .ToList();

        foreach (var field in recommendedFields)
        {
            SelectedFields.Add(field);
        }

        await OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
        UpdateDebugInfo();
    }

    private async Task SelectAllFields()
    {
        if (AnalysisResult == null) return;

        SelectedFields.Clear();
        foreach (var field in AnalysisResult.FieldStatistics.Keys)
        {
            SelectedFields.Add(field);
        }

        await OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
        UpdateDebugInfo();
    }

    private async Task ClearAllFields()
    {
        SelectedFields.Clear();
        await OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
        UpdateDebugInfo();
    }

    private string GetFieldButtonClass(FieldUsageStatistics stats)
    {
        return stats.UsagePercentage switch
        {
            >= 90 => "btn-outline-success",     // Green outline for excellent availability
            >= 70 => "btn-outline-primary",     // Blue outline for good availability
            >= 50 => "btn-outline-warning",     // Yellow outline for moderate availability
            _ => "btn-outline-secondary"         // Gray outline for poor availability
        };
    }

    private string GetFieldTooltip(FieldUsageStatistics stats)
    {
        return $"{stats.FieldName}: Found in {stats.FoundInDocuments}/{stats.TotalDocuments} documents ({stats.UsagePercentage:F1}%), " +
               $"{stats.DataQualityPercentage:F1}% have data";
    }

    private List<Dictionary<string, string>> GetSampleData()
    {
        if (SessionResults == null || !SessionResults.Any())
            return new List<Dictionary<string, string>>();

        // Filter out error documents and take first few for preview
        return SessionResults
            .Where(doc => !doc.ContainsKey("Error"))
            .Take(MaxPreviewRows)
            .ToList();
    }

    // Temporary class for tick box columns - will be replaced with actual model later
    public class TickBoxColumnConfig
    {
        public string Name { get; set; } = string.Empty;
        public string SumFieldName { get; set; } = string.Empty;
    }
}

<style>
    /* Export Preview Table Styles */
    .export-preview-table-container {
        width: 100%;
        overflow-x: auto;
    }

    .export-preview-table {
        width: 100%;
        table-layout: fixed; /* This is key for controlling column widths */
        margin-bottom: 0;
    }

        /* Column width management */
        .export-preview-table .col-date {
            width: 90px;
            min-width: 90px;
        }

        .export-preview-table .col-amount {
            width: 100px;
            min-width: 100px;
            text-align: right;
        }

        .export-preview-table .col-checkbox {
            width: 60px;
            min-width: 60px;
            text-align: center;
            padding: 0.375rem 0.25rem;
        }

        .export-preview-table .col-text {
            /* Text columns take up remaining space and adapt */
            width: auto;
            min-width: 120px;
            word-wrap: break-word;
            white-space: normal;
            vertical-align: top;
            max-width: 200px; /* Prevent extremely wide columns */
        }

        /* Header styling */
        .export-preview-table thead th {
            background-color: var(--bs-primary) !important;
            color: white;
            font-weight: 600;
            padding: 0.5rem 0.375rem;
            vertical-align: middle;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        /* Cell styling */
        .export-preview-table td {
            padding: 0.375rem 0.375rem;
            vertical-align: top;
            border: 1px solid #dee2e6;
            line-height: 1.4;
        }

        /* Formula row styling */
        .export-preview-table .formula-row {
            background-color: #fff3cd;
            font-style: italic;
        }

            .export-preview-table .formula-row td {
                background-color: #fff3cd !important;
                font-weight: 500;
                text-align: center;
            }

        /* Text column specific styling */
        .export-preview-table .col-text {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }

        /* Checkbox column specific styling */
        .export-preview-table .col-checkbox input[type="checkbox"] {
            margin: 0;
            transform: scale(1.1);
        }

    /* Field toggle button styles */
    .field-toggle-btn {
        transition: all 0.2s ease-in-out;
        font-size: 0.875rem;
    }

        .field-toggle-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

    .export-preview-container .card {
        border: 1px solid #dee2e6;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    /* Hover effects */
    .export-preview-table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .export-preview-table .formula-row:hover td {
        background-color: #f0e68c !important;
    }
</style>