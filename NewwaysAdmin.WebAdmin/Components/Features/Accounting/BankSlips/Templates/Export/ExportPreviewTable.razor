@* Components/Features/Accounting/BankSlips/Templates/Export/ExportPreviewTable.razor *@
@using NewwaysAdmin.WebAdmin.Services.BankSlips.Templates
@using NewwaysAdmin.Shared.Tables
@using NewwaysAdmin.WebAdmin.Services.BankSlips
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.GoogleSheets.Models
@inject ILogger<ExportPreviewTable> Logger
@inject DictionaryTableParser TableParser
@inject CustomColumnStorageService CustomColumnStorage
@inject GoogleSheetsService GoogleSheetsService
@inject IJSRuntime JSRuntime

<div class="export-preview-container">

    @* Field Selection Toggle Buttons *@
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="bi bi-toggles me-2"></i>
                Select Fields to Export
                @if (AnalysisResult != null)
                {
                    <small class="text-muted ms-2">(@SelectedFieldCount/@AnalysisResult.FieldStatistics.Count fields selected)</small>
                }
            </h6>
        </div>
        <div class="card-body">
            @if (AnalysisResult != null && AnalysisResult.FieldStatistics.Any())
            {
                <div class="row g-2">
                    @foreach (var field in AnalysisResult.GetFieldNamesByUsage())
                    {
                        var stats = AnalysisResult.FieldStatistics[field];
                        var isSelected = SelectedFields.Contains(field);
                        var buttonClass = isSelected ? "btn-primary" : GetFieldButtonClass(stats);

                        <div class="col-md-3 col-sm-4 col-6">
                            <button class="btn @buttonClass w-100 field-toggle-btn"
                                    @onclick="() => ToggleField(field)"
                                    title="@GetFieldTooltip(stats)">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-truncate">
                                        @if (isSelected)
                                        {
                                            <i class="bi bi-check-circle me-1"></i>
                                        }
                                        @field
                                    </span>
                                    <small class="@(isSelected ? "text-light" : "text-muted")">
                                        @stats.UsagePercentage.ToString("F0")%
                                    </small>
                                </div>
                            </button>
                        </div>
                    }
                </div>

                <div class="mt-3 d-flex justify-content-between align-items-center">
                    <div>
                        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="SelectAllFields">
                            <i class="bi bi-check-all me-1"></i>Select All
                        </button>
                        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="SelectNoneFields">
                            <i class="bi bi-x-square me-1"></i>Clear All
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="SelectHighQualityFields">
                            <i class="bi bi-star me-1"></i>High Quality Only
                        </button>
                    </div>
                    <div class="text-muted">
                        <small>@SelectedFields.Count of @AnalysisResult.FieldStatistics.Count fields selected</small>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center text-muted py-3">
                    <i class="bi bi-info-circle me-2"></i>
                    No fields available for selection
                </div>
            }
        </div>
    </div>

    @* Custom Tick Box Columns Management *@
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="bi bi-check2-square me-2"></i>
                Custom Checkbox Columns
                @if (CustomTickBoxColumns.Any())
                {
                    <small class="text-muted ms-2">(@CustomTickBoxColumns.Count custom columns)</small>
                }
            </h6>
        </div>
        <div class="card-body">
            <CustomColumnManager TemplateColumns="CustomTickBoxColumns"
                                 SavedColumns="@(new List<TickBoxColumnConfig>())"
                                 AvailableFields="SelectedFields.ToList()"
                                 OnTemplateColumnsChanged="OnCustomColumnsChanged" />
        </div>
    </div>

    @* Column Ordering - SIMPLIFIED FOR NOW *@
    @if (SelectedFields.Any() || CustomTickBoxColumns.Any())
    {
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-list-ol me-2"></i>
                    Column Order
                    <small class="text-muted">(@GetAllAvailableColumns().Count columns)</small>
                </h6>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <strong>Current Order:</strong> @string.Join(" → ", GetAllAvailableColumns())
                </div>
                <div class="text-muted small">
                    <i class="bi bi-info-circle me-1"></i>
                    Column ordering temporarily simplified. Fields will appear in the order shown above.
                </div>
                @* TODO: Re-enable CustomColumnArranger once issues are resolved
            <CustomColumnArranger
            ColumnOrder="ColumnOrder"
            CustomCheckboxColumns="@(CustomTickBoxColumns.Select(c => c.Name).ToList())"
            OnColumnOrderChanged="OnColumnOrderChanged" />
            *@
            </div>
        </div>
    }

    @* Debug Info *@
    <div class="small text-muted mb-3">
        SessionResults: @(SessionResults?.Count ?? 0),
        SelectedFields: @SelectedFields.Count,
        HasPreviewData: @HasPreviewData
        @if (DebugInfo != null)
        {
            <br />
            <small>@DebugInfo</small>
        }
    </div>

    @* Export Preview Table *@
    <div class="card">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="bi bi-table me-2"></i>
                Export Preview
                @if (HasPreviewData)
                {
                    <small class="text-muted ms-2">(showing sample data)</small>
                }
            </h6>
        </div>
        <div class="card-body">
            @if (HasPreviewData)
            {
                var tableData = GetTableData();

                @* Improved Inline Table *@
                <div class="export-preview-table-container">
                    <table class="table table-sm table-bordered export-preview-table">
                        <thead class="table-primary">
                            <tr>
                                @foreach (var columnName in tableData.Keys)
                                {
                                    <th class="@GetColumnCssClass(columnName)">@columnName</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int maxRows = tableData.Values.Any() ? tableData.Values.Max(list => list.Count) : 0;
                            }
                            @for (int rowIndex = 0; rowIndex < maxRows; rowIndex++)
                            {
                                <tr class="@GetRowCssClass(rowIndex, tableData)">
                                    @foreach (var column in tableData)
                                    {
                                        <td class="@GetColumnCssClass(column.Key)">
                                            @GetCellValue(column.Value, rowIndex)
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @* Preview Stats *@
                <div class="mt-3 text-muted small">
                    <i class="bi bi-info-circle me-1"></i>
                    Preview shows @GetSampleData().Count sample rows from @(SessionResults?.Count ?? 0) total documents.
                    @if (CustomTickBoxColumns.Any())
                    {
                        <span class="ms-2">Tick boxes will be interactive in the actual export.</span>
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-4">
                    @if (!SelectedFields.Any())
                    {
                        <i class="bi bi-arrow-up me-2"></i>
                        <span>Select fields above to see export preview</span>
                    }
                    else
                    {
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <span>No sample data available for preview</span>
                    }
                </div>
            }
        </div>

        @* NEW: Google Sheets Export Section *@
        @if (HasPreviewData && SelectedFields.Any())
        {
            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="mb-1">
                            <i class="bi bi-google me-2"></i>Export to Google Sheets
                        </h6>
                        <small class="text-muted">
                            Export all @(SessionResults?.Count ?? 0) documents with @SelectedFields.Count selected fields
                            @if (CustomTickBoxColumns.Any())
                            {
                                <span> + @CustomTickBoxColumns.Count custom columns</span>
                            }
                        </small>
                    </div>
                    <div>
                        @if (_isExporting)
                        {
                            <button class="btn btn-success" disabled>
                                <div class="spinner-border spinner-border-sm me-2"></div>
                                Exporting...
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="HandleGoogleSheetsExport">
                                <i class="bi bi-file-earmark-spreadsheet me-2"></i>
                                Export to Google Sheets
                            </button>
                        }
                    </div>
                </div>

                @* Export Status *@
                @if (!string.IsNullOrEmpty(_exportMessage))
                {
                    <div class="mt-2">
                        <div class="alert @(_exportSuccess ? "alert-success" : "alert-danger") alert-sm mb-0">
                            @if (_exportSuccess)
                            {
                                <i class="bi bi-check-circle me-2"></i>
                                @_exportMessage
                                @if (!string.IsNullOrEmpty(_exportUrl))
                                {
                                    <div class="mt-2">
                                        <a href="@_exportUrl" target="_blank" class="btn btn-sm btn-outline-success">
                                            <i class="bi bi-box-arrow-up-right me-1"></i>Open Spreadsheet
                                        </a>
                                    </div>
                                }
                            }
                            else
                            {
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                @_exportMessage
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>

</div>

@code {
    [Parameter] public FieldAnalysisResult? AnalysisResult { get; set; }
    [Parameter] public List<Dictionary<string, string>>? SessionResults { get; set; }
    [Parameter] public List<TickBoxColumnConfig> CustomTickBoxColumns { get; set; } = new();
    [Parameter] public bool ShowFormulaRow { get; set; } = true;
    [Parameter] public int MaxPreviewRows { get; set; } = 5;
    [Parameter] public EventCallback<List<string>> OnSelectedFieldsChanged { get; set; }
    [Parameter] public string CollectionName { get; set; } = "BankSlips"; // NEW: For sheet naming

    private HashSet<string> SelectedFields { get; set; } = new();
    private string? DebugInfo { get; set; }
    private List<string> ColumnOrder { get; set; } = new();

    // NEW: Export state management
    private bool _isExporting = false;
    private string _exportMessage = string.Empty;
    private bool _exportSuccess = false;
    private string _exportUrl = string.Empty;

    private int SelectedFieldCount => SelectedFields.Count;
    private bool HasPreviewData => GetSampleData().Any();

    protected override void OnParametersSet()
    {
        // Auto-select high-quality fields if none are selected
        if (AnalysisResult != null && !SelectedFields.Any())
        {
            var highQualityFields = AnalysisResult.GetFieldNamesByUsage()
                .Where(f => AnalysisResult.FieldStatistics[f].UsagePercentage >= 80)
                .Take(6) // Limit to avoid overwhelming
                .ToList();

            SelectedFields = highQualityFields.ToHashSet();
            Console.WriteLine($"🎯 Auto-selected {SelectedFields.Count} high-quality fields: {string.Join(", ", SelectedFields)}");
        }

        // Initialize column order if not set
        if (!ColumnOrder.Any() && (SelectedFields.Any() || CustomTickBoxColumns.Any()))
        {
            var initialOrder = new List<string>();

            // Add selected fields first (in usage order if AnalysisResult available)
            if (AnalysisResult != null)
            {
                initialOrder.AddRange(AnalysisResult.GetFieldNamesByUsage()
                    .Where(f => SelectedFields.Contains(f)));
            }
            else
            {
                initialOrder.AddRange(SelectedFields.OrderBy(f => f));
            }

            // Add custom columns at the end
            initialOrder.AddRange(CustomTickBoxColumns.Select(c => c.Name));

            ColumnOrder = initialOrder;
            Console.WriteLine($"🏗️ Initialized column order: {string.Join(", ", ColumnOrder)}");
        }
    }

    // NEW: Main export method - this is where the magic happens!
    private async Task HandleGoogleSheetsExport()
    {
        try
        {
            _isExporting = true;
            _exportMessage = string.Empty;
            _exportSuccess = false;
            _exportUrl = string.Empty;
            StateHasChanged();

            Console.WriteLine("🚀 Starting Google Sheets export...");
            Console.WriteLine($"   Collection: {CollectionName}");
            Console.WriteLine($"   Total documents: {SessionResults?.Count ?? 0}");
            Console.WriteLine($"   Selected fields: {SelectedFields.Count}");
            Console.WriteLine($"   Custom columns: {CustomTickBoxColumns.Count}");

            if (SessionResults == null || !SessionResults.Any())
            {
                throw new InvalidOperationException("No data to export");
            }

            if (!SelectedFields.Any())
            {
                throw new InvalidOperationException("No fields selected for export");
            }

            // Step 1: Get the full export data (no row limits!)
            Console.WriteLine("📊 Getting full export data...");
            var fullExportData = GetFullExportData();
            Console.WriteLine($"   Export data columns: {fullExportData.Keys.Count}");
            Console.WriteLine($"   Export data rows: {(fullExportData.Values.Any() ? fullExportData.Values.First().Count : 0)}");

            // Step 2: Convert to Google Sheets format
            Console.WriteLine("🔄 Converting to Google Sheets format...");
            var sheetData = ConvertToSheetData(fullExportData);
            Console.WriteLine($"   SheetData rows: {sheetData.Rows.Count}");
            Console.WriteLine($"   SheetData columns: {(sheetData.Rows.Any() ? sheetData.Rows.First().Cells.Count : 0)}");

            // Step 3: Generate sheet name with timestamp
            var sheetName = GenerateSheetName();
            Console.WriteLine($"   Sheet name: {sheetName}");

            // Step 4: Export to Google Sheets using OAuth2
            Console.WriteLine("☁️ Calling Google Sheets service...");
            var (success, spreadsheetId, url, error) = await GoogleSheetsService.CreateWithOAuth2OnlyAsync(
                title: sheetName,
                sheetData: sheetData,
                finalOwnerEmail: "superfox75@gmail.com", // Keep ownership with OAuth account
                worksheetName: null // Use default worksheet (Sheet1)
            );

            if (success && !string.IsNullOrEmpty(url))
            {
                _exportSuccess = true;
                _exportMessage = $"Successfully exported {sheetData.Rows.Count} rows to Google Sheets!";
                _exportUrl = url;

                Console.WriteLine("✅ Export successful!");
                Console.WriteLine($"   Spreadsheet ID: {spreadsheetId}");
                Console.WriteLine($"   URL: {url}");

                // Optional: Auto-open in new tab
                await JSRuntime.InvokeVoidAsync("open", url, "_blank");
            }
            else
            {
                throw new InvalidOperationException(error ?? "Unknown error occurred during export");
            }
        }
        catch (Exception ex)
        {
            _exportSuccess = false;

            // Provide specific guidance for OAuth2 credential errors
            if (ex.Message.Contains("Unrecognized credential type") || ex.Message.Contains("Error creating credential"))
            {
                _exportMessage = "OAuth2 credentials error: The file 'C:\\Keys\\oauth2-credentials.json' appears to be a service account JSON (not OAuth2 client credentials). " +
                               "Please ensure you're using OAuth2 Desktop Application credentials, not Service Account credentials.";
            }
            else if (ex.Message.Contains("Personal account OAuth credentials not found"))
            {
                _exportMessage = "OAuth2 credentials file not found. Please ensure 'C:\\Keys\\oauth2-credentials.json' exists and contains OAuth2 Desktop Application credentials.";
            }
            else
            {
                _exportMessage = $"Export failed: {ex.Message}";
            }

            Console.WriteLine($"❌ Export failed: {ex.Message}");
            Console.WriteLine($"   Stack trace: {ex.StackTrace}");
            Logger.LogError(ex, "Google Sheets export failed");
        }
        finally
        {
            _isExporting = false;
            StateHasChanged();
        }
    }

    // NEW: Get full export data (reuse existing logic but without row limits)
    private Dictionary<string, List<string>> GetFullExportData()
    {
        if (SessionResults == null || !SelectedFields.Any())
        {
            return new Dictionary<string, List<string>>();
        }

        var options = new TableParseOptions
            {
                IncludeFormulaRow = ShowFormulaRow,
                MaxRows = null, // ← KEY CHANGE: No row limit for full export!
                MaxValueLength = null, // Don't truncate values for export
                CustomColumns = ConvertCustomColumns(CustomTickBoxColumns)
            };

        Console.WriteLine($"🔧 Export options: FormulaRow={options.IncludeFormulaRow}, MaxRows=unlimited");

        var rawResult = TableParser.ParseToColumns(SessionResults, SelectedFields.ToList(), options);

        // Apply column ordering if specified
        if (ColumnOrder.Any())
        {
            var orderedResult = new Dictionary<string, List<string>>();

            // Add regular fields in specified order
            foreach (var columnName in ColumnOrder.Where(col => !CustomTickBoxColumns.Any(c => c.Name == col)))
            {
                if (rawResult.ContainsKey(columnName))
                {
                    orderedResult[columnName] = rawResult[columnName];
                }
            }

            // Add custom columns in specified order
            foreach (var columnName in ColumnOrder.Where(col => CustomTickBoxColumns.Any(c => c.Name == col)))
            {
                if (rawResult.ContainsKey(columnName))
                {
                    orderedResult[columnName] = rawResult[columnName];
                }
            }

            // Add any remaining columns that weren't in the order list
            foreach (var kvp in rawResult.Where(x => !orderedResult.ContainsKey(x.Key)))
            {
                orderedResult[kvp.Key] = kvp.Value;
            }

            return orderedResult;
        }

        return rawResult;
    }

    // NEW: Convert column-based data to row-based data for Google Sheets
    private SheetData ConvertToSheetData(Dictionary<string, List<string>> tableData)
    {
        var sheetData = new SheetData
            {
                Title = GenerateSheetName()
            };

        if (!tableData.Any())
        {
            return sheetData;
        }

        // Get all column names in order
        var columnNames = tableData.Keys.ToList();
        var maxRows = tableData.Values.Max(list => list.Count);

        Console.WriteLine($"🔄 Converting {columnNames.Count} columns × {maxRows} rows");

        // Create rows
        for (int rowIndex = 0; rowIndex < maxRows; rowIndex++)
        {
            var sheetRow = new SheetRow();

            for (int colIndex = 0; colIndex < columnNames.Count; colIndex++)
            {
                var columnName = columnNames[colIndex];
                var columnData = tableData[columnName];
                var cellValue = rowIndex < columnData.Count ? columnData[rowIndex] : string.Empty;

                var cell = new SheetCell();

                // Process formula row (typically first row if ShowFormulaRow is true)
                if (ShowFormulaRow && rowIndex == 0 && !string.IsNullOrEmpty(cellValue))
                {
                    if (cellValue.StartsWith("=SUM("))
                    {
                        // Convert =SUM(...) to actual column range
                        var columnLetter = GetColumnLetter(colIndex);
                        cell.Value = $"=SUM({columnLetter}2:{columnLetter})"; // Sum from row 2 to end
                        Console.WriteLine($"📊 Formula: {columnName} -> {cell.Value}");
                    }
                    else if (cellValue.StartsWith("=SUMIF(") || cellValue.Contains("SUMIF"))
                    {
                        // Handle custom checkbox column formulas
                        var customColumn = CustomTickBoxColumns.FirstOrDefault(c => FormatCustomColumnHeader(c) == columnName);
                        if (customColumn != null && !string.IsNullOrEmpty(customColumn.SumFieldName))
                        {
                            // Find the column index for the reference field
                            var refColumnIndex = columnNames.IndexOf(customColumn.SumFieldName);
                            if (refColumnIndex >= 0)
                            {
                                var checkboxColumnLetter = GetColumnLetter(colIndex);
                                var refColumnLetter = GetColumnLetter(refColumnIndex);
                                cell.Value = $"=SUMIF({checkboxColumnLetter}2:{checkboxColumnLetter}, TRUE, {refColumnLetter}2:{refColumnLetter})";
                                Console.WriteLine($"📊 SUMIF Formula: {columnName} -> {cell.Value} (checkbox col: {checkboxColumnLetter}, ref col: {refColumnLetter})");
                            }
                            else
                            {
                                Console.WriteLine($"⚠️ Reference column '{customColumn.SumFieldName}' not found for custom column '{columnName}'");
                                cell.Value = "=0"; // Fallback if reference column not found
                            }
                        }
                        else
                        {
                            Console.WriteLine($"⚠️ Custom column definition not found for '{columnName}'");
                            cell.Value = "=0"; // Fallback if custom column not found
                        }
                    }
                    else
                    {
                        cell.Value = cellValue; // Keep other formulas as-is
                    }
                }
                else
                {
                    // Handle data rows
                    if (IsCheckboxColumn(columnName))
                    {
                        // Convert ALL checkbox symbols to boolean values for Google Sheets
                        if (cellValue == "☐" || string.IsNullOrEmpty(cellValue) || cellValue.Trim() == "")
                        {
                            cell.Value = false; // Default unchecked
                        }
                        else if (cellValue == "☑" || cellValue == "✓" || cellValue.ToUpper() == "TRUE")
                        {
                            cell.Value = true; // Checked
                        }
                        else
                        {
                            cell.Value = false; // Default for any other value
                        }
                        cell.IsCheckbox = true;
                        Console.WriteLine($"📋 Checkbox cell: '{cellValue}' -> {cell.Value} (IsCheckbox: true)");
                    }
                    else
                    {
                        cell.Value = cellValue ?? string.Empty;
                    }
                }

                sheetRow.Cells.Add(cell);
            }

            sheetData.Rows.Add(sheetRow);
        }

        Console.WriteLine($"✅ Converted to {sheetData.Rows.Count} rows with proper formulas and checkboxes");
        return sheetData;
    }

    // Helper method to get Excel-style column letters (A, B, C, ..., AA, AB, etc.)
    private string GetColumnLetter(int columnIndex)
    {
        string columnLetter = "";
        while (columnIndex >= 0)
        {
            columnLetter = (char)('A' + columnIndex % 26) + columnLetter;
            columnIndex = columnIndex / 26 - 1;
        }
        return columnLetter;
    }

    // NEW: Generate unique sheet name
    private string GenerateSheetName()
    {
        var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm");
        return $"{CollectionName}_{timestamp}";
    }

    // NEW: Check if column is a checkbox column
    private bool IsCheckboxColumn(string columnName)
    {
        // Check both the raw name and formatted name
        var isCustomColumn = CustomTickBoxColumns.Any(c =>
            c.Name == columnName ||
            FormatCustomColumnHeader(c) == columnName ||
            columnName.Contains(c.Name));

        Console.WriteLine($"🔍 IsCheckboxColumn('{columnName}'): {isCustomColumn}");
        return isCustomColumn;
    }

    // NEW: Convert TickBoxColumnConfig to TableCustomColumn for the parser
    private List<TableCustomColumn> ConvertCustomColumns(List<TickBoxColumnConfig> tickBoxColumns)
    {
        return tickBoxColumns.Select(tbc => new TableCustomColumn
            {
                Name = tbc.Name,
                Type = TableCustomColumnType.Checkbox,
                SumFieldName = tbc.SumFieldName
            }).ToList();
    }

    // Existing methods...
    private Dictionary<string, List<string>> GetTableData()
    {
        Console.WriteLine($"🔍 GetTableData called:");
        Console.WriteLine($"   SessionResults: {SessionResults?.Count ?? 0} documents");
        Console.WriteLine($"   SelectedFields: {SelectedFields.Count} fields");
        Console.WriteLine($"   CustomColumns: {CustomTickBoxColumns.Count} custom columns");

        if (SessionResults == null || !SelectedFields.Any())
        {
            Console.WriteLine("❌ Returning empty - no data or no fields selected");
            return new Dictionary<string, List<string>>();
        }

        var options = new TableParseOptions
            {
                IncludeFormulaRow = ShowFormulaRow,
                MaxRows = MaxPreviewRows, // ← This stays limited for preview
                MaxValueLength = 50,
                CustomColumns = ConvertCustomColumns(CustomTickBoxColumns)
            };

        Console.WriteLine($"   Options: FormulaRow={options.IncludeFormulaRow}, MaxRows={options.MaxRows}");

        try
        {
            Console.WriteLine("🚀 Calling TableParser.ParseToColumns...");
            var rawResult = TableParser.ParseToColumns(SessionResults, SelectedFields.ToList(), options);

            // Apply column ordering if specified
            if (ColumnOrder.Any())
            {
                var orderedResult = new Dictionary<string, List<string>>();

                // Add regular fields in specified order
                foreach (var columnName in ColumnOrder.Where(col => !CustomTickBoxColumns.Any(c => c.Name == col)))
                {
                    if (rawResult.ContainsKey(columnName))
                    {
                        orderedResult[columnName] = rawResult[columnName];
                    }
                }

                // Add custom columns in specified order (they should be at the end of ColumnOrder)
                foreach (var columnName in ColumnOrder.Where(col => CustomTickBoxColumns.Any(c => c.Name == col)))
                {
                    if (rawResult.ContainsKey(columnName))
                    {
                        orderedResult[columnName] = rawResult[columnName];
                    }
                }

                // Add any remaining columns that weren't in the order list
                foreach (var kvp in rawResult.Where(x => !orderedResult.ContainsKey(x.Key)))
                {
                    orderedResult[kvp.Key] = kvp.Value;
                }

                Console.WriteLine($"✅ Applied column ordering. Result: {orderedResult.Keys.Count} columns");
                return orderedResult;
            }

            Console.WriteLine($"✅ ParseToColumns succeeded. Result: {rawResult.Keys.Count} columns");
            return rawResult;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ ParseToColumns failed: {ex.Message}");
            Logger.LogError(ex, "Error parsing table data");
            DebugInfo = $"Error: {ex.Message}";
            return new Dictionary<string, List<string>>();
        }
    }

    private async Task OnCustomColumnsChanged(List<TickBoxColumnConfig> newColumns)
    {
        CustomTickBoxColumns = newColumns;
        Console.WriteLine($"📋 Custom columns updated: {CustomTickBoxColumns.Count} columns");
        StateHasChanged();
    }

    private async Task OnColumnOrderChanged(List<string> newOrder)
    {
        ColumnOrder = newOrder;
        Console.WriteLine($"🔄 Column order changed: {string.Join(", ", ColumnOrder)}");
        StateHasChanged();
    }

    private List<string> GetAllAvailableColumns()
    {
        var allColumns = new List<string>();
        allColumns.AddRange(SelectedFields);
        allColumns.AddRange(CustomTickBoxColumns.Select(c => c.Name));
        return allColumns;
    }

    private void ToggleField(string fieldName)
    {
        if (SelectedFields.Contains(fieldName))
        {
            SelectedFields.Remove(fieldName);
            // Also remove from column order
            ColumnOrder.Remove(fieldName);
        }
        else
        {
            SelectedFields.Add(fieldName);
            // Add to column order at appropriate position (before custom columns)
            var firstCustomIndex = ColumnOrder.FindIndex(col => CustomTickBoxColumns.Any(c => c.Name == col));
            if (firstCustomIndex >= 0)
            {
                ColumnOrder.Insert(firstCustomIndex, fieldName);
            }
            else
            {
                ColumnOrder.Add(fieldName);
            }
        }

        Console.WriteLine($"🔄 Toggled field '{fieldName}'. Now selected: {SelectedFields.Count} fields");
        Console.WriteLine($"🔄 Column order: {string.Join(", ", ColumnOrder)}");
        OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
        StateHasChanged();
    }

    private void SelectAllFields()
    {
        if (AnalysisResult != null)
        {
            SelectedFields = AnalysisResult.GetFieldNamesByUsage().ToHashSet();

            // Update column order to include all fields (in usage order)
            var newOrder = new List<string>();
            newOrder.AddRange(AnalysisResult.GetFieldNamesByUsage());
            newOrder.AddRange(CustomTickBoxColumns.Select(c => c.Name));
            ColumnOrder = newOrder;

            OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
            StateHasChanged();
        }
    }

    private void SelectNoneFields()
    {
        SelectedFields.Clear();

        // Remove all regular fields from column order, keep only custom columns
        ColumnOrder = ColumnOrder.Where(col => CustomTickBoxColumns.Any(c => c.Name == col)).ToList();

        OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
        StateHasChanged();
    }

    private void SelectHighQualityFields()
    {
        if (AnalysisResult != null)
        {
            var highQualityFields = AnalysisResult.GetFieldNamesByUsage()
                .Where(f => AnalysisResult.FieldStatistics[f].UsagePercentage >= 70);

            SelectedFields = highQualityFields.ToHashSet();

            // Update column order to include only high-quality fields (in usage order)
            var newOrder = new List<string>();
            newOrder.AddRange(highQualityFields);
            newOrder.AddRange(CustomTickBoxColumns.Select(c => c.Name));
            ColumnOrder = newOrder;

            OnSelectedFieldsChanged.InvokeAsync(SelectedFields.ToList());
            StateHasChanged();
        }
    }

    private string FormatCustomColumnHeader(TickBoxColumnConfig config)
    {
        return $"✓ {config.Name}";
    }

    private string GetFieldButtonClass(FieldUsageStatistics stats)
    {
        return stats.UsagePercentage switch
        {
            >= 90 => "btn-outline-success",       // Green outline for excellent availability
            >= 70 => "btn-outline-primary",       // Blue outline for good availability
            >= 50 => "btn-outline-warning",       // Yellow outline for moderate availability
            _ => "btn-outline-secondary"         // Gray outline for poor availability
        };
    }

    private string GetFieldTooltip(FieldUsageStatistics stats)
    {
        return $"{stats.FieldName}: Found in {stats.FoundInDocuments}/{stats.TotalDocuments} documents ({stats.UsagePercentage:F1}%), " +
               $"{stats.DataQualityPercentage:F1}% have data";
    }

    private List<Dictionary<string, string>> GetSampleData()
    {
        if (SessionResults == null || !SessionResults.Any())
            return new List<Dictionary<string, string>>();

        // Filter out error documents and take first few for preview
        return SessionResults
            .Where(doc => !doc.ContainsKey("Error"))
            .Take(MaxPreviewRows)
            .ToList();
    }

    private string GetColumnCssClass(string columnName)
    {
        // Add CSS classes based on column type
        if (IsCheckboxColumn(columnName))
            return "col-checkbox";

        if (columnName.ToLower().Contains("date"))
            return "col-date";

        if (columnName.ToLower().Contains("amount") || columnName.ToLower().Contains("total"))
            return "col-amount";

        return "col-text";
    }

    private string GetRowCssClass(int rowIndex, Dictionary<string, List<string>> tableData)
    {
        if (tableData.Any() && tableData.First().Value.Count > rowIndex)
        {
            var firstColumnValue = tableData.First().Value[rowIndex];
            if (firstColumnValue.StartsWith("SUM(") || firstColumnValue.StartsWith("="))
                return "table-warning"; // Highlight formula rows
        }
        return "";
    }

    private string GetCellValue(List<string> columnData, int rowIndex)
    {
        if (rowIndex >= 0 && rowIndex < columnData.Count)
        {
            return columnData[rowIndex] ?? string.Empty;
        }
        return string.Empty;
    }

    // Helper methods for field type detection
    private bool IsDateField(string fieldName)
    {
        var dateKeywords = new[] { "Date", "Time", "Timestamp", "DateTime", "Created", "Updated" };
        return dateKeywords.Any(keyword => fieldName.Contains(keyword, StringComparison.OrdinalIgnoreCase));
    }

    private bool IsAmountField(string fieldName)
    {
        var amountKeywords = new[] { "Amount", "Total", "Fee", "Cost", "Balance", "Price", "Sum", "Value" };
        return amountKeywords.Any(keyword => fieldName.Contains(keyword, StringComparison.OrdinalIgnoreCase));
    }

    // Temporary class for tick box columns - will be replaced with actual model later
    public class TickBoxColumnConfig
    {
        public string Name { get; set; } = string.Empty;
        public string SumFieldName { get; set; } = string.Empty;
    }
}

<style>
    /* Export Preview Table Styles */
    .export-preview-table-container {
        width: 100%;
        overflow-x: auto;
    }

    .export-preview-table {
        width: 100%;
        table-layout: fixed; /* This is key for controlling column widths */
        margin-bottom: 0;
    }

        /* Column width management */
        .export-preview-table .col-date {
            width: 90px;
            min-width: 90px;
        }

        .export-preview-table .col-amount {
            width: 100px;
            min-width: 100px;
            text-align: right;
        }

        .export-preview-table .col-checkbox {
            width: 60px;
            min-width: 60px;
            text-align: center;
            padding: 0.375rem 0.25rem;
        }

        .export-preview-table .col-text {
            /* Text columns take up remaining space and adapt */
            width: auto;
            min-width: 120px;
            word-wrap: break-word;
        }

        /* Row styling */
        .export-preview-table tbody tr:hover {
            background-color: rgba(0, 0, 0, 0.025);
        }

    /* Field selection buttons */
    .field-toggle-btn {
        transition: all 0.15s ease-in-out;
    }

        .field-toggle-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    /* Export section styling */
    .alert-sm {
        padding: 0.5rem 0.75rem;
        margin-bottom: 0.5rem;
    }

        .alert-sm .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }
</style>