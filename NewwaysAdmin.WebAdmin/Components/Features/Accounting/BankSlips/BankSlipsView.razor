@page "/accounting/bankslips"
@using NewwaysAdmin.SharedModels.BankSlips
@using NewwaysAdmin.WebAdmin.Services.BankSlips
@using NewwaysAdmin.WebAdmin.Models.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@using System.ComponentModel.DataAnnotations
@using Google.Cloud.Vision.V1
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.GoogleSheets.Services
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Services
@using Google.Apis.Sheets.v4
@using Google.Apis.Drive.v3
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Templates
@using NewwaysAdmin.GoogleSheets.Services
@inject GoogleSheetsService GoogleSheetsService
@inject IBankSlipOcrService BankSlipService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ILogger<BankSlipsView> Logger
@inject BankSlipExportService GoogleSheetsExportService
@inject UserSheetConfigService UserConfigService
@inject SheetConfigurationService SheetConfigService
@inject SimpleEmailStorageService EmailStorage

<PageTitle>Bank Slip OCR</PageTitle>

<div class="container-fluid p-4">
    <div class="row">
        <!-- Left Panel - Collections -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-collection me-2"></i>Slip Collections
                    </h5>
                    @if (_isAdmin)
                    {
                        <button class="btn btn-primary btn-sm" @onclick="ShowCreateCollectionModal">
                            <i class="bi bi-plus-circle me-1"></i>Add Collection
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (_isLoadingCollections)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading collections...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading your collections...</p>
                        </div>
                    }
                    else if (_availableCollections.Any())
                    {
                        <div class="list-group">
                            @foreach (var collection in _availableCollections)
                            {
                                <div class="list-group-item @(_selectedCollection?.Id == collection.Id ? "active" : "list-group-item-action")"
                                     @onclick="() => SelectCollection(collection)"
                                     style="cursor: pointer;">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@collection.Name</h6>
                                        <small class="@(_selectedCollection?.Id == collection.Id ? "text-light" : "text-muted")">
                                            @(collection.IsActive ? "Active" : "Inactive")
                                            @if (collection.IsKBizFormat)
                                            {
                                                <span class="badge bg-success ms-1">K-BIZ</span>
                                            }
                                        </small>
                                    </div>
                                    <p class="mb-1 small">@collection.SourceDirectory</p>
                                    @if (_isAdmin)
                                    {
                                        <small class="@(_selectedCollection?.Id == collection.Id ? "text-light" : "text-muted")">
                                            <i class="bi bi-gear me-1"></i>
                                            <span class="text-decoration-underline" @onclick:stopPropagation="true" @onclick="() => EditCollection(collection)">
                                                Edit
                                            </span>
                                        </small>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <i class="bi bi-folder-x text-muted" style="font-size: 3rem;"></i>
                            <p class="mt-2 text-muted">No collections available.</p>
                            @if (_isAdmin)
                            {
                                <p class="small text-muted">Create a collection to get started.</p>
                            }
                            else
                            {
                                <p class="small text-muted">Contact your admin to set up collections.</p>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Panel - Processing -->
        <div class="col-md-8">
            @if (_selectedCollection != null)
            {
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-cpu me-2"></i>Process Bank Slips - @_selectedCollection.Name
                            @if (_selectedCollection.IsKBizFormat)
                            {
                                <span class="badge bg-success ms-2">K-BIZ Format</span>
                            }
                            else
                            {
                                <span class="badge bg-primary ms-2">Original Format</span>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- Configuration Info -->
                        <div class="alert alert-light mb-4">
                            <div class="row small">
                                <div class="col-md-6">
                                    <strong>Source:</strong> @_selectedCollection.SourceDirectory<br />
                                    <strong>Output:</strong> @_selectedCollection.OutputDirectory
                                </div>
                                <div class="col-md-6">
                                    <strong>Credentials:</strong> @(File.Exists(_selectedCollection.CredentialsPath) ? "✓ Valid" : "⚠ Not Found")<br />
                                    <strong>Format:</strong> @(_selectedCollection.IsKBizFormat ? "K-BIZ" : "Original")<br />
                                    <strong>Active:</strong> @(_selectedCollection.IsActive ? "✓ Yes" : "✗ No")
                                </div>
                            </div>
                        </div>

                        <!-- Date Range Selection -->
                        <div class="row mb-4">
                            <div class="col-md-5">
                                <label class="form-label fw-bold">Start Date</label>
                                <input type="date" class="form-control" @bind="_startDate" disabled="@_isProcessing" />
                            </div>
                            <div class="col-md-5">
                                <label class="form-label fw-bold">End Date</label>
                                <input type="date" class="form-control" @bind="_endDate" disabled="@_isProcessing" />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-outline-secondary btn-sm w-100" @onclick="SetDateRangeToLastMonth" disabled="@_isProcessing">
                                    Last Month
                                </button>
                            </div>
                        </div>

                        <!-- Processing Controls -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <button class="btn btn-primary me-2" @onclick="StartProcessing" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Processing...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-play-circle me-2"></i>
                                        <span>Process Bank Slips</span>
                                    }
                                </button>

                                <button class="btn btn-outline-info me-2" @onclick="TestSingleFile" disabled="@_isProcessing">
                                    <i class="bi bi-file-text me-1"></i>Test Single File
                                </button>
                            </div>
                        </div>

                        <!-- Processing Progress -->
                        @if (_isProcessing)
                        {
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">Processing Progress</h6>
                                        <span class="badge bg-primary">@_progressPercentage%</span>
                                    </div>
                                    <div class="progress mb-2">
                                        <div class="progress-bar" style="width: @(_progressPercentage)%"></div>
                                    </div>
                                    <div class="row small text-muted">
                                        <div class="col-md-6">Files: @_processedCount / @_totalFiles</div>
                                        <div class="col-md-6">Current: @_currentFileName</div>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Status Messages -->
                        @if (!string.IsNullOrEmpty(_statusMessage))
                        {
                            <div class="alert @(_statusMessageType == "error" ? "alert-danger" : "alert-success") mb-4">
                                <i class="bi @(_statusMessageType == "error" ? "bi-exclamation-triangle" : "bi-info-circle") me-2"></i>
                                @foreach (var line in _statusMessage.Split('\n'))
                                {
                                    <div>@line</div>
                                }

                                @if (!string.IsNullOrEmpty(_lastExportedSheetUrl) && _statusMessageType != "error")
                                {
                                    <div class="mt-3">
                                        <a href="@_lastExportedSheetUrl" target="_blank" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-box-arrow-up-right me-1"></i>
                                            🔗 Click Here to Open Google Sheet
                                        </a>
                                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="CopySheetUrlToClipboard">
                                            <i class="bi bi-clipboard me-1"></i>Copy URL
                                        </button>
                                        @if (_lastExportTime.HasValue)
                                        {
                                            <small class="text-muted d-block mt-2">
                                                Exported at: @_lastExportTime.Value.ToString("HH:mm:ss")
                                            </small>
                                        }
                                    </div>
                                }
                            </div>
                        }

                        <!-- Results and Export Section -->
                        @if (_lastResult != null)
                        {
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">Processing Results</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-success">@_lastResult.Summary.ProcessedFiles</div>
                                                <small class="text-muted">Processed</small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-danger">@_lastResult.Summary.FailedFiles</div>
                                                <small class="text-muted">Failed</small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-primary">@_lastResult.ProcessedSlips.Count</div>
                                                <small class="text-muted">Bank Slips</small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-info">@_lastResult.ProcessedSlips.Sum(s => s.Amount).ToString("N2") ฿</div>
                                                <small class="text-muted">Total Amount</small>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- NEW: Template-based Export Section -->
                                    @if (_lastResult.ProcessedSlips.Any())
                                    {
                                        <div class="card mt-4">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0">
                                                    <i class="bi bi-table me-2"></i>
                                                    Export to Google Sheets
                                                </h5>
                                                <span class="badge bg-primary">@_lastResult.ProcessedSlips.Count slips</span>
                                            </div>
                                            <div class="card-body">
                                                <!-- Template Selection Row -->
                                                <div class="row mb-3">
                                                    <label class="col-sm-2 col-form-label">Sheet Template:</label>
                                                    <div class="col-sm-6">
                                                        <select class="form-select" @onchange="OnTemplateChanged" value="@_selectedTemplateId">
                                                            <option value="">-- Select a template --</option>
                                                            @if (_userTemplates?.Any() == true)
                                                            {
                                                                @foreach (var template in _userTemplates)
                                                                {
                                                                    <option value="@GenerateTemplateId(template)">@template.ConfigurationName</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="col-sm-4">
                                                        <button class="btn btn-outline-primary btn-sm me-2"
                                                                @onclick="EditTemplate"
                                                                disabled="@(string.IsNullOrEmpty(_selectedTemplateId))">
                                                            <i class="bi bi-pencil me-1"></i>Edit
                                                        </button>
                                                        <button class="btn btn-outline-success btn-sm" @onclick="NewTemplate">
                                                            <i class="bi bi-plus me-1"></i>New
                                                        </button>
                                                    </div>
                                                </div>

                                                <!-- Template Preview (when template is selected) -->
                                                @if (_selectedTemplate != null)
                                                {
                                                    <div class="row mb-3">
                                                        <div class="col-12">
                                                            <div class="alert alert-light border">
                                                                <h6 class="mb-2">
                                                                    <i class="bi bi-eye me-1"></i>Template Preview: @_selectedTemplate.ConfigurationName
                                                                </h6>
                                                                <div class="template-preview">
                                                                    <small class="text-muted">
                                                                        <strong>Columns:</strong>
                                                                        @string.Join(", ", GetSelectedColumnNames(_selectedTemplate))
                                                                        @if (_selectedTemplate.CustomColumns.Any())
                                                                        {
                                                                            <br />
                                                                            <strong>Custom Columns:</strong>
                                                                            @string.Join(", ", _selectedTemplate.CustomColumns.Select(c => $"{c.Name} (SUMIF)"))
                                                                        }
                                                                    </small>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }

                                                <!-- User Email Configuration -->
                                                <div class="row mb-3">
                                                    <label class="col-sm-2 col-form-label">Share with Email:</label>
                                                    <div class="col-sm-6">
                                                        <input type="email" class="form-control" @bind="_userShareEmail"
                                                               placeholder="your-email@gmail.com" />
                                                    </div>
                                                    <div class="col-sm-4">
                                                        <button class="btn btn-outline-secondary btn-sm" @onclick="SaveUserEmail">
                                                            <i class="bi bi-check me-1"></i>Save Email
                                                        </button>
                                                    </div>
                                                </div>

                                                <!-- Export Button -->
                                                <div class="row">
                                                    <div class="col-12">
                                                        <button class="btn btn-success btn-lg"
                                                                @onclick="ExportToGoogleSheets"
                                                                disabled="@(_isExportingToSheets || string.IsNullOrEmpty(_selectedTemplateId) || string.IsNullOrWhiteSpace(_userShareEmail))">
                                                            @if (_isExportingToSheets)
                                                            {
                                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                                <span>Exporting to Google Sheets...</span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-google me-2"></i>
                                                                <span>Export @_lastResult.ProcessedSlips.Count slips to Google Sheets</span>
                                                            }
                                                        </button>

                                                        <button class="btn btn-outline-primary ms-2" @onclick="DownloadCsv">
                                                            <i class="bi bi-download me-2"></i>Download CSV
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="card h-100 d-flex align-items-center justify-content-center">
                    <div class="card-body text-center">
                        <i class="bi bi-arrow-left text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3 text-muted">Select a Collection</h5>
                        <p class="text-muted">Choose a slip collection from the left panel to start processing bank slips.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Use the proper CollectionModal component instead of inline modal -->
@if (_showCollectionModal && _editingCollection != null)
{
    <CollectionModal EditingCollection="_editingCollection"
                     IsVisible="_showCollectionModal"
                     IsEditMode="@(_editingCollection.Id != null)"
                     IsSaving="_isSaving"
                     ErrorMessage="_saveErrorMessage"
                     OnSave="SaveCollection"
                     OnCancel="CloseCollectionModal" />
}

<!-- Template Configuration Modal -->
<TemplateConfigurationModal @ref="_templateModal"
                            IsVisible="_showTemplateModal"
                            Template="_editingTemplate"
                            ModuleName="BankSlips"
                            OnSave="HandleTemplateSave"
                            OnCancel="HandleTemplateCancel" />


@code {
    // User state
    private string _currentUsername = string.Empty;
    private bool _isAdmin = false;

    // Collections
    private List<SlipCollection> _availableCollections = new();
    private SlipCollection? _selectedCollection;
    private bool _isLoadingCollections = true;

    // Collection modal
    private bool _showCollectionModal = false;
    private SlipCollection? _editingCollection;
    private bool _isSaving = false;
    private string _saveErrorMessage = string.Empty;

    // Processing
    private DateTime _startDate = DateTime.Today.AddMonths(-1);
    private DateTime _endDate = DateTime.Today;
    private bool _isProcessing = false;
    private BankSlipProcessingResult? _lastResult;
    private DateTime? _processingStartTime;

    // Progress tracking
    private int _processedCount = 0;
    private int _totalFiles = 0;
    private string _currentFileName = string.Empty;
    private int _progressPercentage => _totalFiles > 0 ? (_processedCount * 100 / _totalFiles) : 0;

    // Status messages
    private string _statusMessage = string.Empty;
    private string _statusMessageType = "info"; // "info" or "error"

    // Google Sheets variables
    private bool _isExportingToSheets = false;
    private string _userShareEmail = string.Empty;
    private string? _lastExportedSheetUrl;
    private DateTime? _lastExportTime;

    // NEW: Template Management
    private List<UserSheetConfiguration>? _userTemplates;
    private string _selectedTemplateId = string.Empty;
    private UserSheetConfiguration? _selectedTemplate;
    private bool _showTemplateModal = false;
    private UserSheetConfiguration? _editingTemplate;
    private TemplateConfigurationModal? _templateModal;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("BankSlipsView: Starting initialization");

        // Load current user to set _currentUsername and _isAdmin
        await LoadCurrentUser();

        // Load collections (which may depend on user context)
        await LoadAvailableCollections();

        // Load user's share email preference
        await LoadUserShareEmail();

        // NEW: Load user templates
        await LoadUserTemplates();

        Logger.LogInformation("BankSlipsView: Initialization complete. Username: {Username}, IsAdmin: {IsAdmin}, Collections: {Count}",
            _currentUsername, _isAdmin, _availableCollections?.Count ?? 0);
    }

    #region User Management

    private async Task LoadCurrentUser()
    {
        try
        {
            Logger.LogInformation("LoadCurrentUser: Starting");

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _currentUsername = authState.User.Identity?.Name ?? string.Empty;
            _isAdmin = authState.User.IsInRole("Admin");

            Logger.LogInformation("LoadCurrentUser: Current user: {Username}, IsAdmin: {IsAdmin}", _currentUsername, _isAdmin);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading current user");
        }
    }

    #endregion

    #region Template Management (NEW)

    // Load user's saved templates
    private async Task LoadUserTemplates()
    {
        try
        {
            // Get all configurations for this user and module
            _userTemplates = await SheetConfigService.GetUserConfigurationsAsync(_currentUsername, "BankSlips");

            // If no templates exist, create a default one
            if (!_userTemplates.Any())
            {
                var defaultTemplate = await CreateDefaultTemplate();
                _userTemplates.Add(defaultTemplate);
            }

            // Ensure we have a default template
            var existingDefault = _userTemplates.FirstOrDefault(t => t.ConfigurationName == "Default");
            if (existingDefault == null)
            {
                existingDefault = await CreateDefaultTemplate();
                _userTemplates.Add(existingDefault);
            }

            // Auto-select the default template
            _selectedTemplateId = GenerateTemplateId(existingDefault);
            _selectedTemplate = existingDefault;

            Logger.LogInformation("Loaded {Count} templates for user {Username}", _userTemplates.Count, _currentUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user templates");
            SetStatusMessage($"Error loading templates: {ex.Message}", "error");

            // Fallback: create an empty list with just the default
            _userTemplates = new List<UserSheetConfiguration>();
            try
            {
                var fallbackDefault = await CreateDefaultTemplate();
                _userTemplates.Add(fallbackDefault);
                _selectedTemplateId = GenerateTemplateId(fallbackDefault);
                _selectedTemplate = fallbackDefault;
            }
            catch (Exception fallbackEx)
            {
                Logger.LogError(fallbackEx, "Error creating fallback default template");
                SetStatusMessage("Critical error: Unable to create default template", "error");
            }
        }
    }
    // Delete a template
    private async Task DeleteTemplate(UserSheetConfiguration template)
    {
        try
        {
            // Prevent deletion of default template
            if (template.ConfigurationName == "Default")
            {
                SetStatusMessage("❌ Cannot delete the Default template", "error");
                return;
            }

            var success = await SheetConfigService.DeleteConfigurationAsync(_currentUsername, "BankSlips", template.ConfigurationName);
            if (success)
            {
                // Remove from local list
                _userTemplates?.Remove(template);

                // If this was the selected template, switch to default
                if (_selectedTemplate == template)
                {
                    var defaultTemplate = _userTemplates?.FirstOrDefault(t => t.ConfigurationName == "Default");
                    if (defaultTemplate != null)
                    {
                        _selectedTemplateId = GenerateTemplateId(defaultTemplate);
                        _selectedTemplate = defaultTemplate;
                    }
                    else
                    {
                        _selectedTemplateId = string.Empty;
                        _selectedTemplate = null;
                    }
                }

                SetStatusMessage($"✓ Template '{template.ConfigurationName}' deleted successfully!", "info");
                StateHasChanged();
            }
            else
            {
                SetStatusMessage($"❌ Failed to delete template '{template.ConfigurationName}'", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting template {TemplateName}", template.ConfigurationName);
            SetStatusMessage($"❌ Error deleting template: {ex.Message}", "error");
        }
    }
    // Create default template with all columns enabled
    private async Task<UserSheetConfiguration> CreateDefaultTemplate()
    {
        try
        {
            var defaultConfig = SheetConfigService.CreateDefaultConfiguration("BankSlips");
            defaultConfig.ConfigurationName = "Default";
            defaultConfig.RowSettings.UseHeaderRow = true;
            defaultConfig.RowSettings.UseFormulaRow = true;
            defaultConfig.RowSettings.AddSummaryRowsAfterData = true;
            
            // Enable ALL module columns by default
            var allColumns = SheetConfigService.GetAvailableColumnsForModule("BankSlips");
            defaultConfig.SelectedColumns.Clear();
            foreach (var column in allColumns)
            {
                defaultConfig.SelectedColumns.Add(new SelectedColumn
                {
                    PropertyName = column.PropertyName,
                    IsEnabled = true
                });
            }
            
            // Save the default template
            await SheetConfigService.SaveConfigurationAsync(_currentUsername, defaultConfig);
            
            Logger.LogInformation("Created default template for user {Username}", _currentUsername);
            return defaultConfig;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating default template");
            throw;
        }
    }

    // Generate a template ID for binding
    private string GenerateTemplateId(UserSheetConfiguration template)
    {
        return $"{template.ModuleName}_{template.ConfigurationName}";
    }

    // Handle template selection change
    private async Task OnTemplateChanged(ChangeEventArgs e)
    {
        var templateId = e.Value?.ToString();
        _selectedTemplateId = templateId ?? string.Empty; // Update the binding manually

        if (string.IsNullOrEmpty(templateId))
        {
            _selectedTemplate = null;
            return;
        }

        _selectedTemplate = _userTemplates?.FirstOrDefault(t => GenerateTemplateId(t) == templateId);
        StateHasChanged();
    }

    // Get selected column names for preview
    private List<string> GetSelectedColumnNames(UserSheetConfiguration template)
    {
        var allColumns = SheetConfigService.GetAvailableColumnsForModule(template.ModuleName);
        var enabledPropertyNames = template.SelectedColumns
            .Where(sc => sc.IsEnabled)
            .Select(sc => sc.PropertyName)
            .ToHashSet();
        
        return allColumns
            .Where(ac => enabledPropertyNames.Contains(ac.PropertyName))
            .Select(ac => ac.DisplayName)
            .ToList();
    }

    // Open template configuration modal for editing
    private async Task EditTemplate()
    {
        if (_selectedTemplate == null) return;
        
        _editingTemplate = _selectedTemplate;
        _showTemplateModal = true;
        StateHasChanged();
    }

    // Open template configuration modal for new template
    private async Task NewTemplate()
    {
        _editingTemplate = SheetConfigService.CreateDefaultConfiguration("BankSlips");
        _editingTemplate.ConfigurationName = $"New Template {DateTime.Now:HHmm}";
        _showTemplateModal = true;
        StateHasChanged();
    }

    // Handle template save from modal
    private async Task HandleTemplateSave(UserSheetConfiguration savedTemplate)
    {
        try
        {
            var success = await SheetConfigService.SaveConfigurationAsync(_currentUsername, savedTemplate);
            if (success)
            {
                // Reload templates
                await LoadUserTemplates();
                
                // Select the saved template
                _selectedTemplateId = GenerateTemplateId(savedTemplate);
                _selectedTemplate = savedTemplate;
                
                SetStatusMessage($"✓ Template '{savedTemplate.ConfigurationName}' saved successfully!", "info");
            }
            else
            {
                SetStatusMessage("❌ Failed to save template", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving template");
            SetStatusMessage($"❌ Error saving template: {ex.Message}", "error");
        }
        finally
        {
            _showTemplateModal = false;
            StateHasChanged();
        }
    }

    // Handle template modal cancel
    private async Task HandleTemplateCancel()
    {
        _showTemplateModal = false;
        _editingTemplate = null;
        StateHasChanged();
    }

    #endregion

    #region Google Sheets Configuration

    private async Task LoadUserShareEmail()
    {
        try
        {
            if (!string.IsNullOrEmpty(_currentUsername))
            {
                _userShareEmail = await EmailStorage.GetUserEmailAsync(_currentUsername) ?? "";
                Logger.LogInformation("Loaded user share email: {Email} for user {Username}",
                    string.IsNullOrEmpty(_userShareEmail) ? "None" : _userShareEmail, _currentUsername);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user share email");
        }
    }

    #endregion

    #region Collection Management

    private async Task LoadAvailableCollections()
    {
        try
        {
            _isLoadingCollections = true;
            _availableCollections = await BankSlipService.GetUserCollectionsAsync(_currentUsername);
            Logger.LogInformation("Loaded {Count} collections for user {Username}", _availableCollections.Count, _currentUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading collections for user {Username}", _currentUsername);
            SetStatusMessage($"Error loading collections: {ex.Message}", "error");
        }
        finally
        {
            _isLoadingCollections = false;
        }
    }

    private void SelectCollection(SlipCollection collection)
    {
        _selectedCollection = collection;
        ClearStatusMessage();
        Logger.LogInformation("Selected collection: {CollectionName}", collection.Name);
    }

    private void ShowCreateCollectionModal()
    {
        _editingCollection = new SlipCollection
            {
                Name = "",
                SourceDirectory = "",
                OutputDirectory = "",
                CredentialsPath = "",
                IsActive = true,
                IsKBizFormat = false,  // Add this - default to Original format
                ProcessingSettings = new ProcessingParameters()  // Add this - initialize with defaults
            };
        _saveErrorMessage = string.Empty;
        _showCollectionModal = true;
    }

    private void EditCollection(SlipCollection collection)
    {
        _editingCollection = new SlipCollection
            {
                Id = collection.Id,
                Name = collection.Name,
                SourceDirectory = collection.SourceDirectory,
                OutputDirectory = collection.OutputDirectory,
                CredentialsPath = collection.CredentialsPath,
                IsActive = collection.IsActive,
                IsKBizFormat = collection.IsKBizFormat,  // Add this
                ProcessingSettings = collection.ProcessingSettings ?? new ProcessingParameters(),  // Add this with null check
                Description = collection.Description  // Add this if it exists
            };
        _saveErrorMessage = string.Empty;
        _showCollectionModal = true;
    }

    private void CloseCollectionModal()
    {
        _showCollectionModal = false;
        _editingCollection = null;
        _saveErrorMessage = string.Empty;
    }

    private async Task SaveCollection()
    {
        if (_editingCollection == null) return;

        try
        {
            _isSaving = true;
            _saveErrorMessage = string.Empty; // Clear immediately
            StateHasChanged(); // Force UI update

            // Basic validation
            if (string.IsNullOrWhiteSpace(_editingCollection.Name))
            {
                _saveErrorMessage = "Collection name is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(_editingCollection.SourceDirectory))
            {
                _saveErrorMessage = "Source directory is required.";
                return;
            }

            // Store the collection name BEFORE clearing it
            string collectionName = _editingCollection.Name;

            bool success = true;
            try
            {
                await BankSlipService.SaveCollectionAsync(_editingCollection, _currentUsername);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error saving collection");
                success = false;
                _saveErrorMessage = $"Error: {ex.Message}";
            }

            if (success)
            {
                CloseCollectionModal(); // This sets _editingCollection to null
                await LoadAvailableCollections();
                SetStatusMessage($"Collection '{collectionName}' saved successfully.", "info"); // Use stored name
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SaveCollection method");
            _saveErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }


    #endregion

    #region Processing

    private async Task StartProcessing()
    {
        if (_selectedCollection == null) return;

        try
        {
            _isProcessing = true;
            _processingStartTime = DateTime.Now;
            ResetProgress();
            ClearStatusMessage();
            StateHasChanged();

            Logger.LogInformation("Starting bank slip processing for collection {CollectionName} from {StartDate} to {EndDate}",
                _selectedCollection.Name, _startDate, _endDate);

            var progressReporter = new BlazorProgressReporter(this);
            _lastResult = await BankSlipService.ProcessSlipCollectionAsync(
                _selectedCollection.Id, _startDate, _endDate, _currentUsername, progressReporter);

            Logger.LogInformation("Processing completed. Processed: {ProcessedCount}, Failed: {FailedCount}",
                _lastResult.Summary.ProcessedFiles, _lastResult.Summary.FailedFiles);

            SetStatusMessage($"Processing completed successfully! Processed {_lastResult.Summary.ProcessedFiles} files.", "info");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during bank slip processing");
            SetStatusMessage($"Processing failed: {ex.Message}", "error");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task TestSingleFile()
    {
        if (_selectedCollection == null) return;

        try
        {
            SetStatusMessage("Testing single file processing...", "info");

            var testFiles = Directory.GetFiles(_selectedCollection.SourceDirectory, "*.*")
                .Where(f => f.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                           f.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                           f.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase))
                .Take(1)
                .ToList();

            if (!testFiles.Any())
            {
                SetStatusMessage("No image files found in source directory for testing.", "error");
                return;
            }

            var testFile = testFiles.First();
            Logger.LogInformation("Testing single file: {FilePath}", testFile);

            var result = await BankSlipService.TestProcessSingleFileAsync(testFile, _selectedCollection);

            if (result != null)
            {
                SetStatusMessage($"✓ Test successful! Extracted: {result.Amount:N2} ฿ from {result.AccountName} on {result.TransactionDate.AddYears(-543):dd/MM/yyyy}", "info");
            }
            else
            {
                SetStatusMessage("✗ Test failed - could not extract data from the test file.", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during single file test");
            SetStatusMessage($"Test failed: {ex.Message}", "error");
        }
    }

    private void SetDateRangeToLastMonth()
    {
        var lastMonth = DateTime.Today.AddMonths(-1);
        _startDate = new DateTime(lastMonth.Year, lastMonth.Month, 1);
        _endDate = _startDate.AddMonths(1).AddDays(-1);
    }

    private void ResetProgress()
    {
        _processedCount = 0;
        _totalFiles = 0;
        _currentFileName = string.Empty;
    }

    public void UpdateProgress(int processedCount, int totalCount, string currentFileName = "")
    {
        _processedCount = processedCount;
        _totalFiles = totalCount;
        _currentFileName = currentFileName;

        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Export Methods

    // NEW: Updated ExportToGoogleSheets method to use templates
    private async Task ExportToGoogleSheets()
    {
        try
        {
            // ... existing validation code ...

            _isExportingToSheets = true;
            StateHasChanged();

            var writeResult = await GoogleSheetsExportService.ExportBankSlipsAsync(
                _lastResult.ProcessedSlips,
                _currentUsername!,
                _selectedTemplateId
              ); 

            if (writeResult.Success)
            {
                // Store the sheet URL and export time for the UI
                _lastExportedSheetUrl = writeResult.SheetUrl;
                _lastExportTime = DateTime.Now;
                // Updated success message for ownership transfer
                SetStatusMessage($"🎉 SUCCESS!\n" +
                               $"✅ Exported {writeResult.RowsExported} rows using template '{_selectedTemplate?.ConfigurationName ?? "Default"}'\n" +
                               $"✅ Ownership transferred to: {_userShareEmail}\n" +
                               $"✅ You now own the spreadsheet - no storage used on our system!\n" +
                               $"📧 Check your email for Google notification\n" +
                               $"🔗 Sheet URL: {writeResult.SheetUrl}", "success");

                Logger.LogInformation("Google Sheets export with ownership transfer successful for user {Username} to {Email}. URL: {Url}",
         _currentUsername, _userShareEmail, writeResult.SheetUrl);
            }
            else
            {
                var errorMsg = writeResult.Errors.Any() ?
                    string.Join(", ", writeResult.Errors) : "Unknown error";
                SetStatusMessage($"❌ Export failed: {errorMsg}", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during Google Sheets export with ownership transfer");
            SetStatusMessage($"❌ Export failed: {ex.Message}", "error");
        }
        finally
        {
            _isExportingToSheets = false;
            StateHasChanged();
        }
    }

    // Helper method to get property values from bank slip data
    private object? GetPropertyValue(BankSlipData slip, string propertyName)
    {
        return propertyName switch
        {
            "TransactionDate" => slip.TransactionDate,
            "Amount" => slip.Amount,
            "AccountName" => slip.AccountName,
            "AccountNumber" => slip.AccountNumber,
            "ReceiverName" => slip.ReceiverName,
            "ReceiverAccount" => slip.ReceiverAccount,
            "Note" => slip.Note,
            "SlipCollectionName" => slip.SlipCollectionName,
            "ProcessedBy" => slip.ProcessedBy,
            "ProcessedAt" => slip.ProcessedAt,
            "OriginalFilePath" => slip.OriginalFilePath,
            "Status" => slip.Status.ToString(),
            "ErrorReason" => slip.ErrorReason,
            "Id" => slip.Id,
            _ => null
        };
    }

    private async Task ShareSpreadsheetWithUsers(string spreadsheetId, string username)
    {
        try
        {
            // Share with the user's email
            if (!string.IsNullOrEmpty(_userShareEmail))
            {
                await GoogleSheetsService.ShareSpreadsheetAsync(spreadsheetId, _userShareEmail, "writer");
                Logger.LogInformation("Shared spreadsheet {SpreadsheetId} with user email {Email}", spreadsheetId, _userShareEmail);
            }

            // Always share with the default admin email
            await GoogleSheetsService.ShareSpreadsheetAsync(spreadsheetId, "superfox75@gmail.com", "writer");
            Logger.LogInformation("Shared spreadsheet {SpreadsheetId} with admin email", spreadsheetId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sharing spreadsheet {SpreadsheetId}", spreadsheetId);
            // Don't fail the whole export just because sharing failed
        }
    }

    private async Task DownloadCsv()
    {
        if (_lastResult?.ProcessedSlips.Any() != true) return;

        try
        {
            var csvContent = GenerateCsvContent(_lastResult.ProcessedSlips);
            var fileName = $"bankslips_{_selectedCollection!.Name.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, csvContent, "text/csv");

            Logger.LogInformation("CSV export initiated for {Count} bank slips", _lastResult.ProcessedSlips.Count);
            SetStatusMessage($"CSV file '{fileName}' downloaded successfully!", "info");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during CSV export");
            SetStatusMessage($"CSV export failed: {ex.Message}", "error");
        }
    }

    private string GenerateCsvContent(List<BankSlipData> slips)
    {
        var csv = new StringBuilder();
        
        // Headers
        csv.AppendLine("Date,Amount,Account Name,Account Number,Receiver Name,Receiver Account,Note,Collection,Processed By,Processed At,Original File");

        // Data rows
        foreach (var slip in slips)
        {
            csv.AppendLine($"\"{slip.TransactionDate:yyyy-MM-dd}\"," +
                          $"\"{slip.Amount}\"," +
                          $"\"{slip.AccountName}\"," +
                          $"\"{slip.AccountNumber}\"," +
                          $"\"{slip.ReceiverName}\"," +
                          $"\"{slip.ReceiverAccount}\"," +
                          $"\"{slip.Note}\"," +
                          $"\"{slip.SlipCollectionName}\"," +
                          $"\"{slip.ProcessedBy}\"," +
                          $"\"{slip.ProcessedAt:yyyy-MM-dd HH:mm:ss}\"," +
                          $"\"{slip.OriginalFilePath}\"");
        }

        return csv.ToString();
    }

    private async Task CopySheetUrlToClipboard()
    {
        if (!string.IsNullOrEmpty(_lastExportedSheetUrl))
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", _lastExportedSheetUrl);
            SetStatusMessage("📋 Sheet URL copied to clipboard!", "info");
        }
    }

    #endregion

    #region Utility Methods

    private void SetStatusMessage(string message, string type = "info")
    {
        _statusMessage = message;
        _statusMessageType = type;
        StateHasChanged();
    }

    private void ClearStatusMessage()
    {
        _statusMessage = string.Empty;
        _statusMessageType = "info";
    }

    #endregion

    #region Progress Reporter Class

    public class BlazorProgressReporter : IProgressReporter
    {
        private readonly BankSlipsView _component;

        public BlazorProgressReporter(BankSlipsView component)
        {
            _component = component;
        }

        public void ReportProgress(int processedCount, int totalCount, string currentFileName = "")
        {
            _component.UpdateProgress(processedCount, totalCount, currentFileName);
        }
    }
    private bool IsValidGoogleEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
            return false;

        // Common Google account domains that support ownership transfer
        var validDomains = new[] { "gmail.com", "googlemail.com" };
        var domain = email.Split('@').LastOrDefault()?.ToLower();

        return validDomains.Contains(domain) || email.EndsWith("@gmail.com");
    }

    private async Task SaveUserEmail()
    {
        if (string.IsNullOrEmpty(_currentUsername)) return;

        try
        {
            _isSaving = true; // Add this field if you don't have it

            // Basic validation
            if (string.IsNullOrWhiteSpace(_userShareEmail))
            {
                SetStatusMessage("Please enter a valid email address", "error");
                return;
            }

            if (!_userShareEmail.Contains("@") || !_userShareEmail.Contains("."))
            {
                SetStatusMessage("Please enter a valid email address", "error");
                return;
            }

            // Enhanced validation for ownership transfer
            if (!IsValidGoogleEmail(_userShareEmail))
            {
                SetStatusMessage("⚠️ For ownership transfer, please use a Gmail address (e.g., yourname@gmail.com). " +
                               "Other email providers may not support Google Sheets ownership transfer.", "warning");
            }

            bool success = true;
            try
            {
                await EmailStorage.SetUserEmailAsync(_currentUsername, _userShareEmail);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error saving user email");
                success = false;
                SetStatusMessage($"Error saving email: {ex.Message}", "error");
            }

            if (success)
            {
                var message = IsValidGoogleEmail(_userShareEmail)
                    ? $"✅ Email saved! Spreadsheets will be transferred to: {_userShareEmail}"
                    : $"⚠️ Email saved: {_userShareEmail} (Note: Ownership transfer works best with Gmail addresses)";

                SetStatusMessage(message, "info");
                Logger.LogInformation("Saved user share email: {Email} for user {Username}", _userShareEmail, _currentUsername);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SaveUserEmail method");
            SetStatusMessage($"Error saving email: {ex.Message}", "error");
        }
        finally
        {
            _isSaving = false;
        }
    }

    #endregion
}