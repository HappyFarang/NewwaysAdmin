@page "/accounting/bankslips"
@using NewwaysAdmin.SharedModels.BankSlips
@using NewwaysAdmin.WebAdmin.Services.BankSlips
@using NewwaysAdmin.WebAdmin.Models.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@inject IBankSlipOcrService BankSlipService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ILogger<BankSlipsView> Logger

<PageTitle>Bank Slip OCR</PageTitle>

<div class="container-fluid p-4">
    <div class="row">
        <!-- Left Panel - Collections -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-collection me-2"></i>Slip Collections
                    </h5>
                    @if (_isAdmin)
                    {
                        <button class="btn btn-primary btn-sm" @onclick="ShowCreateCollectionModal">
                            <i class="bi bi-plus-circle me-1"></i>Add Collection
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (_isLoadingCollections)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading collections...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading your collections...</p>
                        </div>
                    }
                    else if (_availableCollections.Any())
                    {
                        <div class="list-group">
                            @foreach (var collection in _availableCollections)
                            {
                                <div class="list-group-item @(_selectedCollection?.Id == collection.Id ? "active" : "")"
                                     style="cursor: pointer;" @onclick="() => SelectCollection(collection)">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">@collection.Name</h6>
                                            <p class="mb-1 small text-muted">@collection.Description</p>
                                            <small class="text-muted">
                                                <i class="bi bi-folder me-1"></i>@collection.SourceDirectory
                                            </small>
                                        </div>
                                        @if (_isAdmin)
                                        {
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-secondary"
                                                        @onclick:stopPropagation="true"
                                                        @onclick="() => EditCollection(collection)"
                                                        title="Edit Collection">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="bi bi-inbox display-1 mb-3"></i>
                            <h6>No Collections Available</h6>
                            <p>No bank slip collections have been configured for your account.</p>
                            @if (_isAdmin)
                            {
                                <button class="btn btn-primary" @onclick="ShowCreateCollectionModal">
                                    <i class="bi bi-plus-circle me-1"></i>Create First Collection
                                </button>
                            }
                            else
                            {
                                <p class="small">Contact your administrator to set up collections.</p>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Panel - Processing -->
        <div class="col-md-8">
            @if (_selectedCollection != null)
            {
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-cpu me-2"></i>Process Bank Slips - @_selectedCollection.Name
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- Date Range Selection -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Start Date</label>
                                <input type="date" class="form-control" @bind="_startDate" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">End Date</label>
                                <input type="date" class="form-control" @bind="_endDate" />
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex gap-2 mb-4">
                            <button class="btn btn-success" @onclick="StartProcessing" disabled="@_isProcessing">
                                @if (_isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Processing @_processedCount of @_totalFiles files...</span>
                                }
                                else
                                {
                                    <i class="bi bi-play-circle me-2"></i>
                                    <span>Process Bank Slips</span>
                                }
                            </button>

                            @if (_lastResult?.ProcessedSlips.Any() == true)
                            {
                                <button class="btn btn-primary" @onclick="DownloadCsv">
                                    <i class="bi bi-download me-2"></i>Download CSV (@_lastResult.ProcessedSlips.Count slips)
                                </button>
                            }
                        </div>

                        <!-- Processing Progress -->
                        @if (_isProcessing && _totalFiles > 0)
                        {
                            <div class="card bg-light mb-4">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">Processing Progress</h6>
                                        <span class="badge bg-primary">@_progressPercentage%</span>
                                    </div>
                                    <div class="progress mb-2">
                                        <div class="progress-bar"
                                             style="width: @(_progressPercentage)%"
                                             role="progressbar"
                                             aria-valuenow="@_progressPercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    <small class="text-muted">
                                        @_processedCount of @_totalFiles files processed
                                        @if (!string.IsNullOrEmpty(_currentFileName))
                                        {
                                            <br />
                                            <span>Currently processing: @_currentFileName</span>
                                        }
                                    </small>
                                </div>
                            </div>
                        }

                        <!-- Results -->
                        @if (_lastResult != null)
                        {
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-check-circle me-2"></i>Processing Results
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <!-- Summary Stats -->
                                    <div class="row mb-4">
                                        <div class="col-md-3">
                                            <div class="text-center p-3 bg-success bg-opacity-10 rounded">
                                                <div class="h3 text-success mb-1">@_lastResult.Summary.ProcessedFiles</div>
                                                <small class="text-muted">Successfully Processed</small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center p-3 bg-danger bg-opacity-10 rounded">
                                                <div class="h3 text-danger mb-1">@_lastResult.Summary.FailedFiles</div>
                                                <small class="text-muted">Processing Failed</small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center p-3 bg-warning bg-opacity-10 rounded">
                                                <div class="h3 text-warning mb-1">@_lastResult.Summary.DateOutOfRangeFiles</div>
                                                <small class="text-muted">Outside Date Range</small>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center p-3 bg-info bg-opacity-10 rounded">
                                                <div class="h3 text-info mb-1">@_lastResult.Summary.TotalFiles</div>
                                                <small class="text-muted">Total Files Found</small>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Processing Duration -->
                                    <div class="alert alert-info">
                                        <i class="bi bi-clock me-2"></i>
                                        Processing completed in @_lastResult.Summary.ProcessingDuration.TotalSeconds.ToString("F1") seconds
                                    </div>

                                    <!-- Processed Slips Table -->
                                    @if (_lastResult.ProcessedSlips.Any())
                                    {
                                        <h6 class="mt-4 mb-3">Successfully Processed Bank Slips</h6>
                                        <div class="table-responsive">
                                            <table class="table table-striped table-hover">
                                                <thead class="table-dark">
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>Amount</th>
                                                        <th>Account Name</th>
                                                        <th>Account Number</th>
                                                        <th>Note</th>
                                                        <th>File</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var slip in _lastResult.ProcessedSlips.OrderByDescending(s => s.TransactionDate))
                                                    {
                                                        <tr>
                                                            <td>@slip.TransactionDate.AddYears(-543).ToString("dd/MM/yyyy")</td>
                                                            <td class="text-end">
                                                                <span class="badge bg-success">@slip.Amount.ToString("N2") ฿</span>
                                                            </td>
                                                            <td>@slip.AccountName</td>
                                                            <td><code>@slip.AccountNumber</code></td>
                                                            <td>@slip.Note</td>
                                                            <td>
                                                                <small class="text-muted">@Path.GetFileName(slip.OriginalFilePath)</small>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }

                                    <!-- Error Details -->
                                    @if (_lastResult.Errors.Any())
                                    {
                                        <h6 class="mt-4 mb-3 text-danger">
                                            <i class="bi bi-exclamation-triangle me-2"></i>Processing Errors (@_lastResult.Errors.Count)
                                        </h6>
                                        <div class="accordion" id="errorsAccordion">
                                            @for (int i = 0; i < _lastResult.Errors.Count; i++)
                                            {
                                                var error = _lastResult.Errors[i];
                                                var collapseId = $"error-{i}";
                                                <div class="accordion-item">
                                                    <h2 class="accordion-header">
                                                        <button class="accordion-button collapsed" type="button"
                                                                data-bs-toggle="collapse" data-bs-target="#@collapseId">
                                                            <i class="bi bi-file-earmark-x me-2 text-danger"></i>
                                                            @Path.GetFileName(error.FilePath) - @error.Reason
                                                        </button>
                                                    </h2>
                                                    <div id="@collapseId" class="accordion-collapse collapse">
                                                        <div class="accordion-body">
                                                            <div class="row">
                                                                <div class="col-md-4"><strong>File:</strong></div>
                                                                <div class="col-md-8">@error.FilePath</div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-4"><strong>Error:</strong></div>
                                                                <div class="col-md-8 text-danger">@error.Reason</div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-4"><strong>Failed Pass:</strong></div>
                                                                <div class="col-md-8">@error.FailedPass</div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-4"><strong>Time:</strong></div>
                                                                <div class="col-md-8">@error.ErrorTime.ToString("yyyy-MM-dd HH:mm:ss")</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <!-- No Collection Selected -->
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center justify-content-center">
                        <div class="text-center text-muted">
                            <i class="bi bi-arrow-left display-1 mb-3"></i>
                            <h4>Select a Collection</h4>
                            <p>Choose a bank slip collection from the left panel to start processing.</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Collection Management Modal -->
@if (_showCollectionModal && _isAdmin)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-collection me-2"></i>
                        @(_editingCollection?.Id != null ? "Edit Collection" : "Create New Collection")
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideCollectionModal"></button>
                </div>
                <EditForm Model="@_editingCollection" OnValidSubmit="SaveCollection">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Collection Name *</label>
                                    <InputText @bind-Value="_editingCollection!.Name" class="form-control"
                                               placeholder="e.g., Amy's Phone, Office Scanner" />
                                    <div class="form-text">Give this collection a unique, descriptive name</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Description</label>
                                    <InputText @bind-Value="_editingCollection!.Description" class="form-control"
                                               placeholder="Optional description" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Source Directory *</label>
                            <InputText @bind-Value="_editingCollection!.SourceDirectory" class="form-control"
                                       placeholder="\\NAS\BankSlips\AmyPhone" />
                            <div class="form-text">Network path where bank slip images are stored</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Output Directory *</label>
                            <InputText @bind-Value="_editingCollection!.OutputDirectory" class="form-control"
                                       placeholder="C:\Temp\BankSlipProcessing" />
                            <div class="form-text">Local directory for temporary processing files</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Google Cloud Credentials Path *</label>
                            <InputText @bind-Value="_editingCollection!.CredentialsPath" class="form-control"
                                       placeholder="C:\Keys\google-vision-api.json" />
                            <div class="form-text">Path to Google Cloud Vision API service account key file</div>
                        </div>

                        <div class="form-check">
                            <InputCheckbox @bind-Value="_editingCollection!.IsActive" class="form-check-input" id="isActive" />
                            <label class="form-check-label fw-bold" for="isActive">Collection is Active</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideCollectionModal">
                            <i class="bi bi-x-circle me-1"></i>Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-1"></i>Save Collection
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // User and permissions
    private string _currentUsername = string.Empty;
    private bool _isAdmin = false;

    // Collections
    private List<SlipCollection> _availableCollections = new();
    private SlipCollection? _selectedCollection;
    private bool _isLoadingCollections = true;

    // Collection modal
    private bool _showCollectionModal = false;
    private SlipCollection? _editingCollection;

    // Processing
    private DateTime _startDate = DateTime.Today.AddMonths(-1);
    private DateTime _endDate = DateTime.Today;
    private bool _isProcessing = false;
    private BankSlipProcessingResult? _lastResult;

    // Progress tracking
    private int _processedCount = 0;
    private int _totalFiles = 0;
    private string _currentFileName = string.Empty;
    private int _progressPercentage => _totalFiles > 0 ? (_processedCount * 100 / _totalFiles) : 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadAvailableCollections();
    }

    #region User Management

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _currentUsername = authState.User.Identity?.Name ?? string.Empty;
            _isAdmin = authState.User.IsInRole("Admin");

            Logger.LogInformation("Current user: {Username}, IsAdmin: {IsAdmin}", _currentUsername, _isAdmin);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading current user");
        }
    }

    #endregion

    #region Collection Management

    private async Task LoadAvailableCollections()
    {
        try
        {
            _isLoadingCollections = true;
            _availableCollections = await BankSlipService.GetUserCollectionsAsync(_currentUsername);

            // Auto-select first available collection
            if (_availableCollections.Any() && _selectedCollection == null)
            {
                _selectedCollection = _availableCollections.First();
            }

            Logger.LogInformation("Loaded {Count} collections for user {Username}",
                _availableCollections.Count, _currentUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading collections");
        }
        finally
        {
            _isLoadingCollections = false;
            StateHasChanged();
        }
    }

    private void SelectCollection(SlipCollection collection)
    {
        _selectedCollection = collection;
        _lastResult = null; // Clear previous results
        ResetProgress();
        StateHasChanged();
    }

    private void ShowCreateCollectionModal()
    {
        _editingCollection = new SlipCollection
            {
                IsActive = true,
                ProcessingSettings = new ProcessingParameters()
            };
        _showCollectionModal = true;
    }

    private void EditCollection(SlipCollection collection)
    {
        _editingCollection = new SlipCollection
            {
                Id = collection.Id,
                Name = collection.Name,
                Description = collection.Description,
                SourceDirectory = collection.SourceDirectory,
                OutputDirectory = collection.OutputDirectory,
                CredentialsPath = collection.CredentialsPath,
                IsActive = collection.IsActive,
                ProcessingSettings = collection.ProcessingSettings
            };
        _showCollectionModal = true;
    }

    private void HideCollectionModal()
    {
        _showCollectionModal = false;
        _editingCollection = null;
    }

    private async Task SaveCollection()
    {
        try
        {
            if (_editingCollection != null)
            {
                await BankSlipService.SaveCollectionAsync(_editingCollection, _currentUsername);
                await LoadAvailableCollections();
                HideCollectionModal();

                Logger.LogInformation("Collection {Name} saved successfully", _editingCollection.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving collection");
        }
    }

    #endregion

    #region Processing

    private async Task StartProcessing()
    {
        if (_selectedCollection == null) return;

        try
        {
            _isProcessing = true;
            ResetProgress();
            StateHasChanged();

            Logger.LogInformation("Starting bank slip processing for collection {CollectionName} from {StartDate} to {EndDate}",
                _selectedCollection.Name, _startDate, _endDate);

            _lastResult = await BankSlipService.ProcessSlipCollectionAsync(
                _selectedCollection.Id, _startDate, _endDate, _currentUsername);

            Logger.LogInformation("Processing completed. Processed: {ProcessedCount}, Failed: {FailedCount}",
                _lastResult.Summary.ProcessedFiles, _lastResult.Summary.FailedFiles);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during bank slip processing");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private void ResetProgress()
    {
        _processedCount = 0;
        _totalFiles = 0;
        _currentFileName = string.Empty;
    }

    #endregion

    #region CSV Export

    private async Task DownloadCsv()
    {
        if (_lastResult?.ProcessedSlips.Any() != true) return;

        try
        {
            var csvContent = GenerateCsvContent(_lastResult.ProcessedSlips);
            var fileName = $"bankslips_{_selectedCollection!.Name.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, csvContent, "text/csv");

            Logger.LogInformation("CSV export initiated for {Count} bank slips", _lastResult.ProcessedSlips.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating CSV export");
        }
    }

    private string GenerateCsvContent(List<BankSlipData> slips)
    {
        var csv = new StringBuilder();

        // Header
        csv.AppendLine("Date,Amount,AccountName,AccountNumber,ReceiverName,ReceiverAccount,Note,FileName");

        // Data rows
        foreach (var slip in slips.OrderBy(s => s.TransactionDate))
        {
            var ceDate = slip.TransactionDate.AddYears(-543);
            csv.AppendLine($"{ceDate:yyyy-MM-dd}," +
                          $"{slip.Amount:F2}," +
                          $"\"{EscapeCsv(slip.AccountName)}\"," +
                          $"\"{EscapeCsv(slip.AccountNumber)}\"," +
                          $"\"{EscapeCsv(slip.ReceiverName)}\"," +
                          $"\"{EscapeCsv(slip.ReceiverAccount)}\"," +
                          $"\"{EscapeCsv(slip.Note)}\"," +
                          $"\"{EscapeCsv(Path.GetFileName(slip.OriginalFilePath))}\"");
        }

        return csv.ToString();
    }

    private string EscapeCsv(string value)
    {
        if (string.IsNullOrEmpty(value)) return "";
        return value.Replace("\"", "\"\"");
    }

    #endregion
}

<script>
    window.downloadFile = (filename, content, contentType) => {
        const blob = new Blob([content], { type: contentType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    };
</script>