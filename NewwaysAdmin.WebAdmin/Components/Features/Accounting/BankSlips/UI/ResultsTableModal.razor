@* NewwaysAdmin.WebAdmin/Components/Features/Accounting/BankSlips/UI/ResultsTableModal.razor *@
@using System.Globalization
@namespace NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.UI

@if (ShowModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-table me-2"></i>
                        Processing Results Table - @SuccessfulResults.Count/@Results.Count successful
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body p-0">
                    @if (SelectedFields.Any())
                    {
                        <div class="table-container">
                            <table class="table table-sm table-bordered mb-0 results-wide-table">
                                <thead class="table-dark sticky-top">
                                    <tr>
                                        <th class="text-center" style="width: 50px; min-width: 50px;">#</th>
                                        <th style="width: 200px; min-width: 200px;">File Name</th>
                                        @foreach (var field in SelectedFields.OrderBy(f => f))
                                        {
                                            var isNumeric = IsNumericField(field);
                                            var hasSumEnabled = SumEnabledFields.Contains(field);

                                            <th class="@(isNumeric ? "text-end" : "text-start")"
                                                style="min-width: @GetColumnWidth(field);">
                                                <div class="d-flex align-items-center @(isNumeric ? "justify-content-end" : "justify-content-start")">
                                                    <span>@field</span>
                                                    @if (hasSumEnabled)
                                                    {
                                                        <i class="bi bi-calculator text-warning ms-2" title="SUM enabled"></i>
                                                    }
                                                </div>
                                            </th>
                                        }
                                        <th class="text-center" style="width: 80px; min-width: 80px;">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (result, index) in Results.Select((r, i) => (r, i)))
                                    {
                                        var isError = result.ContainsKey("Error");
                                        var fileName = result.GetValueOrDefault("FileName", $"File_{index + 1}");

                                        <tr class="@(isError ? "table-danger" : "")">
                                            <td class="text-center text-muted small fw-bold">@(index + 1)</td>
                                            <td class="file-name-cell">
                                                <div class="text-truncate" title="@fileName">
                                                    <i class="bi bi-file-earmark me-1"></i>
                                                    @GetDisplayFileName(fileName)
                                                </div>
                                                @if (result.ContainsKey("ProcessedAt"))
                                                {
                                                    <small class="text-muted d-block">
                                                        @FormatProcessedTime(result["ProcessedAt"])
                                                    </small>
                                                }
                                            </td>

                                            @foreach (var field in SelectedFields.OrderBy(f => f))
                                            {
                                                var value = result.GetValueOrDefault(field, "");
                                                var isNumeric = IsNumericField(field);
                                                var isEmpty = string.IsNullOrWhiteSpace(value);

                                                <td class="@(isNumeric ? "text-end" : "text-start") field-data-cell"
                                                    title="@(isEmpty ? "No data" : value)">
                                                    @if (isEmpty)
                                                    {
                                                        <span class="text-muted fst-italic">—</span>
                                                    }
                                                    else if (isNumeric && TryParseNumber(value, out var numValue))
                                                    {
                                                        <span class="text-success fw-bold">@FormatNumber(numValue, field)</span>
                                                    }
                                                    else
                                                    {
                                                        <div class="field-content">
                                                            @value
                                                        </div>
                                                    }
                                                </td>
                                            }

                                            <td class="text-center">
                                                @if (isError)
                                                {
                                                    <i class="bi bi-x-circle text-danger fs-5"
                                                       title="@result.GetValueOrDefault("Error", "Processing failed")"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-check-circle text-success fs-5" title="Successfully processed"></i>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>

                                @* Summary Footer (if SUM fields enabled) *@
                                @if (SumEnabledFields.Any() && SuccessfulResults.Any())
                                {
                                    <tfoot class="table-success">
                                        <tr class="fw-bold">
                                            <td class="text-center">
                                                <i class="bi bi-calculator"></i>
                                            </td>
                                            <td>
                                                <strong>TOTALS</strong>
                                                <small class="text-muted d-block fw-normal">@SuccessfulResults.Count files</small>
                                            </td>
                                            @foreach (var field in SelectedFields.OrderBy(f => f))
                                            {
                                                var hasSumEnabled = SumEnabledFields.Contains(field);
                                                var isNumeric = IsNumericField(field);

                                                <td class="@(isNumeric ? "text-end" : "text-start")">
                                                    @if (hasSumEnabled)
                                                    {
                                                        var sum = CalculateFieldSum(field);
                                                        var count = GetSuccessfulFieldCount(field);
                                                        <div>
                                                            <div class="text-success">@FormatNumber(sum, field)</div>
                                                            <small class="text-muted fw-normal">(@count values)</small>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">—</span>
                                                    }
                                                </td>
                                            }
                                            <td class="text-center">
                                                <small class="text-muted">SUM</small>
                                            </td>
                                        </tr>
                                    </tfoot>
                                }
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-table text-muted" style="font-size: 3rem;"></i>
                            <h5 class="text-muted mt-3">No Fields Selected</h5>
                            <p class="text-muted">Please select some fields to display in the table.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer bg-light">
                    <div class="d-flex justify-content-between w-100 align-items-center">
                        <div>
                            @if (SumEnabledFields.Any())
                            {
                                <span class="badge bg-success me-2">
                                    <i class="bi bi-calculator me-1"></i>@SumEnabledFields.Count SUM fields enabled
                                </span>
                            }
                            <span class="text-muted small">
                                <i class="bi bi-info-circle me-1"></i>
                                Showing @SelectedFields.Count selected fields across @Results.Count files
                            </span>
                        </div>
                        <div>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                <i class="bi bi-x-lg me-1"></i>Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .results-wide-table {
        font-size: 0.9rem;
    }

    .results-wide-table th {
        background-color: #343a40 !important;
        color: white !important;
        padding: 0.75rem 0.5rem;
        font-weight: 600;
        border: 1px solid #495057;
        vertical-align: middle;
    }

    .results-wide-table td {
        padding: 0.75rem 0.5rem;
        border: 1px solid #dee2e6;
        vertical-align: top;
        max-width: 300px;
    }

    .field-data-cell {
        word-wrap: break-word;
        white-space: normal;
    }

    .field-content {
        max-height: 100px;
        overflow-y: auto;
        padding: 2px 0;
        line-height: 1.4;
    }

    .file-name-cell {
        max-width: 200px;
        word-wrap: break-word;
    }

    .table-container {
        max-height: calc(100vh - 200px);
        overflow: auto;
    }

    .sticky-top {
        position: sticky;
        top: 0;
        z-index: 10;
    }

    /* Custom scrollbar for field content */
    .field-content::-webkit-scrollbar {
        width: 4px;
    }

    .field-content::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .field-content::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 2px;
    }

    .field-content::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
</style>

@code {
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public List<Dictionary<string, string>>? Results { get; set; }
    [Parameter] public HashSet<string> SelectedFields { get; set; } = new();
    [Parameter] public HashSet<string> SumEnabledFields { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }

    // Computed properties
    private List<Dictionary<string, string>> SuccessfulResults =>
        Results?.Where(r => !r.ContainsKey("Error")).ToList() ?? new();

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    // Helper methods
    private bool IsNumericField(string fieldName)
    {
        var numericFields = new[] { "Amount", "Total", "Fee", "Cost", "Balance", "Credit", "Debit", "Sum", "Value", "Price" };
        return numericFields.Any(nf => fieldName.Contains(nf, StringComparison.OrdinalIgnoreCase)) ||
               fieldName.EndsWith("Amount", StringComparison.OrdinalIgnoreCase) ||
               fieldName.EndsWith("Total", StringComparison.OrdinalIgnoreCase) ||
               fieldName.EndsWith("Fee", StringComparison.OrdinalIgnoreCase);
    }

    private string GetColumnWidth(string fieldName)
    {
        // Set column widths based on field type
        return fieldName.ToLower() switch
        {
            var f when f.Contains("memo") || f.Contains("note") || f.Contains("subject") => "400px",
            var f when f.Contains("to") || f.Contains("from") || f.Contains("account") => "250px",
            var f when f.Contains("date") || f.Contains("time") => "150px",
            var f when IsNumericField(f) => "120px",
            _ => "200px"
        };
    }

    private string GetDisplayFileName(string fileName)
    {
        if (string.IsNullOrEmpty(fileName)) return "Unknown";

        try
        {
            // Remove file extension and truncate if too long
            var nameWithoutExt = Path.GetFileNameWithoutExtension(fileName);
            return nameWithoutExt.Length > 30 ? nameWithoutExt.Substring(0, 30) + "..." : nameWithoutExt;
        }
        catch
        {
            return fileName.Length > 30 ? fileName.Substring(0, 30) + "..." : fileName;
        }
    }

    private bool TryParseNumber(string value, out decimal number)
    {
        number = 0;
        if (string.IsNullOrWhiteSpace(value)) return false;

        // Clean the value: remove currency symbols, commas, extra spaces
        var cleanValue = value.Trim()
            .Replace("$", "")
            .Replace("¥", "")
            .Replace("€", "")
            .Replace("£", "")
            .Replace("฿", "")
            .Replace(",", "")
            .Replace(" ", "");

        return decimal.TryParse(cleanValue, NumberStyles.Number | NumberStyles.Currency, CultureInfo.InvariantCulture, out number);
    }

    private string FormatNumber(decimal value, string fieldName)
    {
        // Format based on field name or value
        if (fieldName.Contains("Amount", StringComparison.OrdinalIgnoreCase) ||
            fieldName.Contains("Total", StringComparison.OrdinalIgnoreCase) ||
            fieldName.Contains("Fee", StringComparison.OrdinalIgnoreCase))
        {
            return value.ToString("N2"); // Two decimal places with thousands separator
        }

        if (value % 1 == 0) // Whole number
        {
            return value.ToString("N0"); // No decimal places
        }

        return value.ToString("N2"); // Default to 2 decimal places
    }

    private decimal CalculateFieldSum(string fieldName)
    {
        return SuccessfulResults
            .Where(r => r.ContainsKey(fieldName))
            .Select(r => TryParseNumber(r[fieldName], out var num) ? num : 0)
            .Sum();
    }

    private int GetSuccessfulFieldCount(string fieldName)
    {
        return SuccessfulResults
            .Count(r => r.ContainsKey(fieldName) && !string.IsNullOrWhiteSpace(r[fieldName]) && TryParseNumber(r[fieldName], out _));
    }

    private string FormatProcessedTime(string processedAtString)
    {
        if (DateTime.TryParse(processedAtString, out var processedAt))
        {
            var now = DateTime.Now;
            var diff = now - processedAt;

            if (diff.TotalMinutes < 60)
            {
                return $"{(int)diff.TotalMinutes}m ago";
            }
            else if (diff.TotalHours < 24)
            {
                return $"{(int)diff.TotalHours}h ago";
            }
            else if (diff.TotalDays < 7)
            {
                return $"{(int)diff.TotalDays}d ago";
            }
            else
            {
                return processedAt.ToString("MMM dd, HH:mm");
            }
        }

        return processedAtString;
    }
}