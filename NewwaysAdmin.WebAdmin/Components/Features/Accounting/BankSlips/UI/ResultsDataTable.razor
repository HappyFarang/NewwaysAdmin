@* NewwaysAdmin.WebAdmin/Components/Features/Accounting/BankSlips/UI/ResultsDataTable.razor *@
@using System.Globalization
@namespace NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.UI

@if (Results?.Any() == true && SelectedFields.Any())
{
    <div class="results-data-table mb-3">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        <i class="bi bi-table me-2"></i>
                        Processing Results (@SuccessfulResults.Count/@Results.Count successful)
                    </h6>
                    @if (SumEnabledFields.Any())
                    {
                        <span class="badge bg-success">
                            <i class="bi bi-calculator me-1"></i>@SumEnabledFields.Count SUM fields
                        </span>
                    }
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-sm table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="text-center" style="width: 40px;">#</th>
                                @foreach (var field in SelectedFields.OrderBy(f => f))
                                {
                                    var isNumeric = IsNumericField(field);
                                    var hasSumEnabled = SumEnabledFields.Contains(field);

                                    <th class="@(isNumeric ? "text-end" : "text-start")" style="min-width: 120px;">
                                        @field
                                        @if (hasSumEnabled)
                                        {
                                            <i class="bi bi-calculator text-success ms-1" title="SUM enabled"></i>
                                        }
                                    </th>
                                }
                                <th style="width: 60px;">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (result, index) in Results.Select((r, i) => (r, i)))
                            {
                                var isError = result.ContainsKey("Error");

                                <tr class="@(isError ? "table-danger" : "")">
                                    <td class="text-center text-muted small">@(index + 1)</td>

                                    @foreach (var field in SelectedFields.OrderBy(f => f))
                                    {
                                        var value = result.GetValueOrDefault(field, "");
                                        var isNumeric = IsNumericField(field);
                                        var isEmpty = string.IsNullOrWhiteSpace(value);

                                        <td class="@(isNumeric ? "text-end" : "text-start") @(isEmpty ? "text-muted" : "")"
                                            title="@(isEmpty ? "No data" : value)">
                                            @if (isEmpty)
                                            {
                                                <em>—</em>
                                            }
                                            else if (isNumeric && TryParseNumber(value, out var numValue))
                                            {
                                                <span class="text-success fw-bold">@FormatNumber(numValue, field)</span>
                                            }
                                            else
                                            {
                                                <span class="text-truncate d-inline-block" style="max-width: 200px;">
                                                    @value
                                                </span>
                                            }
                                        </td>
                                    }

                                    <td class="text-center">
                                        @if (isError)
                                        {
                                            <i class="bi bi-x-circle text-danger" title="@result.GetValueOrDefault("Error", "Processing failed")"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-check-circle text-success" title="Successfully processed"></i>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>

                        @* Summary Footer (if SUM fields enabled) *@
                        @if (SumEnabledFields.Any() && SuccessfulResults.Any())
                        {
                            <tfoot class="table-success">
                                <tr class="fw-bold">
                                    <td class="text-center">
                                        <i class="bi bi-calculator"></i>
                                    </td>
                                    @foreach (var field in SelectedFields.OrderBy(f => f))
                                    {
                                        var hasSumEnabled = SumEnabledFields.Contains(field);
                                        var isNumeric = IsNumericField(field);

                                        <td class="@(isNumeric ? "text-end" : "text-start")">
                                            @if (hasSumEnabled)
                                            {
                                                var sum = CalculateFieldSum(field);
                                                var count = GetSuccessfulFieldCount(field);
                                                <div>
                                                    <div class="text-success">@FormatNumber(sum, field)</div>
                                                    <small class="text-muted fw-normal">(@count values)</small>
                                                </div>
                                            }
                                            else if (isNumeric)
                                            {
                                                <span class="text-muted">—</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">—</span>
                                            }
                                        </td>
                                    }
                                    <td class="text-center">
                                        <small class="text-muted">TOTALS</small>
                                    </td>
                                </tr>
                            </tfoot>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .results-data-table .table th {
        border-top: none;
        font-weight: 600;
        font-size: 0.85rem;
        padding: 0.75rem 0.5rem;
        white-space: nowrap;
    }

    .results-data-table .table td {
        padding: 0.5rem;
        font-size: 0.85rem;
        vertical-align: middle;
    }

    .results-data-table .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .results-data-table .text-truncate {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
</style>

@code {
    [Parameter] public List<Dictionary<string, string>>? Results { get; set; }
    [Parameter] public HashSet<string> SelectedFields { get; set; } = new();
    [Parameter] public HashSet<string> SumEnabledFields { get; set; } = new();

    // Computed properties
    private List<Dictionary<string, string>> SuccessfulResults =>
        Results?.Where(r => !r.ContainsKey("Error")).ToList() ?? new();

    // Helper methods
    private bool IsNumericField(string fieldName)
    {
        var numericFields = new[] { "Amount", "Total", "Fee", "Cost", "Balance", "Credit", "Debit", "Sum", "Value", "Price" };
        return numericFields.Any(nf => fieldName.Contains(nf, StringComparison.OrdinalIgnoreCase)) ||
               fieldName.EndsWith("Amount", StringComparison.OrdinalIgnoreCase) ||
               fieldName.EndsWith("Total", StringComparison.OrdinalIgnoreCase) ||
               fieldName.EndsWith("Fee", StringComparison.OrdinalIgnoreCase);
    }

    private bool TryParseNumber(string value, out decimal number)
    {
        number = 0;
        if (string.IsNullOrWhiteSpace(value)) return false;

        // Clean the value: remove currency symbols, commas, extra spaces
        var cleanValue = value.Trim()
            .Replace("$", "")
            .Replace("¥", "")
            .Replace("€", "")
            .Replace("£", "")
            .Replace("฿", "")
            .Replace(",", "")
            .Replace(" ", "");

        return decimal.TryParse(cleanValue, NumberStyles.Number | NumberStyles.Currency, CultureInfo.InvariantCulture, out number);
    }

    private string FormatNumber(decimal value, string fieldName)
    {
        // Format based on field name or value
        if (fieldName.Contains("Amount", StringComparison.OrdinalIgnoreCase) ||
            fieldName.Contains("Total", StringComparison.OrdinalIgnoreCase) ||
            fieldName.Contains("Fee", StringComparison.OrdinalIgnoreCase))
        {
            return value.ToString("N2"); // Two decimal places with thousands separator
        }

        if (value % 1 == 0) // Whole number
        {
            return value.ToString("N0"); // No decimal places
        }

        return value.ToString("N2"); // Default to 2 decimal places
    }

    private decimal CalculateFieldSum(string fieldName)
    {
        return SuccessfulResults
            .Where(r => r.ContainsKey(fieldName))
            .Select(r => TryParseNumber(r[fieldName], out var num) ? num : 0)
            .Sum();
    }

    private int GetSuccessfulFieldCount(string fieldName)
    {
        return SuccessfulResults
            .Count(r => r.ContainsKey(fieldName) && !string.IsNullOrWhiteSpace(r[fieldName]) && TryParseNumber(r[fieldName], out _));
    }
}