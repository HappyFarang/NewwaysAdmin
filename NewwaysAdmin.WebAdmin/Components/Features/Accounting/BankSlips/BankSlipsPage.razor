@page "/accounting/bankslips"
@using NewwaysAdmin.SharedModels.BankSlips
@using NewwaysAdmin.WebAdmin.Services.BankSlips
@using NewwaysAdmin.WebAdmin.Models.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Collections
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Processing
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Results
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Export
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Shared
@using NewwaysAdmin.SharedModels.Services.Ocr
@using NewwaysAdmin.WebAdmin.Services.BankSlips.Templates
@using NewwaysAdmin.WebAdmin.Components.Features.Accounting.BankSlips.Templates.Export

@inject OcrFieldAnalyzerService FieldAnalyzer

@* 🚀 UPDATED: Direct concrete class injection + PatternManagementService *@
@inject BankSlipOcrService BankSlipService
@inject PatternManagementService PatternService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<BankSlipsPage> Logger
@inject BankSlipExportService ExportService

<PageTitle>Bank Slip OCR - Modern Pattern System</PageTitle>

<div class="container-fluid p-4">

    @* Header Section *@
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2>
                    <i class="bi bi-bank2 me-2"></i>
                    Bank Slip Processing
                    <small class="text-muted fs-6">Modern Dictionary-Based OCR</small>
                </h2>

                @if (!string.IsNullOrEmpty(_currentUsername))
                {
                    <div class="text-muted">
                        <i class="bi bi-person-circle me-1"></i>
                        @_currentUsername
                        @if (_isAdmin)
                        {
                            <span class="badge bg-primary ms-2">Admin</span>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    @* Status Messages *@
    <StatusMessage Message="@_statusMessage"
                   MessageType="@_statusMessageType"
                   OnClear="ClearStatusMessage" />

    @* Main Content Grid *@
    <div class="row">

        @* Left Panel - Collection Management *@
        <div class="col-md-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-collection me-2"></i>Collections
                    </h5>
                    <button class="btn btn-primary btn-sm" @onclick="HandleCreateCollection" disabled="@_isLoadingCollections">
                        <i class="bi bi-plus-circle me-1"></i>New
                    </button>
                </div>
                <div class="card-body">
                    @if (_isLoadingCollections)
                    {
                        <div class="text-center py-3">
                            <div class="spinner-border spinner-border-sm me-2"></div>
                            Loading collections...
                        </div>
                    }
                    else if (!_availableCollections.Any())
                    {
                        <div class="text-center py-3 text-muted">
                            <i class="bi bi-inbox display-4"></i>
                            <p class="mt-2">No collections yet</p>
                            <small>Create your first collection to get started</small>
                        </div>
                    }
                    else
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var collection in _availableCollections)
                            {
                                <div class="list-group-item @(collection.Id == _selectedCollection?.Id ? "active" : "")"
                                     style="cursor: pointer;" @onclick="() => HandleCollectionSelected(collection)">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <div class="d-flex align-items-center">
                                                <i class="@collection.FormatIcon me-2"></i>
                                                <strong>@collection.Name</strong>
                                            </div>
                                            <small class="text-muted">@collection.FormatDisplayName</small>
                                            @if (!string.IsNullOrEmpty(collection.Description))
                                            {
                                                <div><small>@collection.Description</small></div>
                                            }
                                        </div>
                                        <div class="dropdown">
                                            <button class="btn btn-link btn-sm p-0" data-bs-toggle="dropdown">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <button class="dropdown-item" @onclick="() => HandleEditCollection(collection)">
                                                        <i class="bi bi-pencil me-2"></i>Edit
                                                    </button>
                                                </li>
                                                <li>
                                                    <button class="dropdown-item text-danger" @onclick="() => HandleDeleteCollection(collection.Id)">
                                                        <i class="bi bi-trash me-2"></i>Delete
                                                    </button>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        @* Center Panel - Processing Controls *@
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-gear me-2"></i>Processing
                    </h5>
                </div>
                <div class="card-body">
                    @if (_selectedCollection == null)
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="bi bi-arrow-left display-6"></i>
                            <p class="mt-2">Select a collection first</p>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">Collection:</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="@_selectedCollection.FormatIcon"></i></span>
                                <input type="text" class="form-control" value="@_selectedCollection.Name" readonly />
                            </div>
                            <small class="text-muted">@_selectedCollection.FormatDisplayName</small>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <label class="form-label">Start Date:</label>
                                <input type="date" class="form-control" @bind="_startDate" disabled="@_isProcessing" />
                            </div>
                            <div class="col-6">
                                <label class="form-label">End Date:</label>
                                <input type="date" class="form-control" @bind="_endDate" disabled="@_isProcessing" />
                            </div>
                        </div>

                        <div class="d-grid">
                            <button class="btn btn-success" @onclick="HandleStartProcessing" disabled="@_isProcessing">
                                @if (_isProcessing)
                                {
                                    <div class="spinner-border spinner-border-sm me-2"></div>
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <i class="bi bi-play-circle me-2"></i>
                                    <span>Start Processing</span>
                                }
                            </button>
                        </div>

                        @if (_isProcessing)
                        {
                            <div class="mt-3">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                         style="width: @(_processingProgress.ProgressPercentage)%"
                                         aria-valuenow="@_processingProgress.ProcessedFiles"
                                         aria-valuemin="0"
                                         aria-valuemax="@_processingProgress.TotalFiles">
                                    </div>
                                </div>
                                <small class="text-muted">
                                    @_processingProgress.ProcessedFiles / @_processingProgress.TotalFiles files
                                    @if (!string.IsNullOrEmpty(_processingProgress.CurrentFileName))
                                    {
                                        <span> - @_processingProgress.CurrentFileName</span>
                                    }
                                </small>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        @* Right Panel - Results & Export (SIMPLIFIED) *@
        <div class="col-md-8">
            <ResultsViewer Results="_lastResults" OnExportRequested="HandleShowExport" />
        </div>
    </div>
</div>

@* Collection Management Modal *@
@if (_showCollectionModal && _editingCollection != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(_isEditMode ? "Edit Collection" : "Create Collection")
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => _showCollectionModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name *</label>
                        <input type="text" class="form-control" @bind="_editingCollection.Name" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="2" @bind="_editingCollection.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Format Type *</label>
                        <div class="input-group">
                            <select class="form-select" @bind="_editingCollection.FormatName" @bind:after="OnFormatNameChangedAsync" disabled="@_isLoadingFormats">
                                <option value="">@(_isLoadingFormats ? "Loading formats..." : "Select format...")</option>
                                @if (_availableFormats != null)
                                {
                                    @foreach (var format in _availableFormats)
                                    {
                                        <option value="@format">@format</option>
                                    }
                                }
                            </select>
                            <button type="button" class="btn btn-outline-secondary" @onclick="RefreshFormats" disabled="@_isLoadingFormats">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                        @if (_availableFormats != null && !_availableFormats.Any())
                        {
                            <small class="text-warning">
                                <i class="bi bi-exclamation-triangle me-1"></i>
                                No patterns found. Create patterns first using Settings → OCR Analyzer.
                            </small>
                        }
                    </div>

                    @* 🚀 NEW: Show pattern structure information *@
                    @if (!string.IsNullOrEmpty(_editingCollection.FormatName))
                    {
                        <div class="mb-3" style="background: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #007bff;">
                            <h6 class="mb-2">
                                <i class="bi bi-diagram-3 me-1"></i>
                                Pattern Structure: BankSlips → @_editingCollection.FormatName
                            </h6>

                            @if (_isLoadingPatternKeys)
                            {
                                <div class="text-muted">
                                    <div class="spinner-border spinner-border-sm me-2"></div>
                                    Loading pattern keys...
                                </div>
                            }
                            else if (_patternKeys != null && _patternKeys.Any())
                            {
                                <div>
                                    <small class="text-muted">Available pattern keys:</small>
                                    <div class="mt-1">
                                        @foreach (var key in _patternKeys)
                                        {
                                            <span class="badge bg-primary me-1 mb-1">@key</span>
                                        }
                                    </div>
                                    <small class="text-success">
                                        <i class="bi bi-check-circle me-1"></i>
                                        @_patternKeys.Count pattern(s) available for processing
                                    </small>
                                </div>
                            }
                            else if (_patternKeys != null)
                            {
                                <small class="text-danger">
                                    <i class="bi bi-exclamation-triangle me-1"></i>
                                    No pattern keys found for this format. Create patterns using OCR Analyzer.
                                </small>
                            }
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">Source Directory *</label>
                        <input type="text" class="form-control" @bind="_editingCollection.SourceDirectory" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Output Directory *</label>
                        <input type="text" class="form-control" @bind="_editingCollection.OutputDirectory" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Google Vision Credentials Path</label>
                        <input type="text" class="form-control" @bind="_editingCollection.CredentialsPath" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showCollectionModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleSaveCollection">
                        @(_isEditMode ? "Update" : "Create")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@* Export Modal *@
@if (_showExportModal && _lastResults != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Export Results</h5>
                    <button type="button" class="btn-close" @onclick="() => _showExportModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Export @_lastResults.Count processing results to Google Sheets?</p>

                    @if (_fieldAnalysisResult != null)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            @_fieldAnalysisResult.GetSummary()
                        </div>
                    }

                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Results will be exported as flexible dictionary data with all extracted fields.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showExportModal = false">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleExportToSheets">
                        <i class="bi bi-download me-1"></i>Export to Sheets
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@* Export Preview Section - Show after processing results *@
@if (_lastResults != null && _lastResults.Any() && _fieldAnalysisResult != null)
{
    <div class="row mt-4">
        <div class="col-12">
            <ExportPreviewTable 
                AnalysisResult="_fieldAnalysisResult"
                SessionResults="_lastResults"
                CustomTickBoxColumns="@(new List<ExportPreviewTable.TickBoxColumnConfig>())"
                ShowFormulaRow="true"
                MaxPreviewRows="5"
                OnSelectedFieldsChanged="OnSelectedFieldsChanged" />
        </div>
    </div>
}

@code {
    // User management
    private string _currentUsername = string.Empty;
    private bool _isAdmin = false;

    // Collections
    private List<SlipCollection> _availableCollections = new();
    private SlipCollection? _selectedCollection;
    private bool _isLoadingCollections = true;

    // Collection editing
    private bool _showCollectionModal = false;
    private SlipCollection? _editingCollection;
    private bool _isEditMode = false;
    private List<string>? _availableFormats; // 🆕 NEW: Dynamic format loading
    private bool _isLoadingFormats = false; // 🆕 NEW: Loading state
    private List<string>? _patternKeys; // 🆕 NEW: Pattern keys for selected format
    private bool _isLoadingPatternKeys = false; // 🆕 NEW: Loading state for pattern keys

    // Processing - 🚀 UPDATED: Now uses Dictionary results!
    private DateTime _startDate = DateTime.Today.AddMonths(-1);
    private DateTime _endDate = DateTime.Today;
    private bool _isProcessing = false;
    private List<Dictionary<string, string>>? _lastResults; // 🚀 NEW: Dictionary results
    private ProcessingProgress _processingProgress = new();

    // Export
    private bool _showExportModal = false;
    private FieldAnalysisResult? _fieldAnalysisResult;

    // Status management
    private string _statusMessage = string.Empty;
    private string _statusMessageType = "info";

    // 🆕 NEW: Field selection for results display with SUM functionality
    private HashSet<string> _selectedDisplayFields = new(); // Remove default values - let auto-selection handle it
    private HashSet<string> _sumEnabledFields = new(); // Track which fields have SUM enabled
    private List<string> _availableResultFields = new(); // All available fields from last processing
    private const int MAX_DISPLAY_FIELDS = 4;

    private async Task OnSelectedFieldsChanged(List<string> selectedFields)
    {
        Logger.LogInformation("📋 Selected fields changed: {FieldCount} fields selected", selectedFields.Count);
        Logger.LogDebug("Selected fields: {Fields}", string.Join(", ", selectedFields));

        // TODO: Store selected fields for actual export
        // This will be used when we implement the export services
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("🚀 BankSlipsPage: Initializing modern dictionary-based processing");

        try
        {
            await LoadCurrentUser();
            await LoadAvailableCollections();

            Logger.LogInformation("✅ BankSlipsPage: Initialization complete - User: {Username}, Collections: {Count}",
                _currentUsername, _availableCollections.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "💥 BankSlipsPage: Error during initialization");
            SetStatusMessage($"Initialization error: {ex.Message}", "error");
        }
    }

    #region User Management

    private async Task LoadCurrentUser()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _currentUsername = authState.User.Identity?.Name ?? "anonymous";
        _isAdmin = authState.User.IsInRole("Admin");

        Logger.LogDebug("Loaded user: {Username}, IsAdmin: {IsAdmin}", _currentUsername, _isAdmin);
    }

    #endregion

    #region Collection Management

    private async Task LoadAvailableCollections()
    {
        try
        {
            _isLoadingCollections = true;
            StateHasChanged();

            _availableCollections = await BankSlipService.GetUserCollectionsAsync(_currentUsername);

            // Migrate any legacy collections to pattern-based system
            foreach (var collection in _availableCollections)
            {
                if (string.IsNullOrEmpty(collection.DocumentType) || string.IsNullOrEmpty(collection.FormatName))
                {
                    collection.MigrateToPatternBased();
                    Logger.LogInformation("Auto-migrated collection {CollectionName} to pattern-based system", collection.Name);
                }
            }

            Logger.LogInformation("Loaded {Count} collections for user {Username}", _availableCollections.Count, _currentUsername);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading collections for user {Username}", _currentUsername);
            SetStatusMessage($"Error loading collections: {ex.Message}", "error");
        }
        finally
        {
            _isLoadingCollections = false;
            StateHasChanged();
        }
    }

    private void HandleCollectionSelected(SlipCollection collection)
    {
        _selectedCollection = collection;
        ClearStatusMessage();
        Logger.LogInformation("Selected collection: {CollectionName} ({DocumentType}/{FormatName})",
            collection.Name, collection.DocumentType, collection.FormatName);
    }

    private void HandleCreateCollection()
    {
        _editingCollection = new SlipCollection
            {
                Name = "",
                Description = "",
                SourceDirectory = "",
                OutputDirectory = "",
                CredentialsPath = @"C:\Keys\purrfectocr-db2d9d796b58.json",
                IsActive = true,
                DocumentType = "BankSlips", // Always BankSlips for this page
                FormatName = "", // Will be selected from dynamic dropdown
                ProcessingSettings = new ProcessingParameters()
            };
        _isEditMode = false;
        _showCollectionModal = true;

        // 🚀 NEW: Load available formats when creating new collection
        _ = LoadAvailableFormatsAsync();
    }

    private void HandleEditCollection(SlipCollection collection)
    {
        // Ensure collection is migrated before editing
        collection.MigrateToPatternBased();

        _editingCollection = new SlipCollection
            {
                Id = collection.Id,
                Name = collection.Name,
                Description = collection.Description,
                SourceDirectory = collection.SourceDirectory,
                OutputDirectory = collection.OutputDirectory,
                CredentialsPath = collection.CredentialsPath,
                IsActive = collection.IsActive,
                DocumentType = collection.DocumentType,
                FormatName = collection.FormatName,
                ProcessingSettings = collection.ProcessingSettings ?? new ProcessingParameters()
            };
        _isEditMode = true;
        _showCollectionModal = true;

        // 🚀 NEW: Load available formats when editing collection
        _ = LoadAvailableFormatsAsync();

        // 🚀 NEW: If collection already has a format, load its pattern keys
        if (!string.IsNullOrEmpty(_editingCollection.FormatName))
        {
            _ = LoadPatternKeysAsync(_editingCollection.FormatName);
        }
    }

    private async Task LoadAvailableFormatsAsync()
    {
        try
        {
            _isLoadingFormats = true;
            StateHasChanged();

            Logger.LogInformation("Loading available patterns for DocumentType: BankSlips");

            // 🚀 NEW: Get actual patterns from OCR system instead of hardcoded list
            _availableFormats = await PatternService.GetSubCollectionNamesAsync("BankSlips");

            Logger.LogInformation("Loaded {Count} available formats: {Formats}",
                _availableFormats.Count, string.Join(", ", _availableFormats));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available formats");
            _availableFormats = new List<string>(); // Empty list on error
            SetStatusMessage($"Error loading formats: {ex.Message}", "warning");
        }
        finally
        {
            _isLoadingFormats = false;
            StateHasChanged();
        }
    }

    private async Task RefreshFormats()
    {
        Logger.LogInformation("Manually refreshing available formats...");
        await LoadAvailableFormatsAsync();
    }

    private async Task OnFormatNameChangedAsync()
    {
        var selectedFormat = _editingCollection?.FormatName ?? "";

        // Load pattern keys for the selected format
        if (!string.IsNullOrEmpty(selectedFormat))
        {
            Logger.LogInformation("Format changed to {Format}, loading pattern keys...", selectedFormat);
            await LoadPatternKeysAsync(selectedFormat);
        }
        else
        {
            _patternKeys = null;
        }

        StateHasChanged();
    }

    private void ToggleDisplayField(string fieldName)
    {
        if (_selectedDisplayFields.Contains(fieldName))
        {
            // Remove field and its SUM setting
            _selectedDisplayFields.Remove(fieldName);
            _sumEnabledFields.Remove(fieldName);
            Logger.LogDebug("Removed display field: {Field}", fieldName);
        }
        else if (_selectedDisplayFields.Count < MAX_DISPLAY_FIELDS)
        {
            // Add field
            _selectedDisplayFields.Add(fieldName);
            Logger.LogDebug("Added display field: {Field}", fieldName);
        }

        Logger.LogInformation("Display fields updated: {Fields}", string.Join(", ", _selectedDisplayFields));
        StateHasChanged();
    }

    private void ToggleSumField(string fieldName)
    {
        if (!_selectedDisplayFields.Contains(fieldName) || !IsNumericFieldName(fieldName))
            return;

        if (_sumEnabledFields.Contains(fieldName))
        {
            _sumEnabledFields.Remove(fieldName);
        }
        else
        {
            _sumEnabledFields.Add(fieldName);
        }

        Logger.LogInformation("SUM toggled for {Field}: {Enabled}", fieldName, _sumEnabledFields.Contains(fieldName));
        StateHasChanged();
    }

    private void UpdateAvailableResultFields(List<Dictionary<string, string>> results)
    {
        Logger.LogInformation("🔍 UpdateAvailableResultFields called with {Count} results", results.Count);

        if (!results.Any())
        {
            _availableResultFields = new List<string>();
            Logger.LogWarning("🔍 No results provided to UpdateAvailableResultFields");
            return;
        }

        // 🔧 DEBUG: Log all raw fields before filtering
        var allRawFields = results
            .Where(r => !r.ContainsKey("Error"))
            .SelectMany(r => r.Keys)
            .Distinct()
            .OrderBy(f => f)
            .ToList();

        Logger.LogInformation("🔍 RAW FIELDS BEFORE FILTERING ({Count}): {Fields}",
            allRawFields.Count, string.Join(", ", allRawFields));

        // 🔧 DEBUG: Show which fields get filtered out and why
        var filteredOut = new List<string>();
        var fieldReasons = new Dictionary<string, string>();

        foreach (var field in allRawFields)
        {
            if (field.StartsWith("_"))
            {
                filteredOut.Add(field);
                fieldReasons[field] = "starts with underscore";
            }
            else if (field == "FileName")
            {
                filteredOut.Add(field);
                fieldReasons[field] = "is FileName";
            }
            else if (field == "ProcessedAt")
            {
                filteredOut.Add(field);
                fieldReasons[field] = "is ProcessedAt";
            }
            else if (field == "ProcessedBy")
            {
                filteredOut.Add(field);
                fieldReasons[field] = "is ProcessedBy";
            }
            else if (field == "CollectionName")
            {
                filteredOut.Add(field);
                fieldReasons[field] = "is CollectionName";
            }
            else if (field == "DocumentType")
            {
                filteredOut.Add(field);
                fieldReasons[field] = "is DocumentType";
            }
            else if (field == "FormatName")
            {
                filteredOut.Add(field);
                fieldReasons[field] = "is FormatName";
            }
        }

        if (filteredOut.Any())
        {
            Logger.LogInformation("🔍 FILTERED OUT FIELDS ({Count}): {Details}",
                filteredOut.Count,
                string.Join(", ", filteredOut.Select(f => $"{f}({fieldReasons[f]})")));
        }

        // Extract all unique field names from successful results (excluding metadata)
        var allFields = results
            .Where(r => !r.ContainsKey("Error"))
            .SelectMany(r => r.Keys)
            .Where(key =>
                !key.StartsWith("_") &&
                key != "FileName" &&
                key != "ProcessedAt" &&
                key != "ProcessedBy" &&
                key != "CollectionName" &&
                key != "DocumentType" &&
                key != "FormatName")
            .Distinct()
            .OrderBy(f => f)
            .ToList();

        Logger.LogInformation("🔍 FIELDS AFTER FILTERING ({Count}): {Fields}",
            allFields.Count, string.Join(", ", allFields));

        // 🔧 DEBUG: Check field population rates
        var fieldStats = new Dictionary<string, int>();
        foreach (var field in allFields)
        {
            var populatedCount = results
                .Where(r => !r.ContainsKey("Error"))
                .Count(r => r.ContainsKey(field) && !string.IsNullOrWhiteSpace(r[field]));
            fieldStats[field] = populatedCount;
        }

        Logger.LogInformation("🔍 FIELD POPULATION STATS: {Stats}",
            string.Join(", ", fieldStats.Select(kvp => $"{kvp.Key}:{kvp.Value}/{results.Count}")));

        // 🔧 DEBUG: Show empty/missing fields
        var emptyFields = allFields.Where(f => fieldStats[f] == 0).ToList();
        if (emptyFields.Any())
        {
            Logger.LogWarning("🔍 EMPTY FIELDS (no data extracted): {Fields}",
                string.Join(", ", emptyFields));
        }

        _availableResultFields = allFields;

        // Clean up selected fields - remove any that are no longer available
        _selectedDisplayFields = _selectedDisplayFields
            .Where(f => _availableResultFields.Contains(f))
            .ToHashSet();

        // Clean up SUM fields - remove any that are no longer selected
        _sumEnabledFields = _sumEnabledFields
            .Where(f => _selectedDisplayFields.Contains(f))
            .ToHashSet();

        // Auto-select fields only if none are currently selected
        if (!_selectedDisplayFields.Any() && _availableResultFields.Any())
        {
            var commonFields = new[] { "Date", "Amount", "Total", "Reference", "Memo", "To", "From", "Account" };

            foreach (var commonField in commonFields)
            {
                if (_selectedDisplayFields.Count >= MAX_DISPLAY_FIELDS) break;

                var matchingField = _availableResultFields.FirstOrDefault(f =>
                    f.Equals(commonField, StringComparison.OrdinalIgnoreCase) ||
                    f.Contains(commonField, StringComparison.OrdinalIgnoreCase));

                if (matchingField != null)
                {
                    _selectedDisplayFields.Add(matchingField);
                }
            }

            // Auto-enable SUM for numeric fields that were auto-selected
            var numericFields = _selectedDisplayFields.Where(f => IsNumericFieldName(f)).ToList();
            foreach (var numericField in numericFields.Take(2))
            {
                _sumEnabledFields.Add(numericField);
            }
        }

        Logger.LogInformation("✅ Available result fields: {Fields}", string.Join(", ", _availableResultFields));
        Logger.LogInformation("✅ Selected display fields: {Fields}", string.Join(", ", _selectedDisplayFields));
        Logger.LogInformation("✅ SUM enabled fields: {Fields}", string.Join(", ", _sumEnabledFields));
    }

    private async Task LoadPatternKeysAsync(string formatName)
    {
        try
        {
            _isLoadingPatternKeys = true;
            StateHasChanged();

            Logger.LogInformation("Loading pattern keys for BankSlips/{Format}", formatName);

            // 🚀 NEW: Get individual pattern keys for the selected format
            _patternKeys = await PatternService.GetSearchPatternNamesAsync("BankSlips", formatName);

            Logger.LogInformation("Loaded {Count} pattern keys for {Format}: {Keys}",
                _patternKeys?.Count ?? 0, formatName,
                _patternKeys != null ? string.Join(", ", _patternKeys) : "none");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading pattern keys for format {Format}", formatName);
            _patternKeys = new List<string>(); // Empty list on error
            SetStatusMessage($"Error loading pattern keys: {ex.Message}", "warning");
        }
        finally
        {
            _isLoadingPatternKeys = false;
            StateHasChanged();
        }
    }

    private async Task HandleSaveCollection()
    {
        try
        {
            if (_editingCollection == null) return;

            await BankSlipService.SaveCollectionAsync(_editingCollection, _currentUsername);
            await LoadAvailableCollections();

            _showCollectionModal = false;
            SetStatusMessage($"Collection {(_isEditMode ? "updated" : "created")} successfully", "success");

            Logger.LogInformation("Collection {Action}: {CollectionName}", _isEditMode ? "updated" : "created", _editingCollection.Name);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving collection");
            SetStatusMessage($"Error saving collection: {ex.Message}", "error");
        }
    }

    private async Task HandleDeleteCollection(string collectionId)
    {
        try
        {
            await BankSlipService.DeleteCollectionAsync(collectionId, _currentUsername);
            await LoadAvailableCollections();

            if (_selectedCollection?.Id == collectionId)
            {
                _selectedCollection = null;
            }

            SetStatusMessage("Collection deleted successfully", "success");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting collection {CollectionId}", collectionId);
            SetStatusMessage($"Error deleting collection: {ex.Message}", "error");
        }
    }

    #endregion

    #region Processing - 🚀 UPDATED: Modern Dictionary Flow

    private async Task HandleStartProcessing()
    {
        if (_selectedCollection == null)
        {
            SetStatusMessage("Please select a collection first", "warning");
            return;
        }

        try
        {
            _isProcessing = true;
            _processingProgress = new ProcessingProgress();
            ClearStatusMessage();
            StateHasChanged();

            Logger.LogInformation("🚀 Starting modern dictionary-based processing for collection {CollectionName}", _selectedCollection.Name);

            // Create simple progress reporter
            var progressReporter = new NewwaysAdmin.WebAdmin.Services.BankSlips.SimpleProgressReporter((processed, total, fileName) =>
            {
                _processingProgress = new ProcessingProgress
                    {
                        ProcessedFiles = processed,
                        TotalFiles = total,
                        CurrentFileName = fileName
                    };
                InvokeAsync(StateHasChanged);
            });

            // 🚀 NEW: Call modern method that returns Dictionary results
            _lastResults = await BankSlipService.ProcessSlipCollectionAsync(
                _selectedCollection.Id,
                _startDate,
                _endDate,
                _currentUsername,
                progressReporter);

            // 🆕 NEW: Always update available fields after processing
            UpdateAvailableResultFields(_lastResults);

            var successCount = _lastResults.Count(r => !r.ContainsKey("Error"));
            var totalCount = _lastResults.Count;

            SetStatusMessage($"Processing completed: {successCount}/{totalCount} files successful",
                successCount == totalCount ? "success" : "warning");

            Logger.LogInformation("✅ Modern processing completed: {SuccessCount}/{TotalCount} successful", successCount, totalCount);
            try
            {
                var collectionName = _selectedCollection?.Name ?? "Unknown";
                _fieldAnalysisResult = FieldAnalyzer.AnalyzeSessionFields(_lastResults, collectionName);
                Logger.LogInformation("📊 Field analysis completed: {Summary}", _fieldAnalysisResult.GetSummary());
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error analyzing fields for export preview");
            }

        }

        catch (Exception ex)
        {
            Logger.LogError(ex, "💥 Error during modern processing");
            SetStatusMessage($"Processing error: {ex.Message}", "error");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    #endregion

    #region Export - 🚀 UPDATED: Dictionary Export

    private void HandleShowExport()
    {
        _showExportModal = true;
    }

    private async Task HandleExportToSheets()
    {
        try
        {
            if (_lastResults == null || !_lastResults.Any())
            {
                SetStatusMessage("No results to export", "warning");
                return;
            }

            _showExportModal = false;

            // TODO: Update ExportService to handle Dictionary<string, string> results
            // For now, just show success message
            SetStatusMessage($"Export functionality will be updated to handle {_lastResults.Count} dictionary results", "info");

            Logger.LogInformation("📊 Dictionary export requested for {Count} results", _lastResults.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting results");
            SetStatusMessage($"Export error: {ex.Message}", "error");
        }
    }

    #endregion

    #region Field Selection and SUM Helper Methods

    private bool IsNumericFieldName(string fieldName)
    {
        var numericFields = new[] { "Amount", "Total", "Fee", "Cost", "Balance", "Credit", "Debit", "Sum", "Value", "Price" };
        return numericFields.Any(nf => fieldName.Contains(nf, StringComparison.OrdinalIgnoreCase)) ||
               fieldName.EndsWith("Amount", StringComparison.OrdinalIgnoreCase) ||
               fieldName.EndsWith("Total", StringComparison.OrdinalIgnoreCase) ||
               fieldName.EndsWith("Fee", StringComparison.OrdinalIgnoreCase);
    }

    private int GetFieldUsageCount(string fieldName)
    {
        return _lastResults?.Count(r => !r.ContainsKey("Error") && r.ContainsKey(fieldName) && !string.IsNullOrWhiteSpace(r[fieldName])) ?? 0;
    }

    private decimal CalculateFieldSum(string fieldName)
    {
        if (_lastResults == null) return 0;

        decimal sum = 0;
        foreach (var result in _lastResults.Where(r => !r.ContainsKey("Error")))
        {
            if (result.ContainsKey(fieldName) && TryParseNumber(result[fieldName], out var value))
            {
                sum += value;
            }
        }
        return sum;
    }

    private bool TryParseNumber(string text, out decimal value)
    {
        value = 0;
        if (string.IsNullOrWhiteSpace(text))
            return false;

        var cleanText = text.Trim()
            .Replace("฿", "")
            .Replace("THB", "")
            .Replace("$", "")
            .Replace(",", "")
            .Replace(" ", "")
            .Trim();

        return decimal.TryParse(cleanText, out value);
    }

    private string FormatSum(decimal sum, string fieldName)
    {
        if (fieldName.ToLower().Contains("amount") || fieldName.ToLower().Contains("total"))
        {
            return sum.ToString("N2") + " ฿";
        }
        return sum.ToString("N2");
    }

    #endregion

    #region Status Management

    private void SetStatusMessage(string message, string type)
    {
        _statusMessage = message;
        _statusMessageType = type;
        StateHasChanged();
    }

    private void ClearStatusMessage()
    {
        _statusMessage = string.Empty;
        StateHasChanged();
    }

    #endregion

    #region Helper Classes

    /// <summary>
    /// Simple processing progress tracking
    /// </summary>
    public class ProcessingProgress
    {
        public int ProcessedFiles { get; set; }
        public int TotalFiles { get; set; }
        public string CurrentFileName { get; set; } = string.Empty;

        public double ProgressPercentage => TotalFiles > 0 ? (double)ProcessedFiles / TotalFiles * 100 : 0;
    }

    #endregion
}