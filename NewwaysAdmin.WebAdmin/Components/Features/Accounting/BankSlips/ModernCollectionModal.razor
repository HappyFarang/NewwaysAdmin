@* NewwaysAdmin.WebAdmin/Components/Features/Accounting/BankSlips/ModernCollectionModal.razor *@
@* 🚀 MODERN VERSION: Pattern-based collection setup with dynamic format dropdown *@

@using NewwaysAdmin.SharedModels.BankSlips
@using NewwaysAdmin.SharedModels.Services.Ocr
@inject PatternManagementService PatternService

<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="@(IsVisible ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-gear me-2"></i>
                    @(IsEditMode ? "Edit" : "Create") Bank Slip Collection
                </h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>

            <EditForm Model="EditingCollection" OnValidSubmit="Save">
                <DataAnnotationsValidator />

                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>@ErrorMessage
                        </div>
                    }

                    <!-- Collection Name -->
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="bi bi-tag me-1"></i>Collection Name
                        </label>
                        <InputText @bind-Value="EditingCollection.Name"
                                   class="form-control"
                                   placeholder="e.g., KBIZ_Production, SCB_Test" />
                        <ValidationMessage For="() => EditingCollection.Name" />
                        <small class="form-text text-muted">
                            Choose a descriptive name for this collection
                        </small>
                    </div>

                    <!-- 🎯 NEW: Document Type (Fixed) -->
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="bi bi-file-text me-1"></i>Document Type
                        </label>
                        <input type="text" class="form-control" value="BankSlips" readonly />
                        <small class="form-text text-muted">
                            Document type is fixed for bank slip processing
                        </small>
                    </div>

                    <!-- 🚀 NEW: Format Selection (Dynamic from Patterns) -->
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="bi bi-puzzle me-1"></i>Bank Format
                            @if (_isLoadingFormats)
                            {
                                <span class="spinner-border spinner-border-sm ms-2" role="status"></span>
                            }
                        </label>

                        @if (_availableFormats.Any())
                        {
                            <select @bind="EditingCollection.FormatName" class="form-select">
                                <option value="">-- Select Bank Format --</option>
                                @foreach (var format in _availableFormats)
                                {
                                    <option value="@format">@format</option>
                                }
                            </select>
                            <small class="form-text text-muted">
                                Available formats from your pattern library: @string.Join(", ", _availableFormats)
                            </small>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                No formats found in pattern library. Please add patterns first using the OCR Analyzer.
                            </div>
                        }

                        <ValidationMessage For="() => EditingCollection.FormatName" />
                    </div>

                    <!-- Source Directory -->
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="bi bi-folder me-1"></i>Source Directory
                        </label>
                        <InputText @bind-Value="EditingCollection.SourceDirectory"
                                   class="form-control"
                                   placeholder="C:\BankSlips\Input" />
                        <ValidationMessage For="() => EditingCollection.SourceDirectory" />
                        <small class="form-text text-muted">
                            Folder containing bank slip images to process
                        </small>
                    </div>

                    <!-- Output Directory -->
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="bi bi-folder-plus me-1"></i>Output Directory
                        </label>
                        <InputText @bind-Value="EditingCollection.OutputDirectory"
                                   class="form-control"
                                   placeholder="C:\BankSlips\Processed" />
                        <ValidationMessage For="() => EditingCollection.OutputDirectory" />
                        <small class="form-text text-muted">
                            Folder where processed files will be moved
                        </small>
                    </div>

                    <!-- Optional Description -->
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="bi bi-chat-text me-1"></i>Description (Optional)
                        </label>
                        <InputTextArea @bind-Value="EditingCollection.Description"
                                       class="form-control"
                                       rows="2"
                                       placeholder="Brief description of this collection..." />
                        <small class="form-text text-muted">
                            Optional description for documentation purposes
                        </small>
                    </div>

                    <!-- 🎯 Pattern Preview (if format selected) -->
                    @if (!string.IsNullOrEmpty(EditingCollection.FormatName) && _formatPatterns.ContainsKey(EditingCollection.FormatName))
                    {
                        <div class="alert alert-info">
                            <h6><i class="bi bi-eye me-2"></i>Pattern Preview for @EditingCollection.FormatName</h6>
                            <div class="row">
                                @foreach (var pattern in _formatPatterns[EditingCollection.FormatName])
                                {
                                    <div class="col-md-4 mb-2">
                                        <span class="badge bg-primary">@pattern</span>
                                    </div>
                                }
                            </div>
                            <small class="text-muted">
                                These patterns will be used to extract data from your bank slips
                            </small>
                        </div>
                    }

                    <!-- Advanced Settings -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <button class="btn btn-link p-0 text-decoration-none" type="button"
                                        data-bs-toggle="collapse" data-bs-target="#advancedSettings">
                                    <i class="bi bi-gear me-1"></i>Advanced Settings
                                    <i class="bi bi-chevron-down ms-1"></i>
                                </button>
                            </h6>
                        </div>
                        <div class="collapse" id="advancedSettings">
                            <div class="card-body">
                                <div class="form-check mb-2">
                                    <InputCheckbox @bind-Value="EditingCollection.ProcessingSettings.UseEnhancedDateValidation"
                                                   class="form-check-input"
                                                   id="enhancedValidation" />
                                    <label class="form-check-label" for="enhancedValidation">
                                        Enhanced date validation
                                    </label>
                                </div>

                                <div class="form-check mb-2">
                                    <InputCheckbox @bind-Value="EditingCollection.ProcessingSettings.ValidateAccountFormat"
                                                   class="form-check-input"
                                                   id="validateAccount" />
                                    <label class="form-check-label" for="validateAccount">
                                        Validate account number formats
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@IsSaving">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@(IsSaving || !CanSave)">
                        @if (IsSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(IsEditMode ? "Update" : "Create") Collection
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public SlipCollection EditingCollection { get; set; } = new();
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public bool IsSaving { get; set; }
    [Parameter] public string ErrorMessage { get; set; } = string.Empty;
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<string> _availableFormats = new();
    private Dictionary<string, List<string>> _formatPatterns = new();
    private bool _isLoadingFormats = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableFormats();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Refresh formats when modal opens
        if (IsVisible && !_availableFormats.Any())
        {
            await LoadAvailableFormats();
        }
    }

    private async Task LoadAvailableFormats()
    {
        try
        {
            _isLoadingFormats = true;
            StateHasChanged();

            // Load available formats from pattern library
            var subCollections = await PatternService.GetSubCollectionNamesAsync("BankSlips");
            _availableFormats = subCollections;

            // Load pattern previews for each format
            _formatPatterns.Clear();
            foreach (var format in _availableFormats)
            {
                var patternNames = await PatternService.GetSearchPatternNamesAsync("BankSlips", format);
                _formatPatterns[format] = patternNames;
            }
        }
        catch (Exception ex)
        {
            // Log error but don't crash the UI
            Console.WriteLine($"Error loading formats: {ex.Message}");
            _availableFormats = new List<string>();
        }
        finally
        {
            _isLoadingFormats = false;
            StateHasChanged();
        }
    }

    private bool CanSave =>
        !string.IsNullOrWhiteSpace(EditingCollection.Name) &&
        !string.IsNullOrWhiteSpace(EditingCollection.FormatName) &&
        !string.IsNullOrWhiteSpace(EditingCollection.SourceDirectory) &&
        !string.IsNullOrWhiteSpace(EditingCollection.OutputDirectory) &&
        !IsSaving;

    private async Task Save()
    {
        // Set the document type (always BankSlips for this modal)
        EditingCollection.DocumentType = "BankSlips";

        // Update the legacy IsKBizFormat flag for backward compatibility
        EditingCollection.IsKBizFormat = EditingCollection.FormatName?.Contains("KBIZ", StringComparison.OrdinalIgnoreCase) ?? false;

        await OnSave.InvokeAsync();
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}