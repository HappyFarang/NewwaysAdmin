@* File: NewwaysAdmin.WebAdmin/Components/Features/Accounting/CategoryManagement/CategoryItem.razor *@
@using NewwaysAdmin.SharedModels.Categories

<div class="category-item border-bottom">
    <!-- Category Header (Clickable) - ONE LINE DESIGN -->
    <div class="category-header @(IsExpanded ? "expanded" : "")" @onclick="OnToggleExpanded">
        <div class="d-flex align-items-center justify-content-between w-100">
            <!-- Left Side: Arrow + Icon + Name + Info -->
            <div class="d-flex align-items-center flex-grow-1 min-width-0">
                <!-- Expand/Collapse Arrow -->
                <div class="expand-arrow me-2">
                    @if (Category.SubCategories?.Any() == true)
                    {
                        <i class="fas @(IsExpanded ? "fa-chevron-down" : "fa-chevron-right") text-muted"></i>
                    }
                    else
                    {
                        <div style="width: 10px;"></div> <!-- Spacer for alignment -->
                    }
                </div>

                <!-- Category Icon -->
                <div class="category-icon me-2">
                    <i class="fas fa-folder @(IsExpanded ? "text-primary" : "text-secondary")"></i>
                </div>

                <!-- Category Name -->
                <div class="category-name me-3 text-truncate">
                    <span class="fw-semibold">@Category.Name</span>
                </div>

                <!-- Compact Info -->
                <div class="category-meta text-nowrap">
                    <small class="text-muted">
                        @(Category.SubCategories?.Count ?? 0) subs
                        @if (!string.IsNullOrEmpty(Category.Description))
                        {
                            <span class="ms-2 text-muted">• @Category.Description</span>
                        }
                    </small>
                </div>
            </div>

            <!-- Right Side: Action Buttons (Only when expanded) -->
            @if (IsExpanded)
            {
                <div class="category-actions ms-3" @onclick:stopPropagation="true">
                    <div class="btn-group" role="group">
                        <button type="button"
                                class="btn btn-sm btn-outline-success"
                                @onclick="() => OnAddSubCategory.InvokeAsync(Category)"
                                title="Add Subcategory">
                            <i class="fas fa-plus"></i>
                            <span class="d-none d-xl-inline ms-1">Add</span>
                        </button>
                        <button type="button"
                                class="btn btn-sm btn-outline-primary"
                                @onclick="() => OnEditCategory.InvokeAsync(Category)"
                                title="Edit Category">
                            <i class="fas fa-edit"></i>
                            <span class="d-none d-xl-inline ms-1">Edit</span>
                        </button>
                        <button type="button"
                                class="btn btn-sm btn-outline-danger"
                                @onclick="() => OnDeleteCategory.InvokeAsync(Category)"
                                title="Delete Category">
                            <i class="fas fa-trash"></i>
                            <span class="d-none d-xl-inline ms-1">Del</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Subcategories (Collapsible with Animation) -->
    @if (Category.SubCategories?.Any() == true)
    {
        <div class="subcategories-container @(IsExpanded ? "expanded" : "collapsed")">
            <SubCategoryList SubCategories="Category.SubCategories"
                             ParentCategory="Category"
                             OnEditSubCategory="OnEditSubCategory"
                             OnDeleteSubCategory="OnDeleteSubCategory" />
        </div>
    }
</div>

@code {
    [Parameter] public Category Category { get; set; } = null!;
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback OnToggleExpanded { get; set; }
    [Parameter] public EventCallback<Category> OnEditCategory { get; set; }
    [Parameter] public EventCallback<Category> OnDeleteCategory { get; set; }
    [Parameter] public EventCallback<Category> OnAddSubCategory { get; set; }
    [Parameter] public EventCallback<ValueTuple<Category, SubCategory>> OnEditSubCategory { get; set; }
    [Parameter] public EventCallback<ValueTuple<Category, SubCategory>> OnDeleteSubCategory { get; set; }
}

<style>
    .category-item {
        transition: all 0.2s ease;
    }

    .category-header {
        padding: 0.75rem 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
        min-height: 50px; /* Consistent height */
    }

        .category-header:hover {
            background-color: var(--bs-light);
        }

        .category-header.expanded {
            background-color: var(--bs-primary-bg-subtle);
            border-left: 3px solid var(--bs-primary);
        }

    .expand-arrow i {
        transition: transform 0.2s ease;
        font-size: 0.75rem;
        width: 10px;
    }

    .category-name {
        min-width: 150px; /* Consistent name width */
        max-width: 200px;
    }

    .category-meta {
        flex-shrink: 0;
    }

    .category-actions {
        opacity: 0.7;
        transition: opacity 0.2s ease;
        flex-shrink: 0;
    }

    .category-header:hover .category-actions {
        opacity: 1;
    }

    .subcategories-container {
        overflow: hidden;
        transition: max-height 0.3s ease, opacity 0.3s ease;
    }

        .subcategories-container.collapsed {
            max-height: 0;
            opacity: 0;
        }

        .subcategories-container.expanded {
            max-height: 1000px; /* Adjust based on your needs */
            opacity: 1;
        }

    .btn-group .btn {
        border-radius: 0.375rem !important;
        margin-left: 2px;
    }

        .btn-group .btn:first-child {
            margin-left: 0;
        }
</style>