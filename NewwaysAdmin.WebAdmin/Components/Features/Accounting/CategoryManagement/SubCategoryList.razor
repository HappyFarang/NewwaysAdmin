@* File: NewwaysAdmin.WebAdmin/Components/Features/Accounting/CategoryManagement/SubCategoryList.razor *@
@using NewwaysAdmin.SharedModels.Categories
@inject IJSRuntime JSRuntime

<div class="subcategories-list bg-light">
    @foreach (var subCategory in SubCategories.OrderBy(s => s.SortOrder))
    {
        <div class="subcategory-item d-flex align-items-center justify-content-between">
            <!-- Subcategory Info -->
            <div class="d-flex align-items-center flex-grow-1">
                <div class="subcategory-indent me-3">
                    <i class="fas fa-file text-secondary"></i>
                </div>
                <div class="subcategory-content flex-grow-1">
                    <div class="d-flex align-items-center">
                        <span class="subcategory-name fw-medium me-2">@subCategory.Name</span>
                        <button class="btn btn-sm btn-link p-0 text-muted copy-btn"
                                @onclick="() => CopyToClipboard(subCategory.FullPath)"
                                title="Copy full path: @subCategory.FullPath">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(subCategory.Description))
                    {
                        <small class="text-muted d-block subcategory-description">@subCategory.Description</small>
                    }

                    <div class="subcategory-path">
                        <small class="text-primary fw-medium">@subCategory.FullPath</small>
                        @if (subCategory.CreatedDate != default)
                        {
                            <small class="text-muted ms-2">• @subCategory.CreatedDate.ToString("MMM d")</small>
                        }
                    </div>
                </div>
            </div>

            <!-- Subcategory Actions (Always show since parent is expanded) -->
            <div class="subcategory-actions">
                <div class="btn-group" role="group">
                    <button type="button"
                            class="btn btn-sm btn-light subcategory-btn subcategory-edit-btn"
                            @onclick="() => OnEditSubCategory.InvokeAsync((ParentCategory, subCategory))"
                            title="Edit Subcategory">
                        <i class="fas fa-edit"></i>
                        <span class="d-none d-xl-inline ms-1">Edit</span>
                    </button>
                    <button type="button"
                            class="btn btn-sm btn-light subcategory-btn subcategory-delete-btn"
                            @onclick="() => OnDeleteSubCategory.InvokeAsync((ParentCategory, subCategory))"
                            title="Delete Subcategory">
                        <i class="fas fa-trash"></i>
                        <span class="d-none d-xl-inline ms-1">Del</span>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<SubCategory> SubCategories { get; set; } = new();
    [Parameter] public Category ParentCategory { get; set; } = null!;
    [Parameter] public EventCallback<ValueTuple<Category, SubCategory>> OnEditSubCategory { get; set; }
    [Parameter] public EventCallback<ValueTuple<Category, SubCategory>> OnDeleteSubCategory { get; set; }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await JSRuntime.InvokeVoidAsync("showToast", $"Copied: {text}", "success");
        }
        catch
        {
            // Fallback for older browsers
            await JSRuntime.InvokeVoidAsync("copyTextFallback", text);
        }
    }
}

<style>
    .subcategories-list {
        border-top: 1px solid var(--bs-border-color);
    }

    .subcategory-item {
        padding: 0.75rem 1rem 0.75rem 3rem;
        border-bottom: 1px solid rgba(0,0,0,0.05);
        transition: background-color 0.2s ease;
    }

        .subcategory-item:hover {
            background-color: rgba(0,0,0,0.02);
        }

        .subcategory-item:last-child {
            border-bottom: none;
        }

    .subcategory-indent {
        width: 20px;
        text-align: center;
    }

    .subcategory-name {
        color: var(--bs-dark);
    }

    .subcategory-description {
        line-height: 1.3;
        margin-top: 0.125rem;
    }

    .subcategory-path {
        margin-top: 0.125rem;
    }

    .copy-btn {
        font-size: 0.75rem;
        opacity: 0.6;
        transition: opacity 0.2s ease;
    }

        .copy-btn:hover {
            opacity: 1;
            text-decoration: none;
        }

    .subcategory-actions {
        opacity: 0.8;
        transition: opacity 0.2s ease;
        flex-shrink: 0;
    }

    .subcategory-item:hover .subcategory-actions {
        opacity: 1;
    }

    /* Distinct styling for subcategory buttons */
    .subcategory-btn {
        border: 1px solid #dee2e6 !important;
        background-color: #f8f9fa !important;
        color: #6c757d !important;
        border-radius: 0.375rem !important;
        margin-left: 2px;
        min-width: 40px;
        transition: all 0.2s ease;
    }

        .subcategory-btn:first-child {
            margin-left: 0;
        }

    /* Hover states for subcategory buttons */
    .subcategory-edit-btn:hover {
        background-color: #e3f2fd !important;
        border-color: #2196f3 !important;
        color: #1976d2 !important;
    }

    .subcategory-delete-btn:hover {
        background-color: #ffebee !important;
        border-color: #f44336 !important;
        color: #d32f2f !important;
    }

    /* Focus states */
    .subcategory-btn:focus {
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25) !important;
    }

    }
</style>

<script>
    window.copyTextFallback = function (text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);

        if (window.showToast) {
            window.showToast(`Copied: ${text}`, 'success');
        }
    };

    window.showToast = function (message, type = 'info') {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} position-fixed shadow-sm`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 250px;';
        toast.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-check-circle me-2"></i>
                    <span>${message}</span>
                </div>
            `;

        // Simple slide in animation using transform
        toast.style.transform = 'translateX(100%)';
        toast.style.opacity = '0';
        toast.style.transition = 'all 0.3s ease';

        document.body.appendChild(toast);

        // Trigger animation
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
            toast.style.opacity = '1';
        }, 10);

        // Slide out and remove
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 2500);
    };
</script>