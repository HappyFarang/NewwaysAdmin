@* File: NewwaysAdmin.WebAdmin/Components/Features/Accounting/CategoryManagement/SubCategoryModal.razor *@
@using NewwaysAdmin.SharedModels.Categories
@using NewwaysAdmin.WebAdmin.Services.Categories
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<!-- Modal -->
<div class="modal fade" id="subCategoryModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @(editingSubCategory == null ? "Add Subcategory" : "Edit Subcategory")
                    @if (parentCategory != null)
                    {
                        <small class="text-muted d-block">to @parentCategory.Name</small>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <EditForm Model="subCategoryForm" OnValidSubmit="SaveSubCategory">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="subCategoryName" class="form-label">Subcategory Name</label>
                        <InputText id="subCategoryName" class="form-control" @bind-Value="subCategoryForm.Name"
                                   placeholder="e.g., Green Buses" />
                        <ValidationMessage For="() => subCategoryForm.Name" />
                    </div>

                    <div class="mb-3">
                        <label for="subCategoryDescription" class="form-label">Description (Optional)</label>
                        <InputTextArea id="subCategoryDescription" class="form-control" @bind-Value="subCategoryForm.Description"
                                       placeholder="Brief description of this subcategory" rows="2" />
                    </div>

                    @if (parentCategory != null && !string.IsNullOrWhiteSpace(subCategoryForm.Name))
                    {
                        <div class="mb-3">
                            <label class="form-label">Full Path Preview</label>
                            <div class="alert alert-info d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <span class="font-monospace">@GetFullPath()</span>
                                <button type="button" class="btn btn-sm btn-outline-info ms-auto"
                                        @onclick="() => CopyToClipboard(GetFullPath())">
                                    >
                                    <i class="fas fa-copy"></i> Copy
                                </button>
                            </div>
                            <small class="text-muted">This is what you'll copy to bank transfer notes</small>
                        </div>
                    }

                    @if (isSaving)
                    {
                        <div class="text-center">
                            <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                            Saving...
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSaving">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @(editingSubCategory == null ? "Add Subcategory" : "Update Subcategory")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnSubCategorySaved { get; set; }

    private Category? parentCategory;
    private SubCategory? editingSubCategory;
    private SubCategoryFormModel subCategoryForm = new();
    private bool isSaving = false;

    public async Task ShowAsync(Category parent, SubCategory? subCategory = null)
    {
        parentCategory = parent;
        editingSubCategory = subCategory;

        if (subCategory != null)
        {
            // Editing existing subcategory
            subCategoryForm = new SubCategoryFormModel
                {
                    Name = subCategory.Name,
                    Description = subCategory.Description ?? ""
                };
        }
        else
        {
            // Adding new subcategory
            subCategoryForm = new SubCategoryFormModel();
        }

        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('subCategoryModal')).show()");
        StateHasChanged();
    }

    private async Task SaveSubCategory()
    {
        if (string.IsNullOrWhiteSpace(subCategoryForm.Name) || parentCategory == null)
            return;

        isSaving = true;
        StateHasChanged();

        try
        {
            if (editingSubCategory == null)
            {
                // Create new subcategory
                await CategoryService.CreateSubCategoryAsync(
                    parentCategory.Id,
                    subCategoryForm.Name.Trim(),
                    subCategoryForm.Description?.Trim() ?? "",
                    "CurrentUser" // TODO: Get actual user
                );
            }
            else
            {
                // Update existing subcategory
                editingSubCategory.Name = subCategoryForm.Name.Trim();
                editingSubCategory.Description = subCategoryForm.Description?.Trim();
                editingSubCategory.LastModified = DateTime.UtcNow;

                await CategoryService.UpdateCategoryAsync(
                    parentCategory.Id,
                    parentCategory.Name,
                    parentCategory.Description ?? "",
                    "CurrentUser" // TODO: Get actual user
                );
            }

            await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('subCategoryModal')).hide()");
            await OnSubCategorySaved.InvokeAsync();

            await JSRuntime.InvokeVoidAsync("showToast",
                $"Subcategory {(editingSubCategory == null ? "created" : "updated")} successfully!", "success");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast",
                $"Error {(editingSubCategory == null ? "creating" : "updating")} subcategory: {ex.Message}", "danger");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await JSRuntime.InvokeVoidAsync("showToast", "Copied to clipboard!", "success");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("copyTextFallback", text);
        }
    }

    private string GetFullPath()
    {
        if (parentCategory != null && !string.IsNullOrWhiteSpace(subCategoryForm.Name))
        {
            return $"{parentCategory.Name}/{subCategoryForm.Name.Trim()}";
        }
        return "";
    }

    public class SubCategoryFormModel
    {
        [Required(ErrorMessage = "Subcategory name is required")]
        [StringLength(100, ErrorMessage = "Subcategory name must be 100 characters or less")]
        public string Name { get; set; } = "";

        public string? Description { get; set; }
    }
}