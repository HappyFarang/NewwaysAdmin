@* NewwaysAdmin.WebAdmin/Components/Features/Settings/OcrAnalyzer/SpatialOcrAnalyzer.razor *@
@* NEW Spatial OCR Analyzer - Replaces old one *@
@using Microsoft.AspNetCore.Components.Forms
@using NewwaysAdmin.WebAdmin.Services.Testing
@using NewwaysAdmin.SharedModels.Models.Ocr.Core
@inject IOcrTestingService OcrTestingService
@inject ISpatialOcrService SpatialOcrService

<div class="spatial-ocr-container">
    <div class="header-section">
        <h2><i class="bi bi-eye"></i> Spatial OCR Analyzer</h2>
        <p class="subtitle">Test spatial OCR extraction with word positioning and coordinates</p>
    </div>

    <!-- File Upload Section -->
    <div class="upload-section">
        <div class="upload-zone @(isProcessing ? "processing" : "")"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave"
             @ondragover:preventDefault="true"
             @ondrop="HandleDrop">

            <InputFile OnChange="HandleFileSelect" class="file-input" disabled="@isProcessing" />

            @if (isProcessing)
            {
                <div class="processing-indicator">
                    <div class="spinner"></div>
                    <span>Processing image...</span>
                </div>
            }
            else
            {
                <div class="upload-content">
                    <i class="bi bi-cloud-upload"></i>
                    <p>Drop image here or click to browse</p>
                    <small>Supports: JPG, PNG, BMP, TIFF (max 50MB)</small>
                </div>
            }
        </div>

        @if (!string.IsNullOrEmpty(status))
        {
            <div class="status-message @(spatialResult?.Success == true ? "success" : "error")">
                <i class="bi @(spatialResult?.Success == true ? "bi-check-circle" : "bi-exclamation-triangle")"></i>
                @status
            </div>
        }
    </div>

    <!-- Results Section -->
    @if (spatialResult != null)
    {
        <div class="results-section">
            <!-- Summary Cards -->
            <div class="summary-cards">
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-file-text"></i></div>
                    <div class="card-content">
                        <div class="card-value">@spatialResult.WordCount</div>
                        <div class="card-label">Words Extracted</div>
                    </div>
                </div>
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-speedometer2"></i></div>
                    <div class="card-content">
                        <div class="card-value">@($"{spatialResult.ProcessingTime.TotalMilliseconds:F0}ms")</div>
                        <div class="card-label">Processing Time</div>
                    </div>
                </div>
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-graph-up"></i></div>
                    <div class="card-content">
                        <div class="card-value">@($"{spatialResult.AverageConfidence:F1}%")</div>
                        <div class="card-label">Avg Confidence</div>
                    </div>
                </div>
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-bounding-box"></i></div>
                    <div class="card-content">
                        <div class="card-value">@($"{spatialResult.Document?.DocumentWidth}x{spatialResult.Document?.DocumentHeight}")</div>
                        <div class="card-label">Image Size</div>
                    </div>
                </div>
            </div>

            <!-- View Controls -->
            <div class="view-controls">
                <div class="view-tabs">
                    <button class="btn @(activeView == "text" ? "active" : "")" @onclick="@(() => SetActiveView("text"))">
                        <i class="bi bi-file-text"></i> Extracted Text
                    </button>
                    <button class="btn @(activeView == "spatial" ? "active" : "")" @onclick="@(() => SetActiveView("spatial"))">
                        <i class="bi bi-grid-3x3-gap"></i> Spatial Data
                    </button>
                    <button class="btn @(activeView == "debug" ? "active" : "")" @onclick="@(() => SetActiveView("debug"))">
                        <i class="bi bi-bug"></i> Debug Info
                    </button>
                </div>

                <div class="search-controls">
                    <input @bind="searchFilter" @bind:event="oninput" placeholder="Search words..." class="form-control search-input" />
                    @if (!string.IsNullOrEmpty(searchFilter))
                    {
                        <span class="search-results">@filteredWords.Count() results</span>
                    }
                </div>
            </div>

            <!-- Content Display -->
            <div class="content-display">
                @if (activeView == "text")
                {
                    <div class="text-content">
                        <pre class="extracted-text">@spatialResult.ExtractedText</pre>
                    </div>
                }
                else if (activeView == "spatial" && spatialResult.Document != null)
                {
                    <div class="spatial-content">
                        <div class="spatial-table-container">
                            <table class="spatial-table">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Text</th>
                                        <th>Position (Raw)</th>
                                        <th>Position (Norm)</th>
                                        <th>Size</th>
                                        <th>Confidence</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var word in filteredWords.Take(100)) // Limit to first 100 for performance
                                    {
                                        <tr class="@(IsWordHighlighted(word) ? "highlighted" : "")">
                                            <td>@word.OriginalIndex</td>
                                            <td class="word-text">@word.Text</td>
                                            <td class="coordinate-text">(@word.RawX1,@word.RawY1) - (@word.RawX2,@word.RawY2)</td>
                                            <td class="coordinate-text">(@word.NormX1.ToString("F3"),@word.NormY1.ToString("F3")) - (@word.NormX2.ToString("F3"),@word.NormY2.ToString("F3"))</td>
                                            <td>@word.RawWidth x @word.RawHeight</td>
                                            <td class="confidence-text">@word.Confidence.ToString("F2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            @if (filteredWords.Count() > 100)
                            {
                                <div class="table-note">
                                    <i class="bi bi-info-circle"></i>
                                    Showing first 100 of @filteredWords.Count() words. Use search to filter results.
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (activeView == "debug")
                {
                    <div class="debug-content">
                        <div class="debug-section">
                            <h4>Extraction Result</h4>
                            <pre class="debug-info">@spatialResult.GetDetailedInfo()</pre>
                        </div>

                        @if (spatialResult.Document != null)
                        {
                            <div class="debug-section">
                                <h4>Document Statistics</h4>
                                <pre class="debug-info">@spatialResult.Document.GetDebugInfo()</pre>
                            </div>

                            <div class="debug-section">
                                <h4>Processing Metadata</h4>
                                <pre class="debug-info">@GetMetadataInfo()</pre>
                            </div>
                        }

                        @if (spatialResult.HasWarnings)
                        {
                            <div class="debug-section">
                                <h4>Warnings</h4>
                                <div class="warnings-list">
                                    @foreach (var warning in spatialResult.Warnings)
                                    {
                                        <div class="warning-item">
                                            <i class="bi bi-exclamation-triangle"></i>
                                            @warning
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isProcessing = false;
    private string status = string.Empty;
    private OcrExtractionResult? spatialResult = null;
    private string activeView = "text";
    private string searchFilter = string.Empty;

    private IEnumerable<WordBoundingBox> filteredWords =>
        spatialResult?.Document?.Words?.Where(w =>
            string.IsNullOrEmpty(searchFilter) ||
            w.Text.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)
        ) ?? Enumerable.Empty<WordBoundingBox>();

    private async Task HandleFileSelect(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;

        await ProcessFile(e.File);
    }

    private void HandleDragEnter(DragEventArgs e) => e.DataTransfer!.DropEffect = "copy";
    private void HandleDragLeave(DragEventArgs e) { }

    private async Task HandleDrop(DragEventArgs e)
    {
        // Note: Drag and drop file handling in Blazor requires special handling
        // For now, we'll just prevent the default and let users use the file input
        e.DataTransfer!.DropEffect = "none";
        // TODO: Implement proper drag and drop file handling
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        if (isProcessing) return;

        isProcessing = true;
        status = "Processing image with spatial OCR...";
        spatialResult = null;
        StateHasChanged();

        try
        {
            // Create temp file
            var tempPath = Path.GetTempFileName();
            var finalPath = Path.ChangeExtension(tempPath, Path.GetExtension(file.Name));

            status = $"Saving file: {Path.GetFileName(finalPath)}";
            StateHasChanged();

            // Save uploaded file
            using var stream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            using var fileStream = File.Create(finalPath);
            await stream.CopyToAsync(fileStream);
            fileStream.Close();

            status = "Extracting spatial text data...";
            StateHasChanged();

            // Process with spatial OCR service
            spatialResult = await SpatialOcrService.ExtractSpatialTextAsync(finalPath);

            if (spatialResult?.Success == true)
            {
                status = $"SUCCESS! Extracted {spatialResult.WordCount} words in {spatialResult.ProcessingTime.TotalMilliseconds:F0}ms";
            }
            else
            {
                status = $"FAILED: {spatialResult?.ErrorMessage ?? "Unknown error"}";
            }

            // Cleanup
            try { File.Delete(finalPath); } catch { }
        }
        catch (Exception ex)
        {
            status = $"EXCEPTION: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void SetActiveView(string view)
    {
        activeView = view;
        StateHasChanged();
    }

    private bool IsWordHighlighted(WordBoundingBox word)
    {
        return !string.IsNullOrEmpty(searchFilter) &&
               word.Text.Contains(searchFilter, StringComparison.OrdinalIgnoreCase);
    }

    private string GetMetadataInfo()
    {
        if (spatialResult?.Metadata == null) return "No metadata available";

        var metadata = spatialResult.Metadata;
        return $"Google Vision API: {metadata.GoogleVisionApiVersion}\n" +
               $"Collection: {metadata.CollectionName}\n" +
               $"Processing Engine: {metadata.ProcessingEngine}\n" +
               $"Image Preprocessed: {metadata.ImageWasPreprocessed}\n" +
               $"Original Size: {metadata.OriginalImageWidth}x{metadata.OriginalImageHeight}\n" +
               $"Processed Size: {metadata.ProcessedImageWidth}x{metadata.ProcessedImageHeight}\n" +
               $"Raw Annotations: {metadata.RawAnnotationsCount}\n" +
               $"Filtered Words: {metadata.FilteredWordsCount}\n" +
               $"Scale Factor: {metadata.ImageScaleFactor:F2}";
    }
}