@* ImprovedThreeLevelPatternSaveComponent.razor - Now with multiple regex pattern support *@
@using NewwaysAdmin.SharedModels.Services.Ocr
@using NewwaysAdmin.SharedModels.Models.Ocr
@using System.Text.Json
@inject PatternManagementService PatternService

<div style="background: #e8f5e8; padding: 15px; margin: 10px; border: 2px solid #28a745; border-radius: 8px;">
    <h6><i class="bi bi-floppy"></i> Save Pattern - With Multiple Regex Support</h6>

    <!-- Step 1: Document Type Selection -->
    <div class="mb-3">
        <label class="form-label"><strong>Step 1: Select Document Type</strong></label>
        <div class="input-group">
            <select @onchange="OnDocumentTypeChanged" class="form-select form-select-sm" value="@selectedDocumentType">
                <option value="">-- Select Document Type --</option>
                @foreach (var docType in availableDocumentTypes)
                {
                    <option value="@docType">@docType</option>
                }
            </select>
            <button @onclick="LoadDocumentTypes" class="btn btn-outline-secondary btn-sm" type="button" title="Refresh">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>

        <!-- Create New Document Type -->
        <div class="mt-2">
            <div class="input-group">
                <input @bind="newDocumentType" class="form-control form-control-sm"
                       placeholder="Or create new (e.g., BankSlips, Invoices)" />
                <button @onclick="CreateNewDocumentType" class="btn btn-success btn-sm"
                        disabled="@(string.IsNullOrEmpty(newDocumentType))">
                    <i class="bi bi-plus"></i> Create
                </button>
            </div>
        </div>
    </div>

    <!-- Step 2: Sub-Collection (Format) Selection -->
    @if (!string.IsNullOrEmpty(selectedDocumentType))
    {
        <div class="mb-3">
            <label class="form-label"><strong>Step 2: Select Format</strong></label>
            <div class="input-group">
                <select @onchange="OnSubCollectionChanged" class="form-select form-select-sm" value="@selectedSubCollection">
                    <option value="">-- Select Format --</option>
                    @foreach (var subCol in availableSubCollections)
                    {
                        <option value="@subCol">@subCol</option>
                    }
                </select>
            </div>

            <!-- Create New Sub-Collection -->
            <div class="mt-2">
                <div class="input-group">
                    <input @bind="newSubCollection" class="form-control form-control-sm"
                           placeholder="Or create new (e.g., KBIZ, SCB)" />
                    <button @onclick="CreateNewSubCollection" class="btn btn-success btn-sm"
                            disabled="@(string.IsNullOrEmpty(newSubCollection))">
                        <i class="bi bi-plus"></i> Create
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Step 3: Pattern Details -->
    @if (!string.IsNullOrEmpty(selectedDocumentType) && !string.IsNullOrEmpty(selectedSubCollection))
    {
        <div class="mb-3">
            <label class="form-label"><strong>Step 3: Pattern Details</strong></label>

            <!-- Pattern Name -->
            <div class="mb-2">
                <input @bind="patternName" class="form-control form-control-sm"
                       placeholder="Pattern name (e.g., Date, To, Total, Subject)" />
            </div>

            <!-- Current Pattern Info from OCR Analyzer -->
            @if (CurrentPattern != null)
            {
                <div class="alert alert-info py-2 mb-2" style="font-size: 0.85rem;">
                    <strong>From OCR:</strong>
                    @CurrentPattern.PatternType | Keyword: "@CurrentPattern.KeyWord" |
                    Tolerances: X:@CurrentPattern.ToleranceX Y:@CurrentPattern.ToleranceY
                </div>
            }

            <!-- MULTIPLE REGEX PATTERNS SECTION -->
            <div class="mb-3" style="background: #f0f8ff; padding: 10px; border-radius: 5px;">
                <label class="form-label"><strong>Regex Patterns</strong> (can have multiple)</label>

                <!-- Add new regex pattern -->
                <div class="input-group mb-2">
                    <input @bind="newRegexPattern"
                           class="form-control form-control-sm"
                           placeholder="Enter regex pattern (e.g., \d+, [A-Z]+)"
                           style="font-family: monospace;" />
                    <button @onclick="AddRegexPattern"
                            class="btn btn-outline-primary btn-sm"
                            disabled="@(string.IsNullOrEmpty(newRegexPattern))">
                        <i class="bi bi-plus"></i> Add
                    </button>
                </div>

                <!-- List of current regex patterns -->
                @if (regexPatternsList.Any())
                {
                    <div class="border rounded p-2" style="background: white;">
                        <small class="text-muted">Patterns to save:</small>
                        @foreach (var (pattern, index) in regexPatternsList.Select((p, i) => (p, i)))
                        {
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <code style="font-size: 0.85rem;">@pattern</code>
                                <button @onclick="() => RemoveRegexPattern(index)"
                                        class="btn btn-sm btn-outline-danger py-0 px-1">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <small class="text-muted">No regex patterns added yet (optional)</small>
                }
            </div>

            <!-- Existing Patterns List -->
            @if (existingPatterns.Any())
            {
                <div class="mb-3" style="background: #fff9e6; padding: 10px; border-radius: 5px;">
                    <label class="form-label"><strong>Existing Patterns</strong></label>
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var pattern in existingPatterns)
                        {
                            <span class="badge bg-secondary">@pattern</span>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Save Button -->
        <div class="mb-3">
            <button @onclick="SavePattern"
                    class="btn btn-success"
                    disabled="@(string.IsNullOrEmpty(patternName) || CurrentPattern == null || isSaving)">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="bi bi-floppy"></i>
                Save "@patternName" to @selectedDocumentType → @selectedSubCollection
                @if (regexPatternsList.Any())
                {
                    <span class="badge bg-light text-dark ms-2">@regexPatternsList.Count regex patterns</span>
                }
            </button>
        </div>

    }

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") py-2">
            @((MarkupString)statusMessage)
        </div>
    }
</div>

@code {
    [Parameter] public SearchPattern? CurrentPattern { get; set; }
    [Parameter] public EventCallback OnPatternSaved { get; set; }

    // Document type and sub-collection
    private string selectedDocumentType = "";
    private string selectedSubCollection = "";
    private string newDocumentType = "";
    private string newSubCollection = "";
    private List<string> availableDocumentTypes = new();
    private List<string> availableSubCollections = new();

    // Pattern details
    private string patternName = "";
    private string newRegexPattern = "";
    private List<string> regexPatternsList = new();
    private List<string> existingPatterns = new();

    // UI state
    private bool isSaving = false;
    private string statusMessage = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentTypes();
    }

    protected override void OnParametersSet()
    {
        // If CurrentPattern has regex patterns from OCR analyzer, use them
        if (CurrentPattern?.RegexPatterns != null && CurrentPattern.RegexPatterns.Any())
        {
            regexPatternsList = new List<string>(CurrentPattern.RegexPatterns);
        }
    }

    private async Task LoadDocumentTypes()
    {
        try
        {
            availableDocumentTypes = await PatternService.GetCollectionNamesAsync();
        }
        catch (Exception ex)
        {
            ShowError($"Error loading document types: {ex.Message}");
        }
    }

    private async Task OnDocumentTypeChanged(ChangeEventArgs e)
    {
        selectedDocumentType = e.Value?.ToString() ?? "";
        selectedSubCollection = "";
        await LoadSubCollections();
    }

    private async Task LoadSubCollections()
    {
        if (string.IsNullOrEmpty(selectedDocumentType))
        {
            availableSubCollections = new();
            return;
        }

        try
        {
            availableSubCollections = await PatternService.GetSubCollectionNamesAsync(selectedDocumentType);
        }
        catch (Exception ex)
        {
            ShowError($"Error loading sub-collections: {ex.Message}");
        }
    }

    private async Task OnSubCollectionChanged(ChangeEventArgs e)
    {
        selectedSubCollection = e.Value?.ToString() ?? "";
        await LoadExistingPatterns();
    }

    private async Task LoadExistingPatterns()
    {
        if (string.IsNullOrEmpty(selectedDocumentType) || string.IsNullOrEmpty(selectedSubCollection))
        {
            existingPatterns = new();
            return;
        }

        try
        {
            existingPatterns = await PatternService.GetSearchPatternNamesAsync(selectedDocumentType, selectedSubCollection);
        }
        catch (Exception ex)
        {
            ShowError($"Error loading existing patterns: {ex.Message}");
        }
    }

    private void AddRegexPattern()
    {
        if (!string.IsNullOrWhiteSpace(newRegexPattern))
        {
            regexPatternsList.Add(newRegexPattern);
            newRegexPattern = "";
        }
    }

    private void RemoveRegexPattern(int index)
    {
        if (index >= 0 && index < regexPatternsList.Count)
        {
            regexPatternsList.RemoveAt(index);
        }
    }

    private async Task CreateNewDocumentType()
    {
        if (string.IsNullOrEmpty(newDocumentType))
            return;

        try
        {
            // Create a temporary pattern to establish the document type
            var tempPattern = new SearchPattern
                {
                    SearchName = "_temp",
                    KeyWord = "temp",
                    PatternType = "VerticalColumn",
                    RegexPatterns = new List<string>()
                };

            await PatternService.SaveSearchPatternAsync(newDocumentType, "_temp", "_temp", tempPattern);
            await PatternService.DeleteSearchPatternAsync(newDocumentType, "_temp", "_temp");

            await LoadDocumentTypes();
            selectedDocumentType = newDocumentType;
            newDocumentType = "";

            ShowSuccess($"Created document type '{selectedDocumentType}'");
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
    }

    private async Task CreateNewSubCollection()
    {
        if (string.IsNullOrEmpty(selectedDocumentType) || string.IsNullOrEmpty(newSubCollection))
            return;

        try
        {
            var tempPattern = new SearchPattern
                {
                    SearchName = "_temp",
                    KeyWord = "temp",
                    PatternType = "VerticalColumn",
                    RegexPatterns = new List<string>()
                };

            await PatternService.SaveSearchPatternAsync(selectedDocumentType, newSubCollection, "_temp", tempPattern);
            await PatternService.DeleteSearchPatternAsync(selectedDocumentType, newSubCollection, "_temp");

            await LoadSubCollections();
            selectedSubCollection = newSubCollection;
            newSubCollection = "";

            ShowSuccess($"Created format '{selectedSubCollection}'");
            await LoadExistingPatterns();
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
    }

    private async Task SavePattern()
    {
        if (CurrentPattern == null || string.IsNullOrEmpty(selectedDocumentType) ||
            string.IsNullOrEmpty(selectedSubCollection) || string.IsNullOrEmpty(patternName))
            return;

        try
        {
            isSaving = true;
            ClearStatus();
            StateHasChanged();

            var patternToSave = new SearchPattern
                {
                    SearchName = patternName,
                    KeyWord = CurrentPattern.KeyWord ?? "",
                    PatternType = CurrentPattern.PatternType ?? "VerticalColumn",
                    ToleranceX = CurrentPattern.ToleranceX,
                    ToleranceY = CurrentPattern.ToleranceY,
                    StopWords = CurrentPattern.StopWords ?? "",
                    RegexPatterns = regexPatternsList.Any() ? regexPatternsList : new List<string>()
                };

            var success = await PatternService.SaveSearchPatternAsync(
                selectedDocumentType,
                selectedSubCollection,
                patternName,
                patternToSave);

            if (success)
            {
                ShowSuccess($"✅ Pattern '<strong>{patternName}</strong>' saved with <strong>{regexPatternsList.Count}</strong> regex patterns!");

                // Clear for next pattern
                patternName = "";
                regexPatternsList = new();
                newRegexPattern = "";

                await LoadExistingPatterns();
                await OnPatternSaved.InvokeAsync();
            }
            else
            {
                ShowError("Failed to save pattern");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        isError = false;
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        isError = true;
    }

    private void ClearStatus()
    {
        statusMessage = "";
        isError = false;
    }
}