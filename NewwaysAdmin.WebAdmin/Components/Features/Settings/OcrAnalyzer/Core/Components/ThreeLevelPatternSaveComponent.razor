@* Fixed ThreeLevelPatternSaveComponent with Date Parsing Support *@
@using NewwaysAdmin.SharedModels.Models.Ocr
@using NewwaysAdmin.SharedModels.Services.Ocr
@using NewwaysAdmin.SharedModels.Services.Parsing

@inject PatternManagementService PatternService

<div class="pattern-save-component p-3 border rounded mb-3" style="background: #f8f9fa;">
    <h6 class="mb-3"><i class="bi bi-floppy"></i> Save Pattern Configuration</h6>

    @if (CurrentPattern != null)
    {
        <!-- Document Type Selection -->
        <div class="mb-3">
            <label class="form-label"><strong>Document Type</strong></label>
            <div class="input-group">
                <select @bind="selectedDocumentType" @bind:after="OnDocumentTypeChangedAsync" class="form-select">
                    <option value="">-- Select Document Type --</option>
                    @foreach (var docType in availableDocumentTypes)
                    {
                        <option value="@docType">@docType</option>
                    }
                </select>
                <input @bind="newDocumentType" class="form-control" placeholder="Or create new..." />
                <button @onclick="CreateNewDocumentType" class="btn btn-outline-primary" disabled="@(string.IsNullOrEmpty(newDocumentType))">
                    <i class="bi bi-plus"></i>
                </button>
            </div>
        </div>

        <!-- Sub-Collection (Format) Selection -->
        <div class="mb-3">
            <label class="form-label"><strong>Format / Sub-Collection</strong></label>
            <div class="input-group">
                <select @bind="selectedSubCollection" @bind:after="OnSubCollectionChangedAsync" class="form-select">
                    <option value="">-- Select Format --</option>
                    @foreach (var subColl in availableSubCollections)
                    {
                        <option value="@subColl">@subColl</option>
                    }
                </select>
                <input @bind="newSubCollection" class="form-control" placeholder="Or create new..." />
                <button @onclick="CreateNewSubCollection" class="btn btn-outline-primary" disabled="@(string.IsNullOrEmpty(newSubCollection))">
                    <i class="bi bi-plus"></i>
                </button>
            </div>
        </div>

        <!-- Pattern Name -->
        <div class="mb-3">
            <label class="form-label"><strong>Pattern Name</strong></label>
            <input @bind="patternName" class="form-control" placeholder="e.g., Date, Total, Fee, Note" />
        </div>

        <!-- Pattern Info Display -->
        @if (CurrentPattern != null)
        {
            <div class="mb-3 p-2 bg-light border rounded" style="font-size: 0.9rem;">
                <strong>From OCR:</strong>
                @CurrentPattern.PatternType | Keyword: "@CurrentPattern.KeyWord" |
                Tolerances: X:@CurrentPattern.ToleranceX Y:@CurrentPattern.ToleranceY
            </div>
        }

        <!-- MULTIPLE REGEX PATTERNS SECTION -->
        <div class="mb-3" style="background: #f0f8ff; padding: 10px; border-radius: 5px;">
            <label class="form-label"><strong>Regex Patterns</strong> (can have multiple)</label>

            <!-- Add new regex pattern -->
            <div class="input-group mb-2">
                <input @bind="newRegexPattern"
                       class="form-control form-control-sm"
                       placeholder="Enter regex pattern (e.g., \d+, [A-Z]+)"
                       style="font-family: monospace;" />
                <button @onclick="AddRegexPattern"
                        class="btn btn-outline-primary btn-sm"
                        disabled="@(string.IsNullOrEmpty(newRegexPattern))">
                    <i class="bi bi-plus"></i> Add
                </button>
            </div>

            <!-- List of current regex patterns -->
            @if (regexPatternsList.Any())
            {
                <div class="border rounded p-2" style="background: white;">
                    <small class="text-muted">Patterns to save:</small>
                    @foreach (var (pattern, index) in regexPatternsList.Select((p, i) => (p, i)))
                    {
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <code style="font-size: 0.85rem;">@pattern</code>
                            <button @onclick="() => RemoveRegexPattern(index)"
                                    class="btn btn-sm btn-outline-danger py-0 px-1">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <small class="text-muted">No regex patterns added yet (optional)</small>
            }
        </div>

        <!-- ✅ NEW: Date Parsing Configuration -->
        <div class="mb-3" style="background: #fff9e6; padding: 10px; border-radius: 5px;">
            <div class="d-flex align-items-center mb-2">
                <input @bind="needDateParsing"
                       type="checkbox"
                       class="form-check-input me-2"
                       id="needDateParsingCheck" />
                <label class="form-label mb-0" for="needDateParsingCheck">
                    <i class="bi bi-calendar3"></i> <strong>Need Date Parsing</strong>
                </label>
            </div>

            @if (needDateParsing)
            {
                <div class="ps-3" style="border-left: 3px solid #ffc107; background: #fffbf0; padding: 0.5rem; border-radius: 4px;">
                    <div class="mb-2">
                        <label class="form-label" style="font-size: 0.9rem;">Date Format Type</label>
                        <select @bind="selectedDateParsingType" class="form-select form-select-sm">
                            <option value="@DateParsingType.Thai">Thai dates (30 ส.ค. 68 → 2025/08/30)</option>
                            <option value="@DateParsingType.English">English dates (27 Aug 25 → 2025/08/27)</option>
                        </select>
                    </div>

                    <div class="date-parsing-info" style="background: #e7f3ff; padding: 0.375rem; border-radius: 3px; font-size: 0.75rem;">
                        <i class="bi bi-info-circle text-primary"></i>
                        @if (selectedDateParsingType == DateParsingType.Thai)
                        {
                            <span>Thai format: Uses Buddhist era (67-99 = 2024-2056). Examples: "30 ส.ค. 68", "15 ม.ค. 67"</span>
                        }
                        else
                        {
                            <span>English format: Standard Gregorian dates (00-30 = 2000-2030, 31-99 = 1931-1999). Examples: "27 Aug 25", "15 Jan 24"</span>
                        }
                    </div>
                </div>
            }
            else
            {
                <small class="form-text">Check to enable automatic date parsing and formatting</small>
            }
        </div>

        <!-- Existing Patterns List -->
        @if (existingPatterns.Any())
        {
            <div class="mb-3" style="background: #fff9e6; padding: 10px; border-radius: 5px;">
                <label class="form-label"><strong>Existing Patterns</strong></label>
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var pattern in existingPatterns)
                    {
                        <span class="badge bg-secondary">@pattern</span>
                    }
                </div>
            </div>
        }

        <!-- Save Button -->
        <div class="mb-3">
            <button @onclick="SavePattern"
                    class="btn btn-success"
                    disabled="@(string.IsNullOrEmpty(patternName) || CurrentPattern == null || isSaving)">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="bi bi-floppy"></i>
                Save "@patternName" to @selectedDocumentType → @selectedSubCollection
                @if (regexPatternsList.Any())
                {
                    <span class="badge bg-light text-dark ms-2">@regexPatternsList.Count regex</span>
                }
                @if (needDateParsing)
                {
                    <span class="badge bg-warning text-dark ms-2">📅 Date Parsing</span>
                }
            </button>
        </div>
    }

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") py-2">
            @((MarkupString)statusMessage)
        </div>
    }
</div>

@code {
    [Parameter] public SearchPattern? CurrentPattern { get; set; }
    [Parameter] public EventCallback OnPatternSaved { get; set; }

    // Document type and sub-collection
    private string selectedDocumentType = "";
    private string selectedSubCollection = "";
    private string newDocumentType = "";
    private string newSubCollection = "";
    private List<string> availableDocumentTypes = new();
    private List<string> availableSubCollections = new();

    // Pattern details
    private string patternName = "";
    private string newRegexPattern = "";
    private List<string> regexPatternsList = new();
    private List<string> existingPatterns = new();

    // ✅ NEW: Date parsing fields
    private bool needDateParsing = false;
    private DateParsingType selectedDateParsingType = DateParsingType.Thai;

    // UI state
    private bool isSaving = false;
    private string statusMessage = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentTypes();
    }

    protected override void OnParametersSet()
    {
        // If CurrentPattern has regex patterns from OCR analyzer, use them
        if (CurrentPattern?.RegexPatterns != null && CurrentPattern.RegexPatterns.Any())
        {
            regexPatternsList = new List<string>(CurrentPattern.RegexPatterns);
        }

        // ✅ NEW: Load date parsing settings from CurrentPattern if available
        if (CurrentPattern != null)
        {
            needDateParsing = CurrentPattern.NeedDateParsing;
            selectedDateParsingType = CurrentPattern.DateParsingType;
        }
    }

    private async Task LoadDocumentTypes()
    {
        try
        {
            availableDocumentTypes = await PatternService.GetCollectionNamesAsync();
        }
        catch (Exception ex)
        {
            ShowError($"Error loading document types: {ex.Message}");
        }
    }

    private async Task OnDocumentTypeChangedAsync()
    {
        selectedSubCollection = "";
        await LoadSubCollections();
    }

    private async Task LoadSubCollections()
    {
        if (string.IsNullOrEmpty(selectedDocumentType))
        {
            availableSubCollections = new();
            return;
        }

        try
        {
            availableSubCollections = await PatternService.GetSubCollectionNamesAsync(selectedDocumentType);
        }
        catch (Exception ex)
        {
            ShowError($"Error loading sub-collections: {ex.Message}");
        }
    }

    private async Task OnSubCollectionChangedAsync()
    {
        await LoadExistingPatterns();
    }

    private async Task LoadExistingPatterns()
    {
        if (string.IsNullOrEmpty(selectedDocumentType) || string.IsNullOrEmpty(selectedSubCollection))
        {
            existingPatterns = new();
            return;
        }

        try
        {
            existingPatterns = await PatternService.GetSearchPatternNamesAsync(selectedDocumentType, selectedSubCollection);
        }
        catch (Exception ex)
        {
            ShowError($"Error loading existing patterns: {ex.Message}");
        }
    }

    private void AddRegexPattern()
    {
        if (!string.IsNullOrWhiteSpace(newRegexPattern))
        {
            regexPatternsList.Add(newRegexPattern);
            newRegexPattern = "";
        }
    }

    private void RemoveRegexPattern(int index)
    {
        if (index >= 0 && index < regexPatternsList.Count)
        {
            regexPatternsList.RemoveAt(index);
        }
    }

    private async Task CreateNewDocumentType()
    {
        if (string.IsNullOrEmpty(newDocumentType))
            return;

        try
        {
            var tempPattern = new SearchPattern
                {
                    SearchName = "_temp",
                    KeyWord = "temp",
                    PatternType = "VerticalColumn",
                    RegexPatterns = new List<string>()
                };

            await PatternService.SaveSearchPatternAsync(newDocumentType, "_temp", "_temp", tempPattern);
            await PatternService.DeleteSearchPatternAsync(newDocumentType, "_temp", "_temp");

            await LoadDocumentTypes();
            selectedDocumentType = newDocumentType;
            newDocumentType = "";

            ShowSuccess($"Created document type '{selectedDocumentType}'");
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
    }

    private async Task CreateNewSubCollection()
    {
        if (string.IsNullOrEmpty(selectedDocumentType) || string.IsNullOrEmpty(newSubCollection))
            return;

        try
        {
            var tempPattern = new SearchPattern
                {
                    SearchName = "_temp",
                    KeyWord = "temp",
                    PatternType = "VerticalColumn",
                    RegexPatterns = new List<string>()
                };

            await PatternService.SaveSearchPatternAsync(selectedDocumentType, newSubCollection, "_temp", tempPattern);
            await PatternService.DeleteSearchPatternAsync(selectedDocumentType, newSubCollection, "_temp");

            await LoadSubCollections();
            selectedSubCollection = newSubCollection;
            newSubCollection = "";

            ShowSuccess($"Created format '{selectedSubCollection}'");
            await LoadExistingPatterns();
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
    }

    private async Task SavePattern()
    {
        if (CurrentPattern == null || string.IsNullOrEmpty(selectedDocumentType) ||
            string.IsNullOrEmpty(selectedSubCollection) || string.IsNullOrEmpty(patternName))
            return;

        try
        {
            isSaving = true;
            ClearStatus();
            StateHasChanged();

            var patternToSave = new SearchPattern
                {
                    SearchName = patternName,
                    KeyWord = CurrentPattern.KeyWord ?? "",
                    PatternType = CurrentPattern.PatternType ?? "VerticalColumn",
                    ToleranceX = CurrentPattern.ToleranceX,
                    ToleranceY = CurrentPattern.ToleranceY,
                    StopWords = CurrentPattern.StopWords ?? "",
                    RegexPatterns = regexPatternsList.Any() ? regexPatternsList : new List<string>(),
                    // ✅ NEW: Include date parsing configuration
                    NeedDateParsing = needDateParsing,
                    DateParsingType = selectedDateParsingType
                };

            var success = await PatternService.SaveSearchPatternAsync(
                selectedDocumentType,
                selectedSubCollection,
                patternName,
                patternToSave);

            if (success)
            {
                var message = $"✅ Pattern '<strong>{patternName}</strong>' saved";
                if (regexPatternsList.Any())
                {
                    message += $" with <strong>{regexPatternsList.Count}</strong> regex patterns";
                }
                if (needDateParsing)
                {
                    message += $" and <strong>{selectedDateParsingType}</strong> date parsing";
                }
                message += "!";

                ShowSuccess(message);

                // Clear for next pattern
                patternName = "";
                regexPatternsList = new();
                newRegexPattern = "";
                needDateParsing = false;
                selectedDateParsingType = DateParsingType.Thai;

                await LoadExistingPatterns();
                await OnPatternSaved.InvokeAsync();
            }
            else
            {
                ShowError("Failed to save pattern");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        isError = false;
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        isError = true;
    }

    private void ClearStatus()
    {
        statusMessage = "";
        isError = false;
    }
}