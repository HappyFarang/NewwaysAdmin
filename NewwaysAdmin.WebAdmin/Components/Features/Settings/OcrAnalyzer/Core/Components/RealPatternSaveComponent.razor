@* NewwaysAdmin.WebAdmin/Components/Features/Settings/OcrAnalyzer/Core/Components/RealPatternSaveComponent.razor *@
@using NewwaysAdmin.SharedModels.Services.Ocr
@using NewwaysAdmin.SharedModels.Models.Ocr
@using System.Text.Json
@inject PatternManagementService PatternService

<div style="background: #e8f5e8; padding: 15px; margin: 10px; border: 2px solid #28a745; border-radius: 8px;">
    <h6><i class="bi bi-floppy"></i> Save Pattern - REAL VERSION</h6>

    <!-- Current Pattern Info -->
    @if (CurrentPattern != null)
    {
        <div class="mb-3">
            <strong>Current Pattern:</strong>
            <div style="background: #f8f9fa; padding: 8px; border-radius: 4px; font-family: monospace; font-size: 0.8em;">
                Type: @CurrentPattern.PatternType |
                Keyword: "@CurrentPattern.KeyWord" |
                X: @CurrentPattern.ToleranceX, Y: @CurrentPattern.ToleranceY
            </div>
        </div>
    }

    <!-- Save Form -->
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Collection Name</label>
            <input @bind="collectionName" class="form-control form-control-sm"
                   placeholder="e.g., BankSlips, Invoices" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Pattern Name</label>
            <input @bind="patternName" class="form-control form-control-sm"
                   placeholder="e.g., Date, Total, Account" />
        </div>
    </div>

    <!-- Save Button -->
    <div class="mt-3">
        <button @onclick="SavePattern"
                class="btn btn-success btn-sm"
                disabled="@(string.IsNullOrEmpty(collectionName) || string.IsNullOrEmpty(patternName) || CurrentPattern == null || isSaving)">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            <i class="bi bi-floppy"></i> Save Pattern
        </button>

        @if (!string.IsNullOrEmpty(lastSavedJson))
        {
            <button @onclick="ToggleJsonView" class="btn btn-outline-info btn-sm ms-2">
                <i class="bi bi-code"></i> @(showJson ? "Hide" : "Show") JSON
            </button>
        }
    </div>

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3 mb-0 py-2">
            <i class="bi @(isError ? "bi-exclamation-triangle" : "bi-check-circle")"></i>
            @statusMessage
        </div>
    }

    <!-- JSON Output (for debugging) -->
    @if (showJson && !string.IsNullOrEmpty(lastSavedJson))
    {
        <div class="mt-3">
            <strong>Saved JSON:</strong>
            <pre style="background: #2d3748; color: #e2e8f0; padding: 10px; border-radius: 4px; font-size: 0.75em; max-height: 200px; overflow-y: auto;">@lastSavedJson</pre>
        </div>
    }
</div>

@code {
    [Parameter] public SearchPattern? CurrentPattern { get; set; }
    [Parameter] public EventCallback OnPatternSaved { get; set; }

    private string collectionName = "";
    private string patternName = "";
    private bool isSaving = false;
    private string statusMessage = "";
    private bool isError = false;
    private string lastSavedJson = "";
    private bool showJson = false;

    protected override void OnParametersSet()
    {
        // Auto-populate pattern name if we have SearchName
        if (CurrentPattern != null && !string.IsNullOrEmpty(CurrentPattern.SearchName) && string.IsNullOrEmpty(patternName))
        {
            patternName = CurrentPattern.SearchName;
        }
    }

    private async Task SavePattern()
    {
        if (CurrentPattern == null || string.IsNullOrEmpty(collectionName) || string.IsNullOrEmpty(patternName))
            return;

        try
        {
            isSaving = true;
            ClearStatus();
            StateHasChanged();

            // Create the pattern to save
            var patternToSave = new SearchPattern
                {
                    SearchName = patternName,
                    KeyWord = CurrentPattern.KeyWord ?? "",
                    PatternType = CurrentPattern.PatternType ?? "VerticalColumn",
                    ToleranceX = CurrentPattern.ToleranceX,
                    ToleranceY = CurrentPattern.ToleranceY,
                    StopWords = CurrentPattern.StopWords ?? "",
                    RegexPatterns = CurrentPattern.RegexPatterns ?? new List<string>()
                };

            // Save the JSON for debugging
            lastSavedJson = JsonSerializer.Serialize(patternToSave, new JsonSerializerOptions
                {
                    WriteIndented = true
                });

            // Save using the service
            var success = await PatternService.SaveSearchPatternAsync(collectionName, patternName, patternToSave);

            if (success)
            {
                ShowSuccess($"✅ Pattern '{patternName}' saved to collection '{collectionName}'!");

                // Also show the library structure
                var library = await PatternService.LoadLibraryAsync();
                var libraryJson = JsonSerializer.Serialize(library, new JsonSerializerOptions
                    {
                        WriteIndented = true
                    });

                Console.WriteLine("=== FULL LIBRARY AFTER SAVE ===");
                Console.WriteLine(libraryJson);

                // Notify parent
                await OnPatternSaved.InvokeAsync();
            }
            else
            {
                ShowError("❌ Failed to save pattern. Check console for errors.");
            }
        }
        catch (Exception ex)
        {
            ShowError($"❌ Error saving pattern: {ex.Message}");
            Console.WriteLine($"Save error: {ex}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ToggleJsonView()
    {
        showJson = !showJson;
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        isError = false;
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        isError = true;
    }

    private void ClearStatus()
    {
        statusMessage = "";
        isError = false;
    }
}