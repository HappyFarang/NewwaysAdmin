@* NewwaysAdmin.WebAdmin/Components/Features/Settings/OcrAnalyzer/Core/Components/PatternLoadComponent.razor *@
@using NewwaysAdmin.SharedModels.Models.Ocr
@using NewwaysAdmin.SharedModels.Services.Ocr
@inject PatternManagementService PatternService
@inject IJSRuntime JSRuntime

<div class="pattern-load-panel">
    <h6><i class="bi bi-folder-open"></i> Load Pattern</h6>
    
    <!-- Collection Selection -->
    <div class="mb-3">
        <label class="form-label">Collection</label>
        <div class="input-group">
            <select @onchange="OnCollectionChanged" class="form-select" value="@selectedCollection">
                <option value="">-- Select Collection --</option>
                @foreach (var collection in availableCollections)
                {
                    <option value="@collection">@collection</option>
                }
            </select>
            <button @onclick="LoadCollections" class="btn btn-outline-secondary" type="button" title="Refresh">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <!-- Pattern Selection (only show when collection is selected) -->
    @if (!string.IsNullOrEmpty(selectedCollection))
    {
        <div class="mb-3">
            <label class="form-label">Pattern</label>
            <select @bind="selectedPattern" class="form-select">
                <option value="">-- Select Pattern --</option>
                @foreach (var pattern in availablePatterns)
                {
                    <option value="@pattern">@pattern</option>
                }
            </select>
        </div>
    }

    <!-- Load Button -->
    <div class="d-grid">
        <button @onclick="LoadSelectedPattern" 
                class="btn btn-success" 
                disabled="@(string.IsNullOrEmpty(selectedCollection) || string.IsNullOrEmpty(selectedPattern) || isLoading)">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            <i class="bi bi-download"></i> Load Pattern
        </button>
    </div>

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3 mb-0">
            <i class="bi @(isError ? "bi-exclamation-triangle" : "bi-check-circle")"></i>
            @statusMessage
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<SearchPattern> OnPatternLoaded { get; set; }
    
    private List<string> availableCollections = new();
    private List<string> availablePatterns = new();
    private string selectedCollection = "";
    private string selectedPattern = "";
    private bool isLoading = false;
    private string statusMessage = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCollections();
    }

    private async Task LoadCollections()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            availableCollections = await PatternService.GetCollectionNamesAsync();
            
            // Clear pattern selection if collection list changed
            selectedCollection = "";
            selectedPattern = "";
            availablePatterns.Clear();
            
            ClearStatus();
        }
        catch (Exception ex)
        {
            ShowError($"Error loading collections: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnCollectionChanged(ChangeEventArgs e)
    {
        selectedCollection = e.Value?.ToString() ?? "";
        selectedPattern = "";
        availablePatterns.Clear();
        
        if (!string.IsNullOrEmpty(selectedCollection))
        {
            try
            {
                availablePatterns = await PatternService.GetSearchPatternNamesAsync(selectedCollection);
                ClearStatus();
            }
            catch (Exception ex)
            {
                ShowError($"Error loading patterns: {ex.Message}");
            }
        }
        
        StateHasChanged();
    }

    private async Task LoadSelectedPattern()
    {
        if (string.IsNullOrEmpty(selectedCollection) || string.IsNullOrEmpty(selectedPattern))
            return;

        try
        {
            isLoading = true;
            ClearStatus();
            StateHasChanged();

            var pattern = await PatternService.LoadSearchPatternAsync(selectedCollection, selectedPattern);
            
            if (pattern != null)
            {
                // Notify parent component that pattern was loaded
                await OnPatternLoaded.InvokeAsync(pattern);
                
                ShowSuccess($"Pattern '{selectedPattern}' loaded successfully!");
            }
            else
            {
                ShowError($"Pattern '{selectedPattern}' not found in collection '{selectedCollection}'");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Error loading pattern: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowSuccess(string message)
    {
        statusMessage = message;
        isError = false;
    }

    private void ShowError(string message)
    {
        statusMessage = message;
        isError = true;
    }

    private void ClearStatus()
    {
        statusMessage = "";
        isError = false;
    }
}