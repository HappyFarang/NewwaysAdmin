@using NewwaysAdmin.WebAdmin.Models.Auth
@using NewwaysAdmin.WebAdmin.Services.Modules
@using NewwaysAdmin.WebAdmin.Services.Auth
@namespace NewwaysAdmin.WebAdmin.Components.Features.Settings.Accounts

<div class="modal fade show" style="display: block" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsNewUser ? "Create User" : $"Edit User: {Model.Username}")</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(_validationMessage))
                    {
                        <div class="alert alert-danger">
                            @_validationMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText @bind-Value="Model.Username" class="form-control" disabled="@(!IsNewUser)" />
                    </div>

                    @if (IsNewUser)
                    {
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Password" class="form-control" />
                        </div>
                    }

                    <div class="mb-3">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Model.IsActive" class="form-check-input" id="isActive" />
                            <label class="form-check-label" for="isActive">Active</label>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Page Permissions</h6>
                        </div>
                        <div class="card-body">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Page</th>
                                        <th>Access Level</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var module in ModuleDefinitions.GetModules())
                                    {
                                        var pageAccess = Model.PageAccess.FirstOrDefault(p => p.NavigationId == module.Id);
                                        var currentLevel = pageAccess?.AccessLevel ?? AccessLevel.None;

                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="@module.Icon me-2"></i>
                                                    @module.Name
                                                </div>
                                            </td>
                                            <td>
                                                <select class="form-select"
                                                        value="@currentLevel"
                                                        @onchange="@(e => UpdateAccess(module.Id, Enum.Parse<AccessLevel>(e.Value?.ToString() ?? "None")))">
                                                    <option value="@AccessLevel.None">No Access</option>
                                                    <option value="@AccessLevel.Read">Read Only</option>
                                                    <option value="@AccessLevel.ReadWrite">Read & Write</option>
                                                </select>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public User Model { get; set; } = null!;
    [Parameter] public bool IsNewUser { get; set; }
    [Parameter] public EventCallback<User> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string Password { get; set; } = string.Empty;
    private string? _validationMessage;

    private void UpdateAccess(string navigationId, AccessLevel level)
    {
        var existingAccess = Model.PageAccess.FirstOrDefault(p => p.NavigationId == navigationId);

        if (existingAccess != null)
        {
            existingAccess.AccessLevel = level;
        }
        else
        {
            Model.PageAccess.Add(new UserPageAccess
                {
                    NavigationId = navigationId,
                    AccessLevel = level
                });
        }
    }

    private async Task HandleValidSubmit()
    {
        if (IsNewUser)
        {
            if (string.IsNullOrWhiteSpace(Password))
            {
                _validationMessage = "Password is required.";
                return;
            }

            if (Password.Length < 6)
            {
                _validationMessage = "Password must be at least 6 characters long.";
                return;
            }

            var salt = PasswordHasher.GenerateSalt();
            var hash = PasswordHasher.HashPassword(Password, salt);

            Model.Salt = salt;
            Model.PasswordHash = hash;
        }

        _validationMessage = null;
        await OnSave.InvokeAsync(Model);
    }
}