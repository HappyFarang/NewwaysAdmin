@using NewwaysAdmin.WebAdmin.Models.Auth
@using NewwaysAdmin.WebAdmin.Models.Navigation
@using NewwaysAdmin.WebAdmin.Services.Modules
@using NewwaysAdmin.WebAdmin.Services.Auth
@namespace NewwaysAdmin.WebAdmin.Components.Features.Settings.Accounts

<div class="modal fade show" style="display: block" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsNewUser ? "Create User" : $"Edit User: {Model.Username}")</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(_validationMessage))
                    {
                        <div class="alert alert-danger">
                            @_validationMessage
                        </div>
                    }

                    <!-- Basic User Info -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="Model.Username" class="form-control" disabled="@(!IsNewUser)" />
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mt-4">
                                <InputCheckbox @bind-Value="Model.IsActive" class="form-check-input" id="isActive" />
                                <label class="form-check-label" for="isActive">Active</label>
                            </div>
                        </div>
                    </div>

                    @if (IsNewUser)
                    {
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label class="form-label">Password</label>
                                <InputText type="password" @bind-Value="Password" class="form-control" />
                            </div>
                        </div>
                    }

                    <!-- Page Permissions -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0">Page Permissions</h6>
                        </div>
                        <div class="card-body">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Module</th>
                                        <th>Access Level</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @* Main modules *@
                                    @foreach (var module in ModuleDefinitions.GetModules())
                                    {
                                        var pageAccess = Model.PageAccess.FirstOrDefault(p => p.NavigationId == module.Id);
                                        var currentLevel = pageAccess?.AccessLevel ?? AccessLevel.None;

                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="@module.Icon me-2"></i>
                                                    <strong>@module.Name</strong>
                                                </div>
                                            </td>
                                            <td>
                                                <select class="form-select"
                                                        value="@currentLevel"
                                                        @onchange="@(e => UpdatePageAccess(module.Id, Enum.Parse<AccessLevel>(e.Value?.ToString() ?? "None")))">
                                                    <option value="@AccessLevel.None">No Access</option>
                                                    <option value="@AccessLevel.Read">Read Only</option>
                                                    <option value="@AccessLevel.ReadWrite">Read & Write</option>
                                                </select>
                                            </td>
                                        </tr>

                                        @* Show accounting sub-modules if user has accounting access *@
                                        @if (module.Id == "accounting" && currentLevel != AccessLevel.None)
                                        {
                                            @foreach (var subModule in ModuleDefinitions.GetAccountingSubModules())
                                            {
                                                var subPageAccess = Model.PageAccess.FirstOrDefault(p => p.NavigationId == subModule.Id);
                                                var subCurrentLevel = subPageAccess?.AccessLevel ?? AccessLevel.None;

                                                <tr class="table-light">
                                                    <td>
                                                        <div class="d-flex align-items-center ps-4">
                                                            <i class="@subModule.Icon me-2 text-muted"></i>
                                                            <span class="text-muted">↳ @subModule.Name</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <select class="form-select form-select-sm"
                                                                value="@subCurrentLevel"
                                                                @onchange="@(e => UpdatePageAccess(subModule.Id, Enum.Parse<AccessLevel>(e.Value?.ToString() ?? "None")))">
                                                            <option value="@AccessLevel.None">No Access</option>
                                                            <option value="@AccessLevel.Read">Read Only</option>
                                                            <option value="@AccessLevel.ReadWrite">Read & Write</option>
                                                        </select>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Module Configurations -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Module Configurations</h6>
                            <small class="text-muted">Configure module-specific settings for this user</small>
                        </div>
                        <div class="card-body">
                            @foreach (var module in GetModulesWithConfigs())
                            {
                                var hasAccess = Model.PageAccess.Any(p => p.NavigationId == module.Id && p.AccessLevel != AccessLevel.None);
                                var moduleConfig = Model.ModuleConfigs.GetValueOrDefault(module.Id);

                                <div class="module-config-section mb-4 p-3 border rounded @(hasAccess ? "" : "bg-light")">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div class="d-flex align-items-center">
                                            <i class="@module.Icon me-2"></i>
                                            <strong>@module.Name</strong>
                                            @if (!hasAccess)
                                            {
                                                <span class="badge bg-warning ms-2">No Page Access</span>
                                            }
                                        </div>
                                        @if (hasAccess)
                                        {
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox"
                                                       checked="@(moduleConfig?.IsEnabled ?? false)"
                                                       @onchange="@(e => ToggleModuleConfig(module.Id, (bool)e.Value!))" />
                                                <label class="form-check-label">Enable Module</label>
                                            </div>
                                        }
                                    </div>

                                    @if (hasAccess && (moduleConfig?.IsEnabled ?? false))
                                    {
                                        <div class="module-settings">
                                            @if (module.Id == "accounting.bankslips")
                                            {
                                                <!-- Bank Slips Collection Access -->
                                                <div class="card bg-light">
                                                    <div class="card-header">
                                                        <h6 class="mb-0">
                                                            <i class="bi bi-collection me-2"></i>
                                                            Collection Access
                                                        </h6>
                                                        <small class="text-muted">Select which bank slip collections this user can access</small>
                                                    </div>
                                                    <div class="card-body">
                                                        @if (_availableCollections?.Any() == true)
                                                        {
                                                            <div class="row">
                                                                @foreach (var collection in _availableCollections)
                                                                {
                                                                    var isAccessible = moduleConfig?.AccessibleCollectionIds?.Contains(collection.Id) ?? false;

                                                                    <div class="col-md-6 mb-3">
                                                                        <div class="form-check">
                                                                            <input class="form-check-input" type="checkbox"
                                                                                   id="collection_@collection.Id"
                                                                                   checked="@isAccessible"
                                                                                   @onchange="@(e => ToggleCollectionAccess(module.Id, collection.Id, (bool)e.Value!))" />
                                                                            <label class="form-check-label" for="collection_@collection.Id">
                                                                                <strong>@collection.Name</strong>
                                                                                <br />
                                                                                <small class="text-muted">@collection.Description</small>
                                                                                <br />
                                                                                <small class="text-muted">
                                                                                    <i class="bi bi-folder me-1"></i>
                                                                                    @collection.SourceDirectory
                                                                                </small>
                                                                            </label>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else if (_isLoadingCollections)
                                                        {
                                                            <div class="text-center">
                                                                <div class="spinner-border spinner-border-sm" role="status">
                                                                    <span class="visually-hidden">Loading collections...</span>
                                                                </div>
                                                                <span class="ms-2">Loading available collections...</span>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="alert alert-info mb-0">
                                                                <i class="bi bi-info-circle me-2"></i>
                                                                No bank slip collections are currently available.
                                                                Collections must be created by an administrator in the Bank Slips module.
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                            @* Add other module configurations here as needed *@
                                        </div>
                                    }

                                    @if (!hasAccess)
                                    {
                                        <p class="text-muted mb-0">Grant page access first to configure this module.</p>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public User Model { get; set; } = null!;
    [Parameter] public bool IsNewUser { get; set; }
    [Parameter] public EventCallback<User> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string Password { get; set; } = string.Empty;
    private string? _validationMessage;
    private List<SlipCollection>? _availableCollections;
    private bool _isLoadingCollections = false;

    // Define which modules need specific configurations
    private readonly HashSet<string> _modulesWithConfigs = new() { "accounting.bankslips" };

    private IEnumerable<NavigationItem> GetModulesWithConfigs()
    {
        return ModuleDefinitions.GetAllModulesFlat().Where(m => _modulesWithConfigs.Contains(m.Id));
    }

    private void UpdatePageAccess(string navigationId, AccessLevel level)
    {
        var existingAccess = Model.PageAccess.FirstOrDefault(p => p.NavigationId == navigationId);

        if (existingAccess != null)
        {
            existingAccess.AccessLevel = level;
        }
        else if (level != AccessLevel.None)
        {
            Model.PageAccess.Add(new UserPageAccess
                {
                    NavigationId = navigationId,
                    AccessLevel = level
                });
        }

        // Special handling for accounting module
        if (navigationId == "accounting" && level == AccessLevel.None)
        {
            // If removing accounting access, also remove all sub-module access
            var subModulesToRemove = Model.PageAccess
                .Where(p => p.NavigationId.StartsWith("accounting."))
                .ToList();

            foreach (var subModule in subModulesToRemove)
            {
                Model.PageAccess.Remove(subModule);
            }

            // Also disable any related module configs
            var configsToDisable = Model.ModuleConfigs.Keys
                .Where(k => k.StartsWith("accounting."))
                .ToList();

            foreach (var configKey in configsToDisable)
            {
                Model.ModuleConfigs[configKey].IsEnabled = false;
            }
        }

        // If removing page access, also disable the module config
        if (level == AccessLevel.None && Model.ModuleConfigs.ContainsKey(navigationId))
        {
            Model.ModuleConfigs[navigationId].IsEnabled = false;
        }

        StateHasChanged();
    }

    private void ToggleModuleConfig(string moduleId, bool isEnabled)
    {
        if (!Model.ModuleConfigs.ContainsKey(moduleId))
        {
            Model.ModuleConfigs[moduleId] = new UserModuleConfig
                {
                    ModuleId = moduleId,
                    IsEnabled = isEnabled,
                    ConfiguredAt = DateTime.UtcNow,
                    ConfiguredBy = "Admin", // TODO: Get current user
                    Settings = new Dictionary<string, string>()
                };
        }
        else
        {
            Model.ModuleConfigs[moduleId].IsEnabled = isEnabled;
        }

        StateHasChanged();
    }

    private void UpdateModuleSetting(string moduleId, string settingKey, string value)
    {
        if (!Model.ModuleConfigs.ContainsKey(moduleId))
        {
            Model.ModuleConfigs[moduleId] = new UserModuleConfig
                {
                    ModuleId = moduleId,
                    IsEnabled = true,
                    ConfiguredAt = DateTime.UtcNow,
                    ConfiguredBy = "Admin", // TODO: Get current user
                    Settings = new Dictionary<string, string>()
                };
        }

        Model.ModuleConfigs[moduleId].Settings[settingKey] = value;
    }
    private void ToggleCollectionAccess(string moduleId, string collectionId, bool hasAccess)
    {
        if (!Model.ModuleConfigs.ContainsKey(moduleId))
        {
            Model.ModuleConfigs[moduleId] = new UserModuleConfig
                {
                    ModuleId = moduleId,
                    IsEnabled = true,
                    ConfiguredAt = DateTime.UtcNow,
                    ConfiguredBy = "Admin",
                    Settings = new Dictionary<string, string>(),
                    AccessibleCollectionIds = new List<string>()
                };
        }

        var moduleConfig = Model.ModuleConfigs[moduleId];
        moduleConfig.AccessibleCollectionIds ??= new List<string>();

        if (hasAccess)
        {
            if (!moduleConfig.AccessibleCollectionIds.Contains(collectionId))
            {
                moduleConfig.AccessibleCollectionIds.Add(collectionId);
            }
        }
        else
        {
            moduleConfig.AccessibleCollectionIds.Remove(collectionId);
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (IsNewUser)
        {
            if (string.IsNullOrWhiteSpace(Password))
            {
                _validationMessage = "Password is required.";
                return;
            }

            if (Password.Length < 6)
            {
                _validationMessage = "Password must be at least 6 characters long.";
                return;
            }

            var salt = PasswordHasher.GenerateSalt();
            var hash = PasswordHasher.HashPassword(Password, salt);

            Model.Salt = salt;
            Model.PasswordHash = hash;
        }

        // Clean up module configs for modules without access
        var accessibleModules = Model.PageAccess
            .Where(p => p.AccessLevel != AccessLevel.None)
            .Select(p => p.NavigationId)
            .ToHashSet();

        var configsToRemove = Model.ModuleConfigs.Keys
            .Where(moduleId => !accessibleModules.Contains(moduleId))
            .ToList();

        foreach (var moduleId in configsToRemove)
        {
            Model.ModuleConfigs.Remove(moduleId);
        }

        _validationMessage = null;
        await OnSave.InvokeAsync(Model);
    }
}