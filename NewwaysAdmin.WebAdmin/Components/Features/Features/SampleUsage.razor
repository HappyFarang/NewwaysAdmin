@page "/test-sheets"
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.SharedModels.BankSlips
@inject BankSlipExportService ExportService
@inject ILogger<SampleUsage> Logger

<h3>Test Google Sheets Export</h3>

<button class="btn btn-primary" @onclick="TestExport">Test Export Bank Slips</button>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-info mt-3">@_message</div>
}

@code {
    private string _message = string.Empty;

    private async Task TestExport()
    {
        try
        {
            _message = "Exporting...";
            StateHasChanged();

            // Create sample data
            var sampleData = new List<BankSlipData>
            {
                new BankSlipData
                {
                    TransactionDate = DateTime.Now.AddYears(543), // Buddhist calendar
                    Amount = 1500.00m,
                    AccountName = "John Smith",
                    AccountNumber = "xxx-1234-567",
                    ReceiverName = "Jane Doe",
                    ReceiverAccount = "xxx-9876-543",
                    Note = "Office supplies purchase",
                    OriginalFilePath = "sample1.jpg"
                },
                new BankSlipData
                {
                    TransactionDate = DateTime.Now.AddDays(-1).AddYears(543),
                    Amount = 750.50m,
                    AccountName = "John Smith",
                    AccountNumber = "xxx-1234-567",
                    ReceiverName = "ABC Company",
                    ReceiverAccount = "xxx-5555-666",
                    Note = "Monthly service fee",
                    OriginalFilePath = "sample2.jpg"
                }
            };

            var result = await ExportService.ExportBankSlipsAsync(
                "testuser", // Replace with actual user
                sampleData,
                DateTime.Now.AddDays(-7),
                DateTime.Now);

            if (result.Success)
            {
                _message = $"✓ Export successful! Sheet URL: {result.SheetUrl}";
            }
            else
            {
                _message = $"✗ Export failed: {string.Join(", ", result.Errors)}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during test export");
            _message = $"Error: {ex.Message}";
        }

        StateHasChanged();
    }
}