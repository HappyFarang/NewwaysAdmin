@* NewwaysAdmin.WebAdmin/Components/Features/GoogleSheets/EnhancedTemplateDesigner.razor *@
@using NewwaysAdmin.GoogleSheets.Models.Templates
@using NewwaysAdmin.GoogleSheets.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IEnhancedSheetTemplateService TemplateService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="enhanced-template-designer">
    <!-- Header -->
    <div class="designer-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h3 class="mb-1">
                    <i class="bi bi-grid-3x3-gap me-2"></i>
                    @if (IsEditing)
                    {
                        <span>Edit Template: @CurrentTemplate?.Name</span>
                    }
                    else
                    {
                        <span>Create Enhanced Sheet Template</span>
                    }
                </h3>
                <small class="text-muted">Design interactive Google Sheets with formulas and checkboxes</small>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary" @onclick="ShowPreview" disabled="@_isSaving">
                    <i class="bi bi-eye me-1"></i>Preview
                </button>
                <button class="btn btn-success" @onclick="SaveTemplate" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="bi bi-save me-1"></i>Save Template
                </button>
                @if (OnCancel.HasDelegate)
                {
                    <button class="btn btn-outline-secondary" @onclick="OnCancel">Cancel</button>
                }
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="alert @(_statusIsError ? "alert-danger" : "alert-success") alert-dismissible mb-4">
            @_statusMessage
            <button type="button" class="btn-close" @onclick="() => _statusMessage = string.Empty"></button>
        </div>
    }

    <!-- Main Designer Layout -->
    <div class="row">
        <!-- Left Panel - Configuration -->
        <div class="col-lg-4">
            <div class="configuration-panel">
                <!-- Basic Settings -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-gear me-2"></i>Template Settings</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Template Name *</label>
                            <input type="text" class="form-control" @bind="CurrentTemplate.Name"
                                   placeholder="e.g., Bank Slips with Verification" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Description</label>
                            <textarea class="form-control" rows="2" @bind="CurrentTemplate.Description"
                                      placeholder="Describe what this template is used for"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Data Type *</label>
                            <select class="form-select" @bind="CurrentTemplate.DataType">
                                <option value="">Select Data Type...</option>
                                <option value="BankSlipData">Bank Slip Data</option>
                                <option value="SalesData">Sales Data</option>
                                <option value="ReturnsData">Returns Data</option>
                                <option value="CustomData">Custom Data</option>
                            </select>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.IsActive" id="isActive" />
                            <label class="form-check-label" for="isActive">Template is Active</label>
                        </div>
                    </div>
                </div>

                <!-- Formatting Options -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-palette me-2"></i>Sheet Formatting</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.FreezeHeaderRow" id="freezeHeader" />
                                    <label class="form-check-label" for="freezeHeader">Freeze Header</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.FreezeFormulaRow" id="freezeFormula" />
                                    <label class="form-check-label" for="freezeFormula">Freeze Formula Row</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.AddAutoFilter" id="autoFilter" />
                                    <label class="form-check-label" for="autoFilter">Auto Filter</label>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.AlternateRowColors" id="alternateRows" />
                                    <label class="form-check-label" for="alternateRows">Alternate Rows</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.AddBorders" id="addBorders" />
                                    <label class="form-check-label" for="addBorders">Add Borders</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.ProtectSheet" id="protectSheet" />
                                    <label class="form-check-label" for="protectSheet">Protect Sheet</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-6">
                                <label class="form-label small">Header Color</label>
                                <input type="color" class="form-control form-control-color"
                                       @bind="CurrentTemplate.Formatting.HeaderBackgroundColor" />
                            </div>
                            <div class="col-6">
                                <label class="form-label small">Alternate Color</label>
                                <input type="color" class="form-control form-control-color"
                                       @bind="CurrentTemplate.Formatting.AlternateColor" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-lightning me-2"></i>Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm" @onclick="AutoGenerateColumns"
                                    disabled="@(string.IsNullOrEmpty(CurrentTemplate.DataType))">
                                <i class="bi bi-magic me-1"></i>Auto-Generate Columns
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="AddDefaultFormulas">
                                <i class="bi bi-calculator me-1"></i>Add Default Formulas
                            </button>
                            <button class="btn btn-outline-info btn-sm" @onclick="AddDefaultCheckboxes">
                                <i class="bi bi-check-square me-1"></i>Add Default Checkboxes
                            </button>
                            <button class="btn btn-outline-warning btn-sm" @onclick="ResetTemplate">
                                <i class="bi bi-arrow-clockwise me-1"></i>Reset Template
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Panel - Visual Designer -->
        <div class="col-lg-8">
            <div class="visual-designer">
                <!-- Sheet Layout Tabs -->
                <ul class="nav nav-tabs mb-3" id="designerTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(_activeTab == "columns" ? "active" : "")"
                                @onclick="SetColumnsTab" type="button">
                            <i class="bi bi-columns me-1"></i>Data Columns (@CurrentTemplate.DataColumns.Count)
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(_activeTab == "formulas" ? "active" : "")"
                                @onclick="SetFormulasTab" type="button">
                            <i class="bi bi-calculator me-1"></i>Formula Rows (@CurrentTemplate.FormulaRows.Count)
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(_activeTab == "checkboxes" ? "active" : "")"
                                @onclick="SetCheckboxesTab" type="button">
                            <i class="bi bi-check-square me-1"></i>Checkboxes (@CurrentTemplate.CheckboxColumns.Count)
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(_activeTab == "preview" ? "active" : "")"
                                @onclick="SetPreviewTab" type="button">
                            <i class="bi bi-eye me-1"></i>Preview
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content">
                    <!-- Data Columns Tab -->
                    @if (_activeTab == "columns")
                    {
                        <div class="designer-section">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Data Columns Configuration</h6>
                                <div class="btn-group">
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="ReorderColumns" title="Reorder columns by index">
                                        <i class="bi bi-arrow-up-down me-1"></i>Reorder
                                    </button>
                                    <button class="btn btn-primary btn-sm" @onclick="AddDataColumn">
                                        <i class="bi bi-plus-circle me-1"></i>Add Column
                                    </button>
                                </div>
                            </div>

                            @if (CurrentTemplate.DataColumns.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th width="60">Order</th>
                                                <th>Header</th>
                                                <th>Data Field</th>
                                                <th width="100">Format</th>
                                                <th width="80">Width</th>
                                                <th width="60">Visible</th>
                                                <th width="80">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var column in CurrentTemplate.DataColumns.OrderBy(c => c.Index))
                                            {
                                                <tr>
                                                    <td>
                                                        <input type="number" class="form-control form-control-sm" style="width: 50px;"
                                                               @bind="column.Index" min="0" />
                                                    </td>
                                                    <td>
                                                        <input type="text" class="form-control form-control-sm"
                                                               @bind="column.Header" placeholder="Column Header" />
                                                    </td>
                                                    <td>
                                                        <select class="form-select form-select-sm" @bind="column.DataField">
                                                            <option value="">Select Field...</option>
                                                            @foreach (var field in GetAvailableDataFields())
                                                            {
                                                                <option value="@field">@field</option>
                                                            }
                                                        </select>
                                                    </td>
                                                    <td>
                                                        <input type="text" class="form-control form-control-sm"
                                                               @bind="column.Format" placeholder="#,##0.00" />
                                                    </td>
                                                    <td>
                                                        <input type="number" class="form-control form-control-sm"
                                                               @bind="column.Width" min="50" max="500" />
                                                    </td>
                                                    <td class="text-center">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" @bind="column.IsVisible" />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm">
                                                            <button class="btn btn-outline-info" @onclick="() => ConfigureColumnAdvanced(column)"
                                                                    title="Advanced Settings">
                                                                <i class="bi bi-gear"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => RemoveDataColumn(column)">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5 text-muted">
                                    <i class="bi bi-columns display-1 mb-3"></i>
                                    <h5>No Data Columns Configured</h5>
                                    <p>Add columns to define what data will be exported to the sheet.</p>
                                    <button class="btn btn-primary" @onclick="AddDataColumn">
                                        <i class="bi bi-plus-circle me-1"></i>Add Your First Column
                                    </button>
                                </div>
                            }
                        </div>
                    }

                    <!-- Formula Rows Tab -->
                    @if (_activeTab == "formulas")
                    {
                        <div class="designer-section">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Formula Rows (Row 2 typically)</h6>
                                <button class="btn btn-primary btn-sm" @onclick="AddFormulaRow">
                                    <i class="bi bi-plus-circle me-1"></i>Add Formula Row
                                </button>
                            </div>

                            @if (CurrentTemplate.FormulaRows.Any())
                            {
                                @foreach (var formulaRow in CurrentTemplate.FormulaRows)
                                {
                                    <div class="card mb-3">
                                        <div class="card-header d-flex justify-content-between align-items-center py-2">
                                            <h6 class="mb-0">Row @formulaRow.RowIndex</h6>
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveFormulaRow(formulaRow)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                        <div class="card-body">
                                            <div class="row mb-3">
                                                <div class="col-3">
                                                    <label class="form-label small">Row Index</label>
                                                    <input type="number" class="form-control form-control-sm" @bind="formulaRow.RowIndex" min="1" max="10" />
                                                </div>
                                                <div class="col-3">
                                                    <label class="form-label small">Background Color</label>
                                                    <input type="color" class="form-control form-control-color" @bind="formulaRow.BackgroundColor" />
                                                </div>
                                                <div class="col-3">
                                                    <div class="form-check mt-4">
                                                        <input class="form-check-input" type="checkbox" @bind="formulaRow.IsBold" />
                                                        <label class="form-check-label">Bold</label>
                                                    </div>
                                                </div>
                                                <div class="col-3">
                                                    <div class="form-check mt-4">
                                                        <input class="form-check-input" type="checkbox" @bind="formulaRow.IsLocked" />
                                                        <label class="form-check-label">Locked</label>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Formula Columns -->
                                            <div class="table-responsive">
                                                <table class="table table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th>Column</th>
                                                            <th>Label</th>
                                                            <th>Formula</th>
                                                            <th>Format</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var colIndex in formulaRow.ColumnFormulas.Keys.Union(formulaRow.ColumnLabels.Keys).Distinct().OrderBy(x => x))
                                                        {
                                                            <tr>
                                                                <td>@GetColumnLetter(colIndex)</td>
                                                                <td>
                                                                    <input type="text" class="form-control form-control-sm"
                                                                           value="@(formulaRow.ColumnLabels.GetValueOrDefault(colIndex, ""))"
                                                                           @onchange="@(e => UpdateFormulaLabel(formulaRow, colIndex, e.Value?.ToString() ?? ""))"
                                                                           placeholder="Label..." />
                                                                </td>
                                                                <td>
                                                                    <input type="text" class="form-control form-control-sm font-monospace"
                                                                           value="@(formulaRow.ColumnFormulas.GetValueOrDefault(colIndex, ""))"
                                                                           @onchange="@(e => UpdateFormula(formulaRow, colIndex, e.Value?.ToString() ?? ""))"
                                                                           placeholder="=SUM(A:A)" />
                                                                </td>
                                                                <td>
                                                                    <input type="text" class="form-control form-control-sm"
                                                                           value="@(formulaRow.ColumnFormats.GetValueOrDefault(colIndex, ""))"
                                                                           @onchange="@(e => UpdateFormulaFormat(formulaRow, colIndex, e.Value?.ToString() ?? ""))"
                                                                           placeholder="#,##0.00" />
                                                                </td>
                                                                <td>
                                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveFormulaColumn(formulaRow, colIndex)">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>

                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => AddFormulaColumn(formulaRow)">
                                                <i class="bi bi-plus me-1"></i>Add Formula Column
                                            </button>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center py-5 text-muted">
                                    <i class="bi bi-calculator display-1 mb-3"></i>
                                    <h5>No Formula Rows Configured</h5>
                                    <p>Add formula rows to create automatic calculations like totals and counts.</p>
                                    <button class="btn btn-primary" @onclick="AddFormulaRow">
                                        <i class="bi bi-plus-circle me-1"></i>Add Formula Row
                                    </button>
                                </div>
                            }
                        </div>
                    }

                    <!-- Checkboxes Tab -->
                    @if (_activeTab == "checkboxes")
                    {
                        <div class="designer-section">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6 class="mb-0">Interactive Checkbox Columns</h6>
                                <button class="btn btn-primary btn-sm" @onclick="AddCheckboxColumn">
                                    <i class="bi bi-plus-circle me-1"></i>Add Checkbox
                                </button>
                            </div>

                            @if (CurrentTemplate.CheckboxColumns.Any())
                            {
                                <div class="row">
                                    @foreach (var checkbox in CurrentTemplate.CheckboxColumns.OrderBy(c => c.Index))
                                    {
                                        <div class="col-md-6 mb-3">
                                            <div class="card h-100">
                                                <div class="card-header d-flex justify-content-between align-items-center py-2">
                                                    <h6 class="mb-0">@checkbox.Name</h6>
                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveCheckboxColumn(checkbox)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                                <div class="card-body">
                                                    <div class="mb-2">
                                                        <label class="form-label small">Name</label>
                                                        <input type="text" class="form-control form-control-sm" @bind="checkbox.Name" />
                                                    </div>
                                                    <div class="mb-2">
                                                        <label class="form-label small">Description</label>
                                                        <input type="text" class="form-control form-control-sm" @bind="checkbox.Description" />
                                                    </div>
                                                    <div class="row mb-2">
                                                        <div class="col-6">
                                                            <label class="form-label small">Order</label>
                                                            <input type="number" class="form-control form-control-sm" @bind="checkbox.Index" min="0" />
                                                        </div>
                                                        <div class="col-6">
                                                            <label class="form-label small">Width</label>
                                                            <input type="number" class="form-control form-control-sm" @bind="checkbox.Width" min="50" />
                                                        </div>
                                                    </div>
                                                    <div class="mb-2">
                                                        <label class="form-label small">Type</label>
                                                        <select class="form-select form-select-sm" @bind="checkbox.Type">
                                                            <option value="@CheckboxType.Manual">Manual</option>
                                                            <option value="@CheckboxType.Calculated">Calculated</option>
                                                            <option value="@CheckboxType.ReadOnly">Read Only</option>
                                                        </select>
                                                    </div>
                                                    <div class="mb-2">
                                                        <label class="form-label small">Formula Template</label>
                                                        <input type="text" class="form-control form-control-sm font-monospace"
                                                               @bind="checkbox.FormulaTemplate"
                                                               placeholder="=SUMIF({CHECKBOX_COLUMN}:{CHECKBOX_COLUMN},TRUE,B:B)" />
                                                        <div class="form-text">Use {CHECKBOX_COLUMN} placeholder</div>
                                                    </div>
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" @bind="checkbox.IsVisible" />
                                                        <label class="form-check-label">Visible</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5 text-muted">
                                    <i class="bi bi-check-square display-1 mb-3"></i>
                                    <h5>No Checkbox Columns Configured</h5>
                                    <p>Add interactive checkboxes for users to mark status, track progress, etc.</p>
                                    <button class="btn btn-primary" @onclick="AddCheckboxColumn">
                                        <i class="bi bi-plus-circle me-1"></i>Add Checkbox Column
                                    </button>
                                </div>
                            }
                        </div>
                    }

                    <!-- Preview Tab -->
                    @if (_activeTab == "preview")
                    {
                        <div class="designer-section">
                            <h6 class="mb-3">Template Preview</h6>
                            <div class="template-preview border rounded p-3 bg-light">
                                <div class="preview-sheet">
                                    <!-- Sheet Header -->
                                    <div class="sheet-title mb-3">
                                        <h6 class="text-muted">Sheet: @(CurrentTemplate.Name ?? "Untitled Template")</h6>
                                    </div>

                                    <!-- Preview Table -->
                                    <div class="table-responsive">
                                        <table class="table table-sm table-bordered bg-white">
                                            <!-- Header Row -->
                                            <thead>
                                                <tr style="background-color: @CurrentTemplate.Formatting.HeaderBackgroundColor; color: @CurrentTemplate.Formatting.HeaderFontColor;">
                                                    @foreach (var column in CurrentTemplate.DataColumns.Where(c => c.IsVisible).OrderBy(c => c.Index))
                                                    {
                                                        <th style="width: @(column.Width)px;">@column.Header</th>
                                                    }
                                                    @foreach (var checkbox in CurrentTemplate.CheckboxColumns.Where(c => c.IsVisible).OrderBy(c => c.Index))
                                                    {
                                                        <th style="width: @(checkbox.Width)px;">@checkbox.Name</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <!-- Formula Row -->
                                            @if (CurrentTemplate.FormulaRows.Any())
                                            {
                                                @foreach (var formulaRow in CurrentTemplate.FormulaRows)
                                                {
                                                    <tbody>
                                                        <tr style="background-color: @formulaRow.BackgroundColor; font-weight: @(formulaRow.IsBold ? "bold" : "normal");">
                                                            @for (int i = 0; i < CurrentTemplate.DataColumns.Count + CurrentTemplate.CheckboxColumns.Count; i++)
                                                            {
                                                                <td>
                                                                    @if (formulaRow.ColumnLabels.ContainsKey(i))
                                                                    {
                                                                        @formulaRow.ColumnLabels[i]
                                                                    }
                                                                    @if (formulaRow.ColumnFormulas.ContainsKey(i))
                                                                    {
                                                                        <span class="text-muted font-monospace">@formulaRow.ColumnFormulas[i]</span>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    </tbody>
                                                }
                                            }
                                            <!-- Sample Data Rows -->
                                            <tbody>
                                                @for (int row = 0; row < 3; row++)
                                                {
                                                    <tr style="@(CurrentTemplate.Formatting.AlternateRowColors && row % 2 == 1 ? $"background-color: {CurrentTemplate.Formatting.AlternateColor};" : "")">
                                                        @foreach (var column in CurrentTemplate.DataColumns.Where(c => c.IsVisible).OrderBy(c => c.Index))
                                                        {
                                                            <td>@GetSampleData(column.DataField, row)</td>
                                                        }
                                                        @foreach (var checkbox in CurrentTemplate.CheckboxColumns.Where(c => c.IsVisible).OrderBy(c => c.Index))
                                                        {
                                                            <td class="text-center">
                                                                <input type="checkbox" class="form-check-input" @bind="@_sampleCheckStates[checkbox.Id]" />
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>

                                    <div class="mt-3 text-muted small">
                                        <i class="bi bi-info-circle me-1"></i>
                                        This is a preview of how your template will look. Actual data will replace the sample data.
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Advanced Column Configuration Modal -->
@if (_showAdvancedColumnModal && _editingColumn != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Advanced Column Settings</h5>
                    <button type="button" class="btn-close" @onclick="() => _showAdvancedColumnModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label class="form-label">Background Color</label>
                                <input type="color" class="form-control form-control-color" @bind="_editingColumn.BackgroundColor" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Font Color</label>
                                <input type="color" class="form-control form-control-color" @bind="_editingColumn.FontColor" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label class="form-label">Text Alignment</label>
                                <select class="form-select" @bind="_editingColumn.TextAlignment">
                                    <option value="LEFT">Left</option>
                                    <option value="CENTER">Center</option>
                                    <option value="RIGHT">Right</option>
                                </select>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" @bind="_editingColumn.IsBold" />
                                <label class="form-check-label">Bold</label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" @bind="_editingColumn.IsItalic" />
                                <label class="form-check-label">Italic</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="_editingColumn.IsLocked" />
                                <label class="form-check-label">Locked</label>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Validation Rule</label>
                        <input type="text" class="form-control" @bind="_editingColumn.ValidationRule"
                               placeholder="e.g., >0 for positive numbers" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showAdvancedColumnModal = false">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
    .enhanced-template-designer {
        min-height: 600px;
    }

    .configuration-panel .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .visual-designer {
        min-height: 500px;
    }

    .designer-section {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .template-preview {
        max-height: 500px;
        overflow: auto;
    }

    .preview-sheet table {
        font-size: 0.875rem;
    }

    .preview-sheet th {
        font-weight: 600;
        text-align: center;
        border: 1px solid #dee2e6;
    }

    .preview-sheet td {
        border: 1px solid #dee2e6;
        text-align: center;
        vertical-align: middle;
    }

    .nav-tabs .nav-link {
        color: #6c757d;
        border: none;
        padding: 0.75rem 1rem;
    }

        .nav-tabs .nav-link.active {
            color: #495057;
            background-color: #f8f9fa;
            border-bottom: 3px solid #0d6efd;
        }

    .form-control-color {
        width: 100%;
        height: 38px;
    }

    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .font-monospace {
        font-family: 'Courier New', monospace;
    }
</style>

@code {
    [Parameter] public EnhancedSheetTemplate? Template { get; set; }
    [Parameter] public EventCallback<EnhancedSheetTemplate> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private EnhancedSheetTemplate CurrentTemplate = new();
    private bool IsEditing => Template != null;
    private bool _isSaving = false;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;
    private string _activeTab = "columns";

    // Advanced column modal
    private bool _showAdvancedColumnModal = false;
    private DataColumnTemplate? _editingColumn;

    // Sample data for preview
    private Dictionary<string, bool> _sampleCheckStates = new();

    protected override void OnInitialized()
    {
        if (Template != null)
        {
            // Clone the template for editing
            CurrentTemplate = CloneTemplate(Template);
        }
        else
        {
            CurrentTemplate = new EnhancedSheetTemplate
                {
                    CreatedBy = "Current User", // TODO: Get from auth service
                    Formatting = new EnhancedSheetFormatting()
                };
        }

        // Initialize sample checkbox states
        InitializeSampleCheckStates();
    }

    private EnhancedSheetTemplate CloneTemplate(EnhancedSheetTemplate source)
    {
        return new EnhancedSheetTemplate
            {
                Id = source.Id,
                Name = source.Name,
                Description = source.Description,
                DataType = source.DataType,
                Version = source.Version,
                IsActive = source.IsActive,
                CreatedAt = source.CreatedAt,
                CreatedBy = source.CreatedBy,
                DataColumns = source.DataColumns.Select(c => new DataColumnTemplate
                {
                    Index = c.Index,
                    Header = c.Header,
                    DataField = c.DataField,
                    Format = c.Format,
                    Width = c.Width,
                    IsVisible = c.IsVisible,
                    BackgroundColor = c.BackgroundColor,
                    FontColor = c.FontColor,
                    IsBold = c.IsBold,
                    IsItalic = c.IsItalic,
                    TextAlignment = c.TextAlignment,
                    IsLocked = c.IsLocked,
                    ValidationRule = c.ValidationRule
                }).ToList(),
                FormulaRows = source.FormulaRows.Select(f => new FormulaRowTemplate
                {
                    RowIndex = f.RowIndex,
                    BackgroundColor = f.BackgroundColor,
                    FontColor = f.FontColor,
                    IsBold = f.IsBold,
                    IsLocked = f.IsLocked,
                    Height = f.Height,
                    ColumnFormulas = new Dictionary<int, string>(f.ColumnFormulas),
                    ColumnLabels = new Dictionary<int, string>(f.ColumnLabels),
                    ColumnFormats = new Dictionary<int, string>(f.ColumnFormats)
                }).ToList(),
                CheckboxColumns = source.CheckboxColumns.Select(c => new CheckboxColumnTemplate
                {
                    Id = c.Id,
                    Index = c.Index,
                    Name = c.Name,
                    Description = c.Description,
                    Type = c.Type,
                    Width = c.Width,
                    IsVisible = c.IsVisible,
                    BackgroundColor = c.BackgroundColor,
                    CheckedColor = c.CheckedColor,
                    UncheckedColor = c.UncheckedColor,
                    FormulaTemplate = c.FormulaTemplate,
                    ShowFormulaResult = c.ShowFormulaResult,
                    FormulaResultFormat = c.FormulaResultFormat,
                    IsReusable = c.IsReusable,
                    Category = c.Category,
                    CreatedAt = c.CreatedAt,
                    CreatedBy = c.CreatedBy
                }).ToList(),
                Formatting = new EnhancedSheetFormatting
                {
                    FreezeHeaderRow = source.Formatting.FreezeHeaderRow,
                    FreezeFormulaRow = source.Formatting.FreezeFormulaRow,
                    HeaderBackgroundColor = source.Formatting.HeaderBackgroundColor,
                    HeaderFontColor = source.Formatting.HeaderFontColor,
                    HeaderIsBold = source.Formatting.HeaderIsBold,
                    HeaderHeight = source.Formatting.HeaderHeight,
                    AlternateRowColors = source.Formatting.AlternateRowColors,
                    AlternateColor = source.Formatting.AlternateColor,
                    AddAutoFilter = source.Formatting.AddAutoFilter,
                    AddBorders = source.Formatting.AddBorders,
                    BorderStyle = source.Formatting.BorderStyle,
                    BorderColor = source.Formatting.BorderColor,
                    ProtectSheet = source.Formatting.ProtectSheet,
                    AllowSort = source.Formatting.AllowSort,
                    AllowFilter = source.Formatting.AllowFilter,
                    AllowEditCheckboxes = source.Formatting.AllowEditCheckboxes,
                    AllowEditData = source.Formatting.AllowEditData,
                    ShowGridlines = source.Formatting.ShowGridlines,
                    DefaultRowHeight = source.Formatting.DefaultRowHeight,
                    SheetTabColor = source.Formatting.SheetTabColor,
                    HideFormulaBar = source.Formatting.HideFormulaBar
                },
                Metadata = new Dictionary<string, string>(source.Metadata)
            };
    }

    private void InitializeSampleCheckStates()
    {
        _sampleCheckStates.Clear();
        foreach (var checkbox in CurrentTemplate.CheckboxColumns)
        {
            _sampleCheckStates[checkbox.Id] = false;
        }
    }

    private string[] GetAvailableDataFields()
    {
        return CurrentTemplate.DataType switch
        {
            "BankSlipData" => new[]
            {
                "TransactionDate", "Amount", "AccountName", "AccountNumber",
                "ReceiverName", "ReceiverAccount", "Note", "ProcessedBy",
                "ProcessedAt", "SlipCollectionName", "OriginalFilePath"
            },
            "SalesData" => new[]
            {
                "Date", "Platform", "Sku", "Quantity", "Amount", "OrderNumber", "ProductName"
            },
            "ReturnsData" => new[]
            {
                "Date", "Platform", "Sku", "Quantity", "Reason", "RefundAmount", "Status"
            },
            _ => new[] { "Date", "Name", "Amount", "Description", "Status" }
        };
    }

    private string GetColumnLetter(int columnIndex)
    {
        var letter = "";
        while (columnIndex >= 0)
        {
            letter = (char)('A' + (columnIndex % 26)) + letter;
            columnIndex = columnIndex / 26 - 1;
        }
        return letter;
    }

    private string GetSampleData(string dataField, int rowIndex)
    {
        return dataField switch
        {
            "TransactionDate" => DateTime.Now.AddDays(-rowIndex).ToString("yyyy-MM-dd"),
            "Amount" => $"{(1000 + rowIndex * 250):N2}",
            "AccountName" => $"Account {rowIndex + 1}",
            "AccountNumber" => $"xxx-{1000 + rowIndex}",
            "Note" => $"Sample note {rowIndex + 1}",
            "Date" => DateTime.Now.AddDays(-rowIndex).ToString("yyyy-MM-dd"),
            "Quantity" => $"{rowIndex + 1}",
            "Platform" => new[] { "Shopee", "Lazada", "Website" }[rowIndex % 3],
            "Sku" => $"SKU{rowIndex + 1}",
            _ => $"Sample {rowIndex + 1}"
        };
    }

    // Data Column Methods
    private void AddDataColumn()
    {
        var nextIndex = CurrentTemplate.DataColumns.Any() ? CurrentTemplate.DataColumns.Max(c => c.Index) + 1 : 0;
        CurrentTemplate.DataColumns.Add(new DataColumnTemplate
            {
                Index = nextIndex,
                Header = $"Column {nextIndex + 1}",
                IsVisible = true,
                Width = 120,
                TextAlignment = "LEFT"
            });
    }

    private void RemoveDataColumn(DataColumnTemplate column)
    {
        CurrentTemplate.DataColumns.Remove(column);
        ReorderColumns();
    }

    private void SetColumnsTab()
    {
        _activeTab = "columns";
        StateHasChanged();
    }

    private void SetFormulasTab()
    {
        _activeTab = "formulas";
        StateHasChanged();
    }

    private void SetCheckboxesTab()
    {
        _activeTab = "checkboxes";
        StateHasChanged();
    }

    private void SetPreviewTab()
    {
        _activeTab = "preview";
        StateHasChanged();
    }

    private void SetActiveTab(string tab)
    {
        _activeTab = tab;
        StateHasChanged();
    }

    private void ReorderColumns()
    {
        var sortedColumns = CurrentTemplate.DataColumns.OrderBy(c => c.Index).ToList();
        for (int i = 0; i < sortedColumns.Count; i++)
        {
            sortedColumns[i].Index = i;
        }
        StateHasChanged();
    }

    private void ConfigureColumnAdvanced(DataColumnTemplate column)
    {
        _editingColumn = column;
        _showAdvancedColumnModal = true;
    }

    // Formula Row Methods
    private void AddFormulaRow()
    {
        var nextRowIndex = CurrentTemplate.FormulaRows.Any() ? CurrentTemplate.FormulaRows.Max(f => f.RowIndex) + 1 : 2;
        CurrentTemplate.FormulaRows.Add(new FormulaRowTemplate
            {
                RowIndex = nextRowIndex,
                BackgroundColor = "#E8E8E8",
                IsBold = true,
                IsLocked = true,
                Height = 25,
                ColumnFormulas = new Dictionary<int, string>(),
                ColumnLabels = new Dictionary<int, string>(),
                ColumnFormats = new Dictionary<int, string>()
            });
    }

    private void RemoveFormulaRow(FormulaRowTemplate formulaRow)
    {
        CurrentTemplate.FormulaRows.Remove(formulaRow);
    }

    private void AddFormulaColumn(FormulaRowTemplate formulaRow)
    {
        var nextColumnIndex = formulaRow.ColumnFormulas.Keys.Union(formulaRow.ColumnLabels.Keys).DefaultIfEmpty(-1).Max() + 1;
        formulaRow.ColumnLabels[nextColumnIndex] = "Label:";
        formulaRow.ColumnFormulas[nextColumnIndex] = "=";
    }

    private void RemoveFormulaColumn(FormulaRowTemplate formulaRow, int columnIndex)
    {
        formulaRow.ColumnFormulas.Remove(columnIndex);
        formulaRow.ColumnLabels.Remove(columnIndex);
        formulaRow.ColumnFormats.Remove(columnIndex);
    }

    private void UpdateFormulaLabel(FormulaRowTemplate formulaRow, int columnIndex, string value)
    {
        if (string.IsNullOrEmpty(value))
            formulaRow.ColumnLabels.Remove(columnIndex);
        else
            formulaRow.ColumnLabels[columnIndex] = value;
    }

    private void UpdateFormula(FormulaRowTemplate formulaRow, int columnIndex, string value)
    {
        if (string.IsNullOrEmpty(value))
            formulaRow.ColumnFormulas.Remove(columnIndex);
        else
            formulaRow.ColumnFormulas[columnIndex] = value;
    }

    private void UpdateFormulaFormat(FormulaRowTemplate formulaRow, int columnIndex, string value)
    {
        if (string.IsNullOrEmpty(value))
            formulaRow.ColumnFormats.Remove(columnIndex);
        else
            formulaRow.ColumnFormats[columnIndex] = value;
    }

    // Checkbox Column Methods
    private void AddCheckboxColumn()
    {
        var nextIndex = CurrentTemplate.CheckboxColumns.Any() ? CurrentTemplate.CheckboxColumns.Max(c => c.Index) + 1 : 0;
        var newCheckbox = new CheckboxColumnTemplate
            {
                Index = nextIndex,
                Name = $"Checkbox {nextIndex + 1}",
                Description = "New checkbox column",
                Type = CheckboxType.Manual,
                Width = 100,
                IsVisible = true,
                BackgroundColor = "#F8F8F8",
                CheckedColor = "#4CAF50",
                UncheckedColor = "#FFFFFF",
                CreatedAt = DateTime.UtcNow,
                CreatedBy = "Current User"
            };
        CurrentTemplate.CheckboxColumns.Add(newCheckbox);
        _sampleCheckStates[newCheckbox.Id] = false;
    }

    private void RemoveCheckboxColumn(CheckboxColumnTemplate checkbox)
    {
        CurrentTemplate.CheckboxColumns.Remove(checkbox);
        _sampleCheckStates.Remove(checkbox.Id);
    }

    // Quick Action Methods
    private async Task AutoGenerateColumns()
    {
        if (string.IsNullOrEmpty(CurrentTemplate.DataType)) return;

        CurrentTemplate.DataColumns.Clear();
        var fields = GetAvailableDataFields();

        for (int i = 0; i < fields.Length; i++)
        {
            var field = fields[i];
            CurrentTemplate.DataColumns.Add(new DataColumnTemplate
                {
                    Index = i,
                    Header = FormatFieldName(field),
                    DataField = field,
                    Format = GetDefaultFormat(field),
                    Width = GetDefaultWidth(field),
                    IsVisible = true,
                    TextAlignment = GetDefaultAlignment(field)
                });
        }

        SetStatusMessage($"Auto-generated {fields.Length} columns for {CurrentTemplate.DataType}", false);
    }

    private void AddDefaultFormulas()
    {
        if (!CurrentTemplate.FormulaRows.Any())
        {
            var formulaRow = new FormulaRowTemplate
                {
                    RowIndex = 2,
                    BackgroundColor = "#E8E8E8",
                    IsBold = true,
                    IsLocked = true,
                    ColumnFormulas = new Dictionary<int, string>(),
                    ColumnLabels = new Dictionary<int, string>(),
                    ColumnFormats = new Dictionary<int, string>()
                };

            // Add count formula
            formulaRow.ColumnLabels[0] = "Count:";
            formulaRow.ColumnFormulas[0] = "=COUNTA(A3:A)";

            // Add amount sum if applicable
            var amountColumn = CurrentTemplate.DataColumns.FirstOrDefault(c => c.DataField.Contains("Amount"));
            if (amountColumn != null)
            {
                var amountColumnLetter = GetColumnLetter(amountColumn.Index);
                formulaRow.ColumnLabels[amountColumn.Index] = "Total:";
                formulaRow.ColumnFormulas[amountColumn.Index] = $"=SUM({amountColumnLetter}3:{amountColumnLetter})";
                formulaRow.ColumnFormats[amountColumn.Index] = "#,##0.00";
            }

            CurrentTemplate.FormulaRows.Add(formulaRow);
            SetStatusMessage("Added default formulas", false);
        }
    }

    private void AddDefaultCheckboxes()
    {
        if (!CurrentTemplate.CheckboxColumns.Any())
        {
            var defaultCheckboxes = CurrentTemplate.DataType switch
            {
                "BankSlipData" => new[] { ("Processed", "Mark as processed"), ("Verified", "Mark as verified") },
                "SalesData" => new[] { ("Shipped", "Mark as shipped"), ("Invoiced", "Mark as invoiced") },
                _ => new[] { ("Complete", "Mark as complete") }
            };

            for (int i = 0; i < defaultCheckboxes.Length; i++)
            {
                var (name, description) = defaultCheckboxes[i];
                var checkbox = new CheckboxColumnTemplate
                    {
                        Index = i,
                        Name = name,
                        Description = description,
                        Type = CheckboxType.Manual,
                        Width = 100,
                        IsVisible = true,
                        BackgroundColor = "#F8F8F8",
                        FormulaTemplate = "=COUNTIF({CHECKBOX_COLUMN}:{CHECKBOX_COLUMN},TRUE)",
                        CreatedAt = DateTime.UtcNow,
                        CreatedBy = "Current User"
                    };
                CurrentTemplate.CheckboxColumns.Add(checkbox);
                _sampleCheckStates[checkbox.Id] = false;
            }

            SetStatusMessage($"Added {defaultCheckboxes.Length} default checkboxes", false);
        }
    }

    private void ResetTemplate()
    {
        CurrentTemplate = new EnhancedSheetTemplate
            {
                CreatedBy = "Current User",
                Formatting = new EnhancedSheetFormatting()
            };
        _sampleCheckStates.Clear();
        SetStatusMessage("Template reset", false);
    }

    // Helper Methods
    private string FormatFieldName(string fieldName)
    {
        return System.Text.RegularExpressions.Regex.Replace(fieldName, "([A-Z])", " $1").Trim();
    }

    private string GetDefaultFormat(string fieldName)
    {
        if (fieldName.Contains("Amount")) return "#,##0.00";
        if (fieldName.Contains("Date")) return "yyyy-mm-dd";
        if (fieldName.Contains("Quantity")) return "#,##0";
        return "";
    }

    private int GetDefaultWidth(string fieldName)
    {
        if (fieldName.Contains("Amount")) return 100;
        if (fieldName.Contains("Date")) return 120;
        if (fieldName.Contains("Account")) return 150;
        if (fieldName.Contains("Note") || fieldName.Contains("Description")) return 200;
        return 120;
    }

    private string GetDefaultAlignment(string fieldName)
    {
        if (fieldName.Contains("Amount") || fieldName.Contains("Quantity")) return "RIGHT";
        if (fieldName.Contains("Date")) return "CENTER";
        return "LEFT";
    }

    private async Task ShowPreview()
    {
        SetPreviewTab();
    }

    private async Task SaveTemplate()
    {
        if (string.IsNullOrEmpty(CurrentTemplate.Name))
        {
            SetStatusMessage("Template name is required", true);
            return;
        }

        if (string.IsNullOrEmpty(CurrentTemplate.DataType))
        {
            SetStatusMessage("Data type is required", true);
            return;
        }

        if (!CurrentTemplate.DataColumns.Any())
        {
            SetStatusMessage("At least one data column is required", true);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            CurrentTemplate.LastModified = DateTime.UtcNow;
            CurrentTemplate.LastModifiedBy = "Current User"; // TODO: Get from auth service

            if (!IsEditing)
            {
                CurrentTemplate.CreatedAt = DateTime.UtcNow;
                CurrentTemplate.CreatedBy = "Current User";
            }

            var success = await TemplateService.SaveTemplateAsync(CurrentTemplate);
            if (success)
            {
                SetStatusMessage($"Template '{CurrentTemplate.Name}' saved successfully!", false);
                await OnSaved.InvokeAsync(CurrentTemplate);
            }
            else
            {
                SetStatusMessage("Failed to save template", true);
            }
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error saving template: {ex.Message}", true);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void SetStatusMessage(string message, bool isError)
    {
        _statusMessage = message;
        _statusIsError = isError;
        StateHasChanged();
    }
}