@* NewwaysAdmin.WebAdmin/Components/Features/GoogleSheets/AdminSheetConfigManager.razor *@
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.GoogleSheets.Services
@using NewwaysAdmin.GoogleSheets.Models.Templates
@inject ISheetTemplateService TemplateService
@inject IEnhancedSheetTemplateService EnhancedTemplateService
@inject UserSheetConfigService ConfigService

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="bi bi-gear-wide-connected me-2"></i>
            Sheet Template Management
        </h5>
    </div>
    <div class="card-body">
        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <div class="alert @(_statusIsError ? "alert-danger" : "alert-success") alert-dismissible">
                @_statusMessage
                <button type="button" class="btn-close" @onclick="() => _statusMessage = string.Empty"></button>
            </div>
        }

        <!-- Template Type Tabs -->
        <ul class="nav nav-tabs mb-4" id="templateTypeTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link @(_activeTemplateType == "basic" ? "active" : "")"
                        @onclick="SetBasicTemplateTab" type="button">
                    <i class="bi bi-table me-1"></i>Basic Templates (@_filteredTemplates.Count)
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(_activeTemplateType == "enhanced" ? "active" : "")"
                        @onclick="SetEnhancedTemplateTab" type="button">
                    <i class="bi bi-grid-3x3-gap me-1"></i>Enhanced Templates (@_filteredEnhancedTemplates.Count)
                </button>
            </li>
        </ul>

        <!-- Action Buttons -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                @if (_activeTemplateType == "basic")
                {
                    <button class="btn btn-primary" @onclick="ShowCreateTemplate">
                        <i class="bi bi-plus-circle me-1"></i>Create Basic Template
                    </button>
                }
                else
                {
                    <button class="btn btn-success" @onclick="ShowCreateEnhancedTemplate">
                        <i class="bi bi-magic me-1"></i>Create Enhanced Template
                    </button>
                }
                <button class="btn btn-outline-secondary ms-2" @onclick="LoadTemplates">
                    <i class="bi bi-arrow-clockwise me-1"></i>Refresh
                </button>
            </div>

            <div>
                <select class="form-select" @bind="FilterDataType" style="width: auto;">
                    <option value="">All Data Types</option>
                    <option value="BankSlipData">Bank Slip Data</option>
                    <option value="SalesData">Sales Data</option>
                    <option value="ReturnsData">Returns Data</option>
                    <option value="CustomData">Custom Data</option>
                </select>
            </div>
        </div>

        <!-- Basic Templates Tab Content -->
        @if (_activeTemplateType == "basic")
        {
            <!-- Templates List -->
            @if (_isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading templates...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading sheet templates...</p>
                </div>
            }
            else if (_filteredTemplates.Any())
            {
                <div class="row">
                    @foreach (var template in _filteredTemplates)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">@template.Name</h6>
                                    <span class="badge bg-info">@template.DataType</span>
                                </div>
                                <div class="card-body">
                                    <p class="card-text text-muted">@template.Description</p>

                                    <div class="small text-muted mb-2">
                                        <i class="bi bi-columns me-1"></i>@template.Columns.Count columns
                                        @if (template.Formulas.Any())
                                        {
                                            <span class="ms-2">
                                                <i class="bi bi-calculator me-1"></i>@template.Formulas.Count formulas
                                            </span>
                                        }
                                    </div>

                                    <div class="small text-muted">
                                        Created: @template.CreatedAt.ToString("yyyy-MM-dd")<br />
                                        By: @template.CreatedBy
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => EditTemplate(template)">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-success btn-sm" @onclick="() => CloneTemplate(template)">
                                            <i class="bi bi-files"></i> Clone
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDeleteTemplate(template)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-table display-1 text-muted"></i>
                    <h4 class="mt-3 text-muted">No Basic Templates Found</h4>
                    <p class="text-muted">
                        @if (string.IsNullOrEmpty(_filterDataType))
                        {
                            <span>No basic sheet templates have been created yet.</span>
                        }
                        else
                        {
                            <span>No basic templates found for @_filterDataType data type.</span>
                        }
                    </p>
                    <button class="btn btn-primary" @onclick="ShowCreateTemplate">
                        <i class="bi bi-plus-circle me-1"></i>Create Your First Basic Template
                    </button>
                </div>
            }
        }

        <!-- Enhanced Templates Tab Content -->
        @if (_activeTemplateType == "enhanced")
        {
            @if (_isLoadingEnhanced)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Loading enhanced templates...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading enhanced templates...</p>
                </div>
            }
            else if (_filteredEnhancedTemplates.Any())
            {
                <div class="row">
                    @foreach (var template in _filteredEnhancedTemplates)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card h-100 border-success">
                                <div class="card-header bg-success bg-opacity-10 d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">
                                        <i class="bi bi-magic me-1 text-success"></i>
                                        @template.Name
                                    </h6>
                                    <span class="badge bg-success">@template.DataType</span>
                                </div>
                                <div class="card-body">
                                    <p class="card-text text-muted">@template.Description</p>

                                    <div class="small text-muted mb-2">
                                        <i class="bi bi-columns me-1"></i>@template.DataColumns.Count columns
                                        @if (template.FormulaRows.Any())
                                        {
                                            <span class="ms-2">
                                                <i class="bi bi-calculator me-1"></i>@template.FormulaRows.Count formula rows
                                            </span>
                                        }
                                        @if (template.CheckboxColumns.Any())
                                        {
                                            <span class="ms-2">
                                                <i class="bi bi-check-square me-1"></i>@template.CheckboxColumns.Count checkboxes
                                            </span>
                                        }
                                    </div>

                                    <div class="small text-muted">
                                        Version: @template.Version<br />
                                        Created: @template.CreatedAt.ToString("yyyy-MM-dd")<br />
                                        By: @template.CreatedBy
                                    </div>

                                    @if (!template.IsActive)
                                    {
                                        <span class="badge bg-warning mt-2">Inactive</span>
                                    }
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-success btn-sm" @onclick="() => EditEnhancedTemplate(template)">
                                            <i class="bi bi-magic"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-info btn-sm" @onclick="() => CloneEnhancedTemplate(template)">
                                            <i class="bi bi-files"></i> Clone
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDeleteEnhancedTemplate(template)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-grid-3x3-gap display-1 text-success"></i>
                    <h4 class="mt-3 text-success">No Enhanced Templates Found</h4>
                    <p class="text-muted">
                        Enhanced templates provide interactive checkboxes, advanced formulas, and sophisticated formatting options.
                        @if (!string.IsNullOrEmpty(_filterDataType))
                        {
                            <br />
                            @($"No enhanced templates found for {_filterDataType} data type.")
                       }
                    </p>
                    <button class="btn btn-success" @onclick="ShowCreateEnhancedTemplate">
                        <i class="bi bi-magic me-1"></i>Create Your First Enhanced Template
                    </button>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="bi bi-lightbulb me-1"></i>
                            Enhanced templates include interactive checkboxes, formula rows, and advanced formatting for professional spreadsheets.
                        </small>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Enhanced Template Designer Modal -->
@if (_showEnhancedDesigner)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-magic me-2"></i>
                        Enhanced Template Designer
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideEnhancedDesigner"></button>
                </div>
                <div class="modal-body p-0">
                    <EnhancedTemplateDesigner Template="_editingEnhancedTemplate"
                                              OnSaved="HandleEnhancedTemplateSaved"
                                              OnCancel="HideEnhancedDesigner" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Basic Template Designer Modal (existing) -->
@if (_showDesigner)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (_editingTemplate != null)
                        {
                            <span>Edit Template: @_editingTemplate.Name</span>
                        }
                        else
                        {
                            <span>Create New Template</span>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDesigner"></button>
                </div>
                <div class="modal-body p-0">
                    <SheetDesigner Template="_editingTemplate"
                                   OnSaved="HandleTemplateSaved"
                                   OnCancel="HideDesigner" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Delete Confirmation Modal -->
@if (_showDeleteConfirm && _templateToDelete != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => _showDeleteConfirm = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the template <strong>"@_templateToDelete.Name"</strong>?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showDeleteConfirm = false">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteTemplate">
                        <i class="bi bi-trash me-1"></i>Delete Template
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Enhanced Delete Confirmation Modal -->
@if (_showDeleteEnhancedConfirm && _enhancedTemplateToDelete != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete Enhanced Template</h5>
                    <button type="button" class="btn-close" @onclick="() => _showDeleteEnhancedConfirm = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the enhanced template <strong>"@_enhancedTemplateToDelete.Name"</strong>?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showDeleteEnhancedConfirm = false">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteEnhancedTemplate">
                        <i class="bi bi-trash me-1"></i>Delete Template
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public string ModuleName { get; set; } = "BankSlip";

    // Basic templates (existing)
    private List<SheetTemplate> _allTemplates = new();
    private List<SheetTemplate> _filteredTemplates = new();

    // Enhanced templates (new)
    private List<EnhancedSheetTemplate> _allEnhancedTemplates = new();
    private List<EnhancedSheetTemplate> _filteredEnhancedTemplates = new();

    private bool _isLoading = true;
    private bool _isLoadingEnhanced = true;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;
    private string _filterDataType = string.Empty;
    private string _activeTemplateType = "enhanced"; // Default to enhanced

    private string FilterDataType
    {
        get => _filterDataType;
        set
        {
            _filterDataType = value;
            FilterTemplates();
        }
    }

    // Basic designer modal (existing)
    private bool _showDesigner = false;
    private SheetTemplate? _editingTemplate;

    // Enhanced designer modal (new)
    private bool _showEnhancedDesigner = false;
    private EnhancedSheetTemplate? _editingEnhancedTemplate;

    // Delete confirmation (existing)
    private bool _showDeleteConfirm = false;
    private SheetTemplate? _templateToDelete;

    // Enhanced delete confirmation (new)
    private bool _showDeleteEnhancedConfirm = false;
    private EnhancedSheetTemplate? _enhancedTemplateToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();
    }

    #region Tab Management

    private void SetBasicTemplateTab()
    {
        _activeTemplateType = "basic";
        StateHasChanged();
    }

    private void SetEnhancedTemplateTab()
    {
        _activeTemplateType = "enhanced";
        StateHasChanged();
    }

    #endregion

    #region Template Loading

    private async Task LoadTemplates()
    {
        try
        {
            _isLoading = true;
            _isLoadingEnhanced = true;
            StateHasChanged();

            // Load both basic and enhanced templates
            var basicTask = TemplateService.GetTemplatesAsync();
            var enhancedTask = EnhancedTemplateService.GetTemplatesAsync();

            await Task.WhenAll(basicTask, enhancedTask);

            _allTemplates = await basicTask;
            _allEnhancedTemplates = await enhancedTask;

            FilterTemplates();

            ShowStatus($"Loaded {_allTemplates.Count} basic and {_allEnhancedTemplates.Count} enhanced templates", false);
        }
        catch (Exception ex)
        {
            ShowStatus($"Error loading templates: {ex.Message}", true);
        }
        finally
        {
            _isLoading = false;
            _isLoadingEnhanced = false;
            StateHasChanged();
        }
    }

    private void FilterTemplates()
    {
        // Filter basic templates
        if (string.IsNullOrEmpty(_filterDataType))
        {
            _filteredTemplates = _allTemplates.OrderBy(t => t.Name).ToList();
        }
        else
        {
            _filteredTemplates = _allTemplates
                .Where(t => t.DataType.Equals(_filterDataType, StringComparison.OrdinalIgnoreCase))
                .OrderBy(t => t.Name)
                .ToList();
        }

        // Filter enhanced templates
        if (string.IsNullOrEmpty(_filterDataType))
        {
            _filteredEnhancedTemplates = _allEnhancedTemplates.OrderBy(t => t.Name).ToList();
        }
        else
        {
            _filteredEnhancedTemplates = _allEnhancedTemplates
                .Where(t => t.DataType.Equals(_filterDataType, StringComparison.OrdinalIgnoreCase))
                .OrderBy(t => t.Name)
                .ToList();
        }

        StateHasChanged();
    }

    #endregion

    #region Enhanced Template Management

    private void ShowCreateEnhancedTemplate()
    {
        _editingEnhancedTemplate = null;
        _showEnhancedDesigner = true;
    }

    private void EditEnhancedTemplate(EnhancedSheetTemplate template)
    {
        _editingEnhancedTemplate = template;
        _showEnhancedDesigner = true;
    }

    private async Task CloneEnhancedTemplate(EnhancedSheetTemplate template)
    {
        try
        {
            var clonedTemplate = new EnhancedSheetTemplate
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = $"{template.Name} (Copy)",
                    Description = template.Description,
                    DataType = template.DataType,
                    Version = 1,
                    IsActive = true,
                    CreatedAt = DateTime.UtcNow,
                    CreatedBy = "Admin", // TODO: Get from auth service
                    LastModified = DateTime.UtcNow,
                    LastModifiedBy = "Admin",
                    DataColumns = template.DataColumns.ToList(),
                    FormulaRows = template.FormulaRows.ToList(),
                    CheckboxColumns = template.CheckboxColumns.ToList(),
                    Formatting = template.Formatting,
                    Metadata = new Dictionary<string, string>(template.Metadata)
                };

            var success = await EnhancedTemplateService.SaveTemplateAsync(clonedTemplate);
            if (success)
            {
                ShowStatus($"Enhanced template '{template.Name}' cloned successfully!", false);
                await LoadTemplates();
            }
            else
            {
                ShowStatus("Failed to clone enhanced template", true);
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Error cloning enhanced template: {ex.Message}", true);
        }
    }

    private void ConfirmDeleteEnhancedTemplate(EnhancedSheetTemplate template)
    {
        _enhancedTemplateToDelete = template;
        _showDeleteEnhancedConfirm = true;
    }

    private async Task DeleteEnhancedTemplate()
    {
        if (_enhancedTemplateToDelete == null) return;

        try
        {
            var success = await EnhancedTemplateService.DeleteTemplateAsync(_enhancedTemplateToDelete.Id);
            if (success)
            {
                ShowStatus($"Enhanced template '{_enhancedTemplateToDelete.Name}' deleted successfully!", false);
                await LoadTemplates();
            }
            else
            {
                ShowStatus("Failed to delete enhanced template", true);
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Error deleting enhanced template: {ex.Message}", true);
        }
        finally
        {
            _showDeleteEnhancedConfirm = false;
            _enhancedTemplateToDelete = null;
        }
    }

    private void HideEnhancedDesigner()
    {
        _showEnhancedDesigner = false;
        _editingEnhancedTemplate = null;
    }

    private async Task HandleEnhancedTemplateSaved(EnhancedSheetTemplate template)
    {
        HideEnhancedDesigner();
        await LoadTemplates();
        ShowStatus($"Enhanced template '{template.Name}' saved successfully!", false);
    }

    #endregion

    #region Basic Template Management (existing methods)

    private void ShowCreateTemplate()
    {
        _editingTemplate = null;
        _showDesigner = true;
    }

    private void EditTemplate(SheetTemplate template)
    {
        _editingTemplate = template;
        _showDesigner = true;
    }

    private async Task CloneTemplate(SheetTemplate template)
    {
        try
        {
            var clonedTemplate = new SheetTemplate
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = $"{template.Name} (Copy)",
                    Description = template.Description,
                    DataType = template.DataType,
                    Columns = new List<ColumnTemplate>(template.Columns),
                    Formulas = new List<FormulaTemplate>(template.Formulas),
                    Formatting = new SheetFormatting
                    {
                        FreezeHeaderRow = template.Formatting.FreezeHeaderRow,
                        AutoFilter = template.Formatting.AutoFilter,
                        AlternateRowColors = template.Formatting.AlternateRowColors,
                        AddSummarySection = template.Formatting.AddSummarySection,
                        HeaderBackgroundColor = template.Formatting.HeaderBackgroundColor,
                        AlternateColor = template.Formatting.AlternateColor
                    },
                    CreatedAt = DateTime.UtcNow,
                    CreatedBy = "Admin" // TODO: Get from auth service
                };

            var success = await TemplateService.SaveTemplateAsync(clonedTemplate);
            if (success)
            {
                ShowStatus($"Template '{template.Name}' cloned successfully!", false);
                await LoadTemplates();
            }
            else
            {
                ShowStatus("Failed to clone template", true);
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Error cloning template: {ex.Message}", true);
        }
    }

    private void ConfirmDeleteTemplate(SheetTemplate template)
    {
        _templateToDelete = template;
        _showDeleteConfirm = true;
    }

    private async Task DeleteTemplate()
    {
        if (_templateToDelete == null) return;

        try
        {
            var success = await TemplateService.DeleteTemplateAsync(_templateToDelete.Id);
            if (success)
            {
                ShowStatus($"Template '{_templateToDelete.Name}' deleted successfully!", false);
                await LoadTemplates();
            }
            else
            {
                ShowStatus("Failed to delete template", true);
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Error deleting template: {ex.Message}", true);
        }
        finally
        {
            _showDeleteConfirm = false;
            _templateToDelete = null;
        }
    }

    private void HideDesigner()
    {
        _showDesigner = false;
        _editingTemplate = null;
    }

    private async Task HandleTemplateSaved(SheetTemplate template)
    {
        HideDesigner();
        await LoadTemplates();
    }

    #endregion

    #region Helper Methods

    private void ShowStatus(string message, bool isError)
    {
        _statusMessage = message;
        _statusIsError = isError;
        StateHasChanged();
    }

    #endregion
}