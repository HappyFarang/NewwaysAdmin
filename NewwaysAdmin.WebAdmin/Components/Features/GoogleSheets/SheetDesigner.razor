@* NewwaysAdmin.WebAdmin/Components/Features/GoogleSheets/SheetDesigner.razor *@
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.GoogleSheets.Services
@inject ISheetTemplateService TemplateService
@inject IJSRuntime JSRuntime

<div class="sheet-designer">
    <div class="designer-header mb-4">
        <h4>
            <i class="bi bi-table me-2"></i>
            @if (IsEditing)
            {
                <span>Edit Template: @CurrentTemplate?.Name</span>
            }
            else
            {
                <span>Create New Sheet Template</span>
            }
        </h4>
    </div>

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="alert @(_statusIsError ? "alert-danger" : "alert-success") alert-dismissible">
            @_statusMessage
            <button type="button" class="btn-close" @onclick="() => _statusMessage = string.Empty"></button>
        </div>
    }

    <div class="row">
        <!-- Template Settings -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Template Settings</h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Template Name</label>
                        <input type="text" class="form-control" @bind="CurrentTemplate.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="3" @bind="CurrentTemplate.Description"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Data Type</label>
                        <select class="form-select" @bind="CurrentTemplate.DataType">
                            <option value="">Select Data Type...</option>
                            <option value="BankSlipData">Bank Slip Data</option>
                            <option value="SalesData">Sales Data</option>
                            <option value="ReturnsData">Returns Data</option>
                            <option value="CustomData">Custom Data</option>
                        </select>
                    </div>

                    <!-- Formatting Options -->
                    <h6 class="mt-4">Formatting Options</h6>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.FreezeHeaderRow" id="freezeHeader" />
                        <label class="form-check-label" for="freezeHeader">Freeze Header Row</label>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.AutoFilter" id="autoFilter" />
                        <label class="form-check-label" for="autoFilter">Auto Filter</label>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.AlternateRowColors" id="alternateRows" />
                        <label class="form-check-label" for="alternateRows">Alternate Row Colors</label>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="CurrentTemplate.Formatting.AddSummarySection" id="addSummary" />
                        <label class="form-check-label" for="addSummary">Add Summary Section</label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Column Designer -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">Columns</h6>
                    <button class="btn btn-primary btn-sm" @onclick="AddColumn">
                        <i class="bi bi-plus-circle me-1"></i>Add Column
                    </button>
                </div>
                <div class="card-body">
                    @if (CurrentTemplate.Columns.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Order</th>
                                        <th>Header</th>
                                        <th>Data Field</th>
                                        <th>Format</th>
                                        <th>Width</th>
                                        <th>Visible</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var column in CurrentTemplate.Columns.OrderBy(c => c.Index))
                                    {
                                        <tr>
                                            <td>
                                                <input type="number" class="form-control form-control-sm" style="width: 70px;"
                                                       @bind="column.Index" min="0" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control form-control-sm"
                                                       @bind="column.Header" />
                                            </td>
                                            <td>
                                                <select class="form-select form-select-sm" @bind="column.DataField">
                                                    <option value="">Select Field...</option>
                                                    @foreach (var field in GetAvailableFields())
                                                    {
                                                        <option value="@field">@field</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <input type="text" class="form-control form-control-sm"
                                                       @bind="column.Format" placeholder="#,##0.00" />
                                            </td>
                                            <td>
                                                <input type="number" class="form-control form-control-sm" style="width: 80px;"
                                                       @bind="column.Width" min="50" max="500" />
                                            </td>
                                            <td>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" @bind="column.IsVisible" />
                                                </div>
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-danger btn-sm"
                                                        @onclick="() => RemoveColumn(column)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-table display-4 mb-3"></i>
                            <p>No columns defined yet. Click "Add Column" to get started.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Formulas Section -->
            @if (CurrentTemplate.Formatting.AddSummarySection)
            {
                <div class="card mt-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">Summary Formulas</h6>
                        <button class="btn btn-secondary btn-sm" @onclick="AddFormula">
                            <i class="bi bi-plus-circle me-1"></i>Add Formula
                        </button>
                    </div>
                    <div class="card-body">
                        @if (CurrentTemplate.Formulas.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Formula</th>
                                            <th>Row</th>
                                            <th>Column</th>
                                            <th>Format</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var formula in CurrentTemplate.Formulas)
                                        {
                                            <tr>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="formula.Name" placeholder="Total Amount" />
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="formula.Formula" placeholder="=SUM(B:B)" />
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm" style="width: 80px;"
                                                           @bind="formula.Row" min="0" />
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm" style="width: 80px;"
                                                           @bind="formula.Column" min="0" />
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="formula.Format" placeholder="#,##0.00" />
                                                </td>
                                                <td>
                                                    <button class="btn btn-outline-danger btn-sm"
                                                            @onclick="() => RemoveFormula(formula)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center text-muted py-3">
                                <p>No formulas defined. Add formulas for totals, counts, etc.</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="designer-footer mt-4">
        <div class="d-flex gap-2">
            <button class="btn btn-success" @onclick="SaveTemplate" disabled="@_isSaving">
                @if (_isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="bi bi-save me-1"></i>Save Template
            </button>

            <button class="btn btn-primary" @onclick="PreviewTemplate">
                <i class="bi bi-eye me-1"></i>Preview
            </button>

            <button class="btn btn-secondary" @onclick="ResetTemplate">
                <i class="bi bi-arrow-clockwise me-1"></i>Reset
            </button>

            @if (OnCancel.HasDelegate)
            {
                <button class="btn btn-outline-secondary" @onclick="OnCancel">
                    Cancel
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public SheetTemplate? Template { get; set; }
    [Parameter] public EventCallback<SheetTemplate> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private SheetTemplate CurrentTemplate = new();
    private bool IsEditing => Template != null;
    private bool _isSaving = false;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;

    protected override void OnInitialized()
    {
        if (Template != null)
        {
            // Clone the template for editing
            CurrentTemplate = new SheetTemplate
                {
                    Id = Template.Id,
                    Name = Template.Name,
                    Description = Template.Description,
                    DataType = Template.DataType,
                    Columns = new List<ColumnTemplate>(Template.Columns),
                    Formulas = new List<FormulaTemplate>(Template.Formulas),
                    Formatting = new SheetFormatting
                    {
                        FreezeHeaderRow = Template.Formatting.FreezeHeaderRow,
                        AutoFilter = Template.Formatting.AutoFilter,
                        AlternateRowColors = Template.Formatting.AlternateRowColors,
                        AddSummarySection = Template.Formatting.AddSummarySection,
                        HeaderBackgroundColor = Template.Formatting.HeaderBackgroundColor,
                        AlternateColor = Template.Formatting.AlternateColor
                    },
                    CreatedAt = Template.CreatedAt,
                    CreatedBy = Template.CreatedBy
                };
        }
        else
        {
            CurrentTemplate = new SheetTemplate
                {
                    CreatedBy = "Current User", // TODO: Get from auth service
                    Formatting = new SheetFormatting()
                };
        }
    }

    private string[] GetAvailableFields()
    {
        return CurrentTemplate.DataType switch
        {
            "BankSlipData" => new[]
            {
                "TransactionDate", "Amount", "AccountName", "AccountNumber",
                "ReceiverName", "ReceiverAccount", "Note", "ProcessedBy",
                "ProcessedAt", "SlipCollectionName", "OriginalFilePath"
            },
            "SalesData" => new[]
            {
                "Date", "Platform", "Sku", "Quantity", "Amount", "OrderNumber"
            },
            _ => new[] { "Id", "Name", "Date", "Amount", "Description" }
        };
    }

    private void AddColumn()
    {
        var nextIndex = CurrentTemplate.Columns.Any() ? CurrentTemplate.Columns.Max(c => c.Index) + 1 : 0;
        CurrentTemplate.Columns.Add(new ColumnTemplate
            {
                Index = nextIndex,
                Header = $"Column {nextIndex + 1}",
                IsVisible = true,
                Width = 120
            });
    }

    private void RemoveColumn(ColumnTemplate column)
    {
        CurrentTemplate.Columns.Remove(column);
    }

    private void AddFormula()
    {
        CurrentTemplate.Formulas.Add(new FormulaTemplate
            {
                Name = "New Formula",
                Formula = "=",
                Row = CurrentTemplate.Formulas.Count,
                Column = 0,
                IsBold = true
            });
    }

    private void RemoveFormula(FormulaTemplate formula)
    {
        CurrentTemplate.Formulas.Remove(formula);
    }

    private async Task SaveTemplate()
    {
        if (string.IsNullOrEmpty(CurrentTemplate.Name))
        {
            ShowStatus("Template name is required", true);
            return;
        }

        if (string.IsNullOrEmpty(CurrentTemplate.DataType))
        {
            ShowStatus("Data type is required", true);
            return;
        }

        if (!CurrentTemplate.Columns.Any())
        {
            ShowStatus("At least one column is required", true);
            return;
        }

        try
        {
            _isSaving = true;
            StateHasChanged();

            var success = await TemplateService.SaveTemplateAsync(CurrentTemplate);
            if (success)
            {
                ShowStatus($"Template '{CurrentTemplate.Name}' saved successfully!", false);
                await OnSaved.InvokeAsync(CurrentTemplate);
            }
            else
            {
                ShowStatus("Failed to save template", true);
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Error saving template: {ex.Message}", true);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task PreviewTemplate()
    {
        // TODO: Implement preview functionality
        // This could open a modal showing what the sheet would look like
        await JSRuntime.InvokeVoidAsync("alert", "Preview functionality coming soon!");
    }

    private void ResetTemplate()
    {
        if (Template != null)
        {
            OnInitialized(); // Reset to original
        }
        else
        {
            CurrentTemplate = new SheetTemplate
                {
                    CreatedBy = "Current User",
                    Formatting = new SheetFormatting()
                };
        }
    }

    private void ShowStatus(string message, bool isError)
    {
        _statusMessage = message;
        _statusIsError = isError;
        StateHasChanged();
    }
}