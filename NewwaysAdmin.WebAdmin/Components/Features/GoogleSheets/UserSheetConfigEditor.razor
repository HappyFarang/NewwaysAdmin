@* NewwaysAdmin.WebAdmin/Components/Features/GoogleSheets/UserSheetConfigEditor.razor *@
@using NewwaysAdmin.GoogleSheets.Models
@using NewwaysAdmin.GoogleSheets.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject UserSheetConfigService ConfigService
@inject AuthenticationStateProvider AuthStateProvider

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="bi bi-person-gear me-2"></i>
            Your Google Sheets Settings
        </h5>
    </div>
    <div class="card-body">
        @if (_isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading your settings...</p>
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="alert @(_statusIsError ? "alert-danger" : "alert-success") alert-dismissible">
                    @_statusMessage
                    <button type="button" class="btn-close" @onclick="() => _statusMessage = string.Empty"></button>
                </div>
            }

            <div class="row">
                <div class="col-md-6">
                    <h6>Export Preferences</h6>

                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox"
                               checked="@_createNewSheet"
                               @onchange="@(e => UpdateSetting("CreateNewSheet", (bool)e.Value!))"
                               id="createNewSheet" />
                        <label class="form-check-label" for="createNewSheet">
                            Always create new spreadsheet
                        </label>
                        <div class="form-text">
                            If unchecked, exports will be added to your default spreadsheet
                        </div>
                    </div>

                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox"
                               checked="@_autoOpenSheet"
                               @onchange="@(e => UpdateSetting("AutoOpenSheet", (bool)e.Value!))"
                               id="autoOpenSheet" />
                        <label class="form-check-label" for="autoOpenSheet">
                            Automatically open sheet after export
                        </label>
                    </div>

                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox"
                               checked="@_includeMetadata"
                               @onchange="@(e => UpdateSetting("IncludeMetadata", (bool)e.Value!))"
                               id="includeMetadata" />
                        <label class="form-check-label" for="includeMetadata">
                            Include export metadata in sheet
                        </label>
                    </div>
                </div>

                <div class="col-md-6">
                    <h6>Export History</h6>

                    @if (_lastExportInfo.lastExportDate.HasValue)
                    {
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6 class="card-title">Last Export</h6>
                                <p class="card-text">
                                    <strong>Date:</strong> @_lastExportInfo.lastExportDate.Value.ToString("yyyy-MM-dd HH:mm")<br />
                                    @if (!string.IsNullOrEmpty(_lastExportInfo.lastSheetUrl))
                                    {
                                        <strong>Sheet:</strong>
                                        <a href="@_lastExportInfo.lastSheetUrl" target="_blank" class="text-decoration-none">
                                            <i class="bi bi-box-arrow-up-right me-1"></i>Open Last Export
                                        </a>
                                    }
                                </p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-muted">
                            <i class="bi bi-info-circle me-2"></i>
                            No exports yet
                        </div>
                    }
                </div>
            </div>

            <div class="mt-4">
                <button class="btn btn-primary" @onclick="SaveSettings" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="bi bi-save me-1"></i>Save Settings
                </button>

                <button class="btn btn-outline-secondary ms-2" @onclick="TestExport">
                    <i class="bi bi-cloud-upload me-1"></i>Test Export
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string ModuleName { get; set; } = "BankSlip";

    private bool _isLoading = true;
    private bool _isSaving = false;
    private string _statusMessage = string.Empty;
    private bool _statusIsError = false;
    private string _currentUsername = string.Empty;

    // Settings
    private bool _createNewSheet = true;
    private bool _autoOpenSheet = true;
    private bool _includeMetadata = true;

    // Export info
    private (DateTime? lastExportDate, string? lastSheetId, string? lastSheetUrl) _lastExportInfo;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _currentUsername = authState.User.Identity?.Name ?? string.Empty;

            if (string.IsNullOrEmpty(_currentUsername))
            {
                ShowStatus("Unable to identify current user", true);
                return;
            }

            await LoadUserSettings();
        }
        catch (Exception ex)
        {
            ShowStatus($"Error loading settings: {ex.Message}", true);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserSettings()
    {
        try
        {
            // Load user preferences
            _createNewSheet = await ConfigService.GetSettingAsync(_currentUsername, ModuleName, "CreateNewSheet", true);
            _autoOpenSheet = await ConfigService.GetSettingAsync(_currentUsername, ModuleName, "AutoOpenSheet", true);
            _includeMetadata = await ConfigService.GetSettingAsync(_currentUsername, ModuleName, "IncludeMetadata", true);

            // Load export history if BankSlipExportService is available
            // Note: This would need to be injected if available
            // _lastExportInfo = await BankSlipExportService.GetLastExportInfoAsync(_currentUsername);
        }
        catch (Exception ex)
        {
            ShowStatus($"Error loading user settings: {ex.Message}", true);
        }
    }

    private async Task UpdateSetting(string key, object value)
    {
        try
        {
            await ConfigService.SetUserSettingAsync(_currentUsername, ModuleName, key, value, _currentUsername);

            // Update local values
            switch (key)
            {
                case "CreateNewSheet":
                    _createNewSheet = (bool)value;
                    break;
                case "AutoOpenSheet":
                    _autoOpenSheet = (bool)value;
                    break;
                case "IncludeMetadata":
                    _includeMetadata = (bool)value;
                    break;
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Error updating setting: {ex.Message}", true);
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            _isSaving = true;
            StateHasChanged();

            // Save all settings
            await ConfigService.SetUserSettingAsync(_currentUsername, ModuleName, "CreateNewSheet", _createNewSheet, _currentUsername);
            await ConfigService.SetUserSettingAsync(_currentUsername, ModuleName, "AutoOpenSheet", _autoOpenSheet, _currentUsername);
            await ConfigService.SetUserSettingAsync(_currentUsername, ModuleName, "IncludeMetadata", _includeMetadata, _currentUsername);

            ShowStatus("Settings saved successfully!", false);
        }
        catch (Exception ex)
        {
            ShowStatus($"Error saving settings: {ex.Message}", true);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task TestExport()
    {
        try
        {
            ShowStatus("Test export functionality would go here...", false);
            // TODO: Implement test export
            // This would call BankSlipExportService.TestExportAsync(_currentUsername);
        }
        catch (Exception ex)
        {
            ShowStatus($"Error during test export: {ex.Message}", true);
        }
    }

    private void ShowStatus(string message, bool isError)
    {
        _statusMessage = message;
        _statusIsError = isError;
        StateHasChanged();
    }
}