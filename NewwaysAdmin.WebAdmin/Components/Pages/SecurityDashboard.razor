@* Components/Pages/SecurityDashboard.razor *@
@page "/admin/security"
@using NewwaysAdmin.WebAdmin.Services.Security
@using Microsoft.AspNetCore.Authorization
@using System.Net
@inject ISimpleDoSProtectionService DoSService
@inject ILogger<SecurityDashboard> Logger
@attribute [Authorize]

<PageTitle>Security Dashboard</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <h2>🛡️ Security Dashboard</h2>
            <p class="text-muted">DoS protection and security monitoring</p>
        </div>
    </div>

    @if (_metrics != null)
    {
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h5 class="card-title">Last Hour Traffic</h5>
                        <h3>@_metrics.TotalRequestsLastHour</h3>
                        <small>from @_metrics.UniqueIPsLastHour unique IPs</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <h5 class="card-title">Blocked IPs</h5>
                        <h3>@_metrics.CurrentlyBlockedIPs</h3>
                        <small>currently blocked</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-dark">
                    <div class="card-body">
                        <h5 class="card-title">Auto-Blocks Today</h5>
                        <h3>@_metrics.AutoBlocksToday</h3>
                        <small>automatic blocks</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h5 class="card-title">Protection Status</h5>
                        <h3>✅ ACTIVE</h3>
                        <button class="btn btn-sm btn-light" @onclick="RefreshData">Refresh</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Request Distribution -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Request Distribution (Last Hour)</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-2">
                            <strong>Public Pages:</strong> @_metrics.PublicPageRequests requests
                            <div class="progress" style="height: 10px;">
                                <div class="progress-bar bg-warning"
                                     style="width: @GetPercentage(_metrics.PublicPageRequests, _metrics.TotalRequestsLastHour)%"></div>
                            </div>
                        </div>
                        <div class="mb-2">
                            <strong>Authenticated Pages:</strong> @_metrics.AuthenticatedPageRequests requests
                            <div class="progress" style="height: 10px;">
                                <div class="progress-bar bg-success"
                                     style="width: @GetPercentage(_metrics.AuthenticatedPageRequests, _metrics.TotalRequestsLastHour)%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Top Request Sources</h5>
                    </div>
                    <div class="card-body">
                        @if (_metrics.TopAttackers.Any())
                        {
                            @foreach (var attacker in _metrics.TopAttackers.Take(5))
                            {
                                <div class="mb-2">
                                    <code>@attacker</code>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No activity detected</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Blocked IPs Table -->
        @if (_blockedClients?.Any() == true)
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5>🚫 Blocked IP Addresses (@_blockedClients.Count)</h5>
                            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshData">
                                Refresh
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>IP Address</th>
                                            <th>Blocked At</th>
                                            <th>Status</th>
                                            <th>Reason</th>
                                            <th>Requests</th>
                                            <th>User Agent</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var blocked in _blockedClients.OrderByDescending(b => b.BlockedAt))
                                        {
                                            <tr class="@GetRowClass(blocked)">
                                                <td>
                                                    <code class="@GetIpClass(blocked)">@blocked.IpAddress</code>
                                                    @if (blocked.IsPermanent)
                                                    {
                                                        <span class="badge bg-danger ms-1">PERMANENT</span>
                                                    }
                                                </td>
                                                <td>@blocked.BlockedAt.ToString("MM/dd HH:mm")</td>
                                                <td>
                                                    @{
                                                        var remaining = blocked.ExpiresAt - DateTime.UtcNow;
                                                    }
                                                    @if (blocked.IsPermanent)
                                                    {
                                                        <span class="text-danger">PERMANENT</span>
                                                    }
                                                    else if (remaining.TotalMinutes > 60)
                                                    {
                                                        <span class="text-warning">@remaining.Hours h @remaining.Minutes m</span>
                                                    }
                                                    else if (remaining.TotalMinutes > 0)
                                                    {
                                                        <span class="text-info">@remaining.Minutes m</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Expired</span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge bg-@GetReasonBadgeColor(blocked.Reason)">
                                                        @TruncateReason(blocked.Reason)
                                                    </span>
                                                </td>
                                                <td>@blocked.TotalRequests</td>
                                                <td class="small" style="max-width: 200px;">
                                                    @TruncateUserAgent(blocked.UserAgent)
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-success"
                                                            @onclick="() => UnblockIP(blocked.IpAddress)"
                                                            title="Unblock this IP">
                                                        Unblock
                                                    </button>
                                                    @if (!blocked.IsPermanent)
                                                    {
                                                        <button class="btn btn-sm btn-outline-danger ms-1"
                                                                @onclick="() => PermanentBan(blocked.IpAddress)"
                                                                title="Permanently ban this IP">
                                                            Ban Forever
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Manual Block Section -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>🔒 Manual IP Block</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">IP Address</label>
                            <input type="text" class="form-control" @bind="_manualBlockIP"
                                   placeholder="Enter IP address to block" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Block Type</label>
                            <select class="form-select" @bind="_blockType">
                                <option value="temporary">Temporary (2 hours)</option>
                                <option value="long">Long term (24 hours)</option>
                                <option value="permanent">Permanent Ban</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Reason</label>
                            <input type="text" class="form-control" @bind="_manualBlockReason"
                                   placeholder="Reason for blocking" />
                        </div>
                        <button class="btn btn-danger" @onclick="ExecuteManualBlock"
                                disabled="@(string.IsNullOrEmpty(_manualBlockIP))">
                            Block IP Address
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>⚙️ Protection Settings</h5>
                    </div>
                    <div class="card-body">
                        <h6>Current Rate Limits:</h6>
                        <ul class="list-unstyled">
                            <li>🌐 <strong>Public pages:</strong> 50 requests/minute</li>
                            <li>👤 <strong>Authenticated users:</strong> 120 requests/minute</li>
                            <li>⏰ <strong>Hourly limits:</strong> 200/3600 respectively</li>
                            <li>🎯 <strong>Auto-block triggers:</strong></li>
                            <ul>
                                <li>• Suspicious user agents</li>
                                <li>• 5+ consecutive 404s (path scanning)</li>
                                <li>• 80%+ error rate</li>
                            </ul>
                        </ul>

                        <div class="alert alert-info mt-3">
                            <small>
                                <strong>Note:</strong> All blocks and statistics are persisted
                                to JSON storage and survive server restarts.
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Most Targeted Paths -->
        @if (_metrics.MostTargetedPaths.Any())
        {
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>📊 Most Targeted Paths</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @foreach (var path in _metrics.MostTargetedPaths.Take(10))
                                {
                                    <div class="col-md-6 mb-2">
                                        <code>@path</code>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>

@code {
    private SecurityMetrics? _metrics;
    private List<BlockedClient>? _blockedClients;
    private Timer? _refreshTimer;

    // Manual blocking form
    private string _manualBlockIP = "";
    private string _blockType = "temporary";
    private string _manualBlockReason = "Manual administrative block";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

        // Auto-refresh every 30 seconds
        _refreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), null,
            TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task RefreshData()
    {
        try
        {
            _metrics = await DoSService.GetMetricsAsync();
            _blockedClients = await DoSService.GetBlockedClientsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing security data");
        }
    }

    private async Task UnblockIP(string ipAddress)
    {
        try
        {
            if (IPAddress.TryParse(ipAddress, out var ip))
            {
                await DoSService.UnblockAsync(ip);
                await RefreshData();
                Logger.LogInformation("Manually unblocked IP {IpAddress}", ipAddress);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error unblocking IP {IpAddress}", ipAddress);
        }
    }

    private async Task PermanentBan(string ipAddress)
    {
        try
        {
            if (IPAddress.TryParse(ipAddress, out var ip))
            {
                await DoSService.PermanentlyBanAsync(ip, "Upgraded to permanent ban from dashboard");
                await RefreshData();
                Logger.LogInformation("Permanently banned IP {IpAddress}", ipAddress);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error permanently banning IP {IpAddress}", ipAddress);
        }
    }

    private async Task ExecuteManualBlock()
    {
        try
        {
            if (IPAddress.TryParse(_manualBlockIP, out var ip))
            {
                if (_blockType == "permanent")
                {
                    await DoSService.PermanentlyBanAsync(ip, _manualBlockReason);
                }
                else
                {
                    var duration = _blockType == "long" ? TimeSpan.FromHours(24) : TimeSpan.FromHours(2);
                    await DoSService.ManuallyBlockAsync(ip, duration, _manualBlockReason);
                }

                // Clear form
                _manualBlockIP = "";
                _manualBlockReason = "Manual administrative block";

                await RefreshData();
                Logger.LogInformation("Manually blocked IP {IpAddress} ({BlockType})", _manualBlockIP, _blockType);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error executing manual block for IP {IpAddress}", _manualBlockIP);
        }
    }

    private double GetPercentage(int part, int total)
    {
        return total > 0 ? (part * 100.0 / total) : 0;
    }

    private string GetRowClass(BlockedClient blocked)
    {
        if (blocked.IsPermanent) return "table-danger";
        if (blocked.TotalRequests > 50) return "table-warning";
        return "";
    }

    private string GetIpClass(BlockedClient blocked)
    {
        return blocked.IsPermanent ? "text-danger fw-bold" : "text-warning";
    }

    private string GetReasonBadgeColor(string reason)
    {
        if (reason.Contains("PERMANENT")) return "danger";
        if (reason.Contains("Rate limit")) return "warning";
        if (reason.Contains("suspicious")) return "info";
        if (reason.Contains("scanning")) return "danger";
        if (reason.Contains("Manual")) return "secondary";
        return "dark";
    }

    private string TruncateReason(string reason)
    {
        return reason.Length > 30 ? reason.Substring(0, 30) + "..." : reason;
    }

    private string TruncateUserAgent(string userAgent)
    {
        if (string.IsNullOrEmpty(userAgent)) return "Unknown";
        return userAgent.Length > 40 ? userAgent.Substring(0, 40) + "..." : userAgent;
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}