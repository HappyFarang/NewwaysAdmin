@page "/security-dashboard"
@using NewwaysAdmin.WebAdmin.Services.Security
@using NewwaysAdmin.WebAdmin.Services.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net
@inject ISimpleDoSProtectionService DoSService
@inject ILogger<SecurityDashboard> Logger
@inject NavigationManager Navigation
@inject IAuthenticationService AuthService

<PageTitle>Security Dashboard</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (_isAdmin)
        {
            @if (_metrics == null || _blockedClients == null)
            {
                <div class="text-center p-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading security data...</p>
                </div>
            }
            else
            {
                <div class="container-fluid mt-4">
                    <div class="row mb-3">
                        <div class="col">
                            <h2>🛡️ Security Dashboard</h2>
                            <p class="text-muted">Real-time security monitoring and DoS protection</p>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-danger me-2" @onclick="NavigateToPermanentBans">
                                🚫 Permanent Bans (@_metrics.PermanentlyBannedIPs)
                            </button>
                            <button class="btn btn-primary" @onclick="RefreshData">
                                🔄 Refresh
                            </button>
                        </div>
                    </div>

                    <!-- Overview Cards -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card border-primary">
                                <div class="card-body">
                                    <h6 class="text-muted">Requests (Last Hour)</h6>
                                    <h2 class="display-6 text-primary">@_metrics.TotalRequestsLastHour</h2>
                                    <small class="text-muted">@_metrics.UniqueIPsLastHour unique IPs</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card border-warning">
                                <div class="card-body">
                                    <h6 class="text-muted">Currently Blocked</h6>
                                    <h2 class="display-6 text-warning">@_metrics.CurrentlyBlockedIPs</h2>
                                    <small class="text-muted">Temporary blocks</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card border-danger">
                                <div class="card-body">
                                    <h6 class="text-muted">Permanent Bans</h6>
                                    <h2 class="display-6 text-danger">@_metrics.PermanentlyBannedIPs</h2>
                                    <small>
                                        <a href="/security/permanent-bans" class="text-decoration-none">
                                            View all →
                                        </a>
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card border-info">
                                <div class="card-body">
                                    <h6 class="text-muted">Auto-Blocks Today</h6>
                                    <h2 class="display-6 text-info">@_metrics.AutoBlocksToday</h2>
                                    <small class="text-muted">Rate limit triggers</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Request Distribution -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5>📊 Request Distribution</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Public Requests</span>
                                            <span class="fw-bold">@_metrics.PublicPageRequests (@GetPercentage(_metrics.PublicPageRequests, _metrics.TotalRequestsLastHour).ToString("F1")%)</span>
                                        </div>
                                        <div class="progress" style="height: 25px;">
                                            <div class="progress-bar bg-info" role="progressbar"
                                                 style="width: @GetPercentage(_metrics.PublicPageRequests, _metrics.TotalRequestsLastHour)%">
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Authenticated Requests</span>
                                            <span class="fw-bold">@_metrics.AuthenticatedPageRequests (@GetPercentage(_metrics.AuthenticatedPageRequests, _metrics.TotalRequestsLastHour).ToString("F1")%)</span>
                                        </div>
                                        <div class="progress" style="height: 25px;">
                                            <div class="progress-bar bg-success" role="progressbar"
                                                 style="width: @GetPercentage(_metrics.AuthenticatedPageRequests, _metrics.TotalRequestsLastHour)%">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5>🎯 Most Targeted Paths</h5>
                                </div>
                                <div class="card-body">
                                    @if (_metrics.MostTargetedPaths.Any())
                                    {
                                        <ul class="list-unstyled mb-0">
                                            @foreach (var path in _metrics.MostTargetedPaths.Take(5))
                                            {
                                                <li class="mb-2">
                                                    <code class="small">@path</code>
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p class="text-muted mb-0">No path data available</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Blocked Clients Table -->
                    <div class="row">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5>⚠️ Currently Blocked IPs (Temporary)</h5>
                                </div>
                                <div class="card-body p-0">
                                    @if (_blockedClients.Any())
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-hover mb-0">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>IP Address</th>
                                                        <th>Blocked At</th>
                                                        <th>Expires At</th>
                                                        <th>Reason</th>
                                                        <th>Requests</th>
                                                        <th>User Agent</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var blocked in _blockedClients.Take(20))
                                                    {
                                                        <tr class="@GetRowClass(blocked)">
                                                            <td>
                                                                <span class="@GetIpClass(blocked) font-monospace">@blocked.IpAddress</span>
                                                            </td>
                                                            <td>
                                                                <small>@blocked.BlockedAt.ToLocalTime().ToString("HH:mm:ss")</small>
                                                            </td>
                                                            <td>
                                                                <small>@blocked.ExpiresAt.ToLocalTime().ToString("HH:mm:ss")</small>
                                                                <br />
                                                                <span class="badge bg-secondary">@GetTimeRemaining(blocked.ExpiresAt)</span>
                                                            </td>
                                                            <td>
                                                                <span class="badge @GetReasonBadgeColor(blocked.Reason)">
                                                                    @TruncateReason(blocked.Reason)
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <span class="badge bg-dark">@blocked.TotalRequests</span>
                                                            </td>
                                                            <td>
                                                                <small class="text-muted">@TruncateUserAgent(blocked.UserAgent)</small>
                                                            </td>
                                                            <td>
                                                                <button class="btn btn-sm btn-outline-success"
                                                                        @onclick="() => UnblockIP(blocked.IpAddress)"
                                                                        title="Unblock this IP">
                                                                    Unblock
                                                                </button>
                                                                <button class="btn btn-sm btn-outline-danger ms-1"
                                                                        @onclick="() => PermanentBan(blocked.IpAddress)"
                                                                        title="Permanently ban this IP">
                                                                    Ban Forever
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="p-4 text-center text-muted">
                                            <p class="mb-0">✅ No currently blocked IPs</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Manual Block Section -->
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5>🔒 Manual IP Block (Temporary)</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">IP Address</label>
                                        <input type="text" class="form-control" @bind="_manualBlockIP"
                                               placeholder="Enter IP address to block" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Block Type</label>
                                        <select class="form-select" @bind="_blockType">
                                            <option value="temporary">Temporary (2 hours)</option>
                                            <option value="long">Long (24 hours)</option>
                                            <option value="permanent">Permanent Ban</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Reason</label>
                                        <input type="text" class="form-control" @bind="_manualBlockReason"
                                               placeholder="Reason for blocking" />
                                    </div>
                                    <button class="btn btn-danger w-100" @onclick="ExecuteManualBlock"
                                            disabled="@(string.IsNullOrWhiteSpace(_manualBlockIP))">
                                        Block IP
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5>👥 Top Attackers</h5>
                                </div>
                                <div class="card-body">
                                    @if (_metrics.TopAttackers.Any())
                                    {
                                        <ul class="list-unstyled mb-0">
                                            @foreach (var attacker in _metrics.TopAttackers.Take(10))
                                            {
                                                <li class="mb-2">
                                                    <span class="font-monospace">@attacker</span>
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p class="text-muted mb-0">No attacker data available</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert alert-danger mt-4">
                <h4>Access Denied</h4>
                <p>You do not have permission to access this page. Admin access required.</p>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning mt-4">
            <h4>Authentication Required</h4>
            <p>Please <a href="/login">login</a> to access this page.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private SecurityMetrics? _metrics;
    private List<BlockedClient>? _blockedClients;
    private Timer? _refreshTimer;
    private bool _isAdmin = false;

    // Manual blocking form
    private string _manualBlockIP = "";
    private string _blockType = "temporary";
    private string _manualBlockReason = "Manual administrative block";

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthState;
            var username = authState.User.Identity?.Name;

            if (!string.IsNullOrEmpty(username))
            {
                var user = await AuthService.GetUserByNameAsync(username);
                _isAdmin = user?.IsAdmin ?? false;

                if (_isAdmin)
                {
                    await RefreshData();

                    // Auto-refresh every 30 seconds
                    _refreshTimer = new Timer(async _ =>
                    {
                        try
                        {
                            await InvokeAsync(RefreshData);
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError(ex, "Error in auto-refresh");
                        }
                    }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnInitializedAsync");
        }
    }

    private async Task RefreshData()
    {
        try
        {
            _metrics = await DoSService.GetMetricsAsync();
            _blockedClients = await DoSService.GetBlockedClientsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing security data");
        }
    }

    private void NavigateToPermanentBans()
    {
        Navigation.NavigateTo("/security/permanent-bans");
    }

    private async Task UnblockIP(string ipAddress)
    {
        try
        {
            if (IPAddress.TryParse(ipAddress, out var ip))
            {
                await DoSService.UnblockAsync(ip);
                await RefreshData();
                Logger.LogInformation("Manually unblocked IP {IpAddress}", ipAddress);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error unblocking IP {IpAddress}", ipAddress);
        }
    }

    private async Task PermanentBan(string ipAddress)
    {
        try
        {
            if (IPAddress.TryParse(ipAddress, out var ip))
            {
                await DoSService.PermanentlyBanAsync(ip, "Upgraded to permanent ban from dashboard", "Admin-Dashboard");
                await RefreshData();
                Logger.LogInformation("Permanently banned IP {IpAddress}", ipAddress);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error permanently banning IP {IpAddress}", ipAddress);
        }
    }

    private async Task ExecuteManualBlock()
    {
        try
        {
            if (IPAddress.TryParse(_manualBlockIP, out var ip))
            {
                if (_blockType == "permanent")
                {
                    await DoSService.PermanentlyBanAsync(ip, _manualBlockReason, "Admin-Manual");
                }
                else
                {
                    var duration = _blockType == "long"
                        ? TimeSpan.FromHours(24)
                        : TimeSpan.FromHours(2);
                    await DoSService.ManuallyBlockAsync(ip, duration, _manualBlockReason);
                }

                // Clear form
                _manualBlockIP = "";
                _manualBlockReason = "Manual administrative block";

                await RefreshData();
                Logger.LogInformation("Manually blocked IP {IpAddress} ({BlockType})", _manualBlockIP, _blockType);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error executing manual block for IP {IpAddress}", _manualBlockIP);
        }
    }

    private double GetPercentage(int part, int total)
    {
        return total > 0 ? (part * 100.0 / total) : 0;
    }

    private string GetRowClass(BlockedClient blocked)
    {
        if (blocked.TotalRequests > 100) return "table-danger";
        if (blocked.TotalRequests > 50) return "table-warning";
        return "";
    }

    private string GetIpClass(BlockedClient blocked)
    {
        return blocked.TotalRequests > 100 ? "text-danger fw-bold" : "text-warning";
    }

    private string GetReasonBadgeColor(string reason)
    {
        if (reason.Contains("Rate limit")) return "bg-warning text-dark";
        if (reason.Contains("suspicious")) return "bg-info";
        if (reason.Contains("scanning")) return "bg-danger";
        if (reason.Contains("Manual") || reason.Contains("MANUAL")) return "bg-secondary";
        return "bg-dark";
    }

    private string GetTimeRemaining(DateTime expiresAt)
    {
        var remaining = expiresAt - DateTime.UtcNow;
        if (remaining.TotalMinutes < 1) return "< 1m";
        if (remaining.TotalHours < 1) return $"{(int)remaining.TotalMinutes}m";
        return $"{(int)remaining.TotalHours}h {remaining.Minutes}m";
    }

    private string TruncateReason(string reason)
    {
        return reason.Length > 40 ? reason.Substring(0, 40) + "..." : reason;
    }

    private string TruncateUserAgent(string userAgent)
    {
        if (string.IsNullOrEmpty(userAgent)) return "Unknown";
        return userAgent.Length > 40 ? userAgent.Substring(0, 40) + "..." : userAgent;
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
