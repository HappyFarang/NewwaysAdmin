@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/WorkerDetailsComponents/ModalComponents/AdjustmentModalBody.razor *@
@* Purpose: Container that orchestrates all adjustment panels with mutual exclusivity *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Services.Workers
@using NewwaysAdmin.Shared.IO
@using NewwaysAdmin.WorkerAttendance.Models
@using NewwaysAdmin.WebAdmin.Infrastructure.Storage
@inject WorkerDataService DataService
@inject WorkerSettingsService SettingsService
@inject StorageManager StorageManager
@inject ILogger<AdjustmentModalBody> Logger
@inject AdjustmentService AdjustmentService

@if (_isLoading)
{
    <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading adjustment data...</p>
    </div>
}
else if (_error != null)
{
    <div class="alert alert-danger">
        <span class="bi bi-exclamation-triangle me-2"></span>
        <strong>Error:</strong> @_error
    </div>
}
else if (_dayData == null)
{
    <div class="alert alert-info">
        <span class="bi bi-info-circle me-2"></span>
        <strong>No data found</strong> for this date.
    </div>
}
else
{
    <!-- Current Day Data Display (Always Visible) -->
    <DayDataDisplay WorkerId="WorkerId"
                    WorkerName="WorkerName"
                    Date="Date" />

    <!-- Shortcuts Section (Collapsible, Open by Default) -->
    <ShortcutsPanel IsExpanded="_shortcutsExpanded"
                    OnExpandedChanged="HandleShortcutsExpandedChanged"
                    OnWorkerOnTimeClicked="HandleWorkerOnTime"
                    OnVarianceToOTClicked="HandleVarianceToOT"
                    OnManualSignOutClicked="HandleManualSignOut"
                    IsProcessing="_isProcessingShortcut"
                    CurrentOperation="_currentShortcutOperation"
                    FeedbackMessage="_lastShortcutMessage" />

    <!-- Manual Time Adjustments (Collapsible, Closed by Default) -->
    <TimeAdjustmentPanel IsExpanded="_manualAdjustmentsExpanded"
                         OnExpandedChanged="HandleManualAdjustmentsExpandedChanged"
                         OriginalSignIn="_dayData.SignIn"
                         OriginalSignOut="_dayData.SignOut"
                         OriginalOTSignIn="_dayData.OTSignIn"
                         OriginalOTSignOut="_dayData.OTSignOut"
                         OriginalNormalHours="_dayData.NormalWorkHours"
                         OriginalOTHours="_dayData.OTWorkHours"
                         OriginalDailyPay="@CalculateCurrentDailyPay()"
                         RawSignIn="_rawSignIn"
                         RawSignOut="_rawSignOut"
                         RawOTSignIn="_rawOTSignIn"
                         RawOTSignOut="_rawOTSignOut"
                         Date="Date"
                         OnTimeChanged="HandleTimeChanged"
                         OnPayOverrideChanged="HandlePayOverrideChanged" />

    <!-- Quick Actions (Always Visible) -->
    <QuickActionsPanel OnResetToRawClicked="HandleResetToRaw"
                       OnResetToCurrentClicked="HandleResetToCurrent" />
}

@code {
    [Parameter, EditorRequired] public int WorkerId { get; set; }
    [Parameter, EditorRequired] public string WorkerName { get; set; } = string.Empty;
    [Parameter, EditorRequired] public DateTime Date { get; set; }
    [Parameter] public EventCallback<TimeAdjustmentPanel.TimeAdjustmentData> OnAdjustmentChanged { get; set; }
    [Parameter] public EventCallback OnResetToRaw { get; set; }
    [Parameter] public EventCallback OnDataChanged { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    // State
    private bool _isLoading = true;
    private string? _error;
    private WorkerDisplayData? _dayData;
    private WorkerSettings? _workerSettings;

    // Raw times (before any adjustments)
    private DateTime? _rawSignIn;
    private DateTime? _rawSignOut;
    private DateTime? _rawOTSignIn;
    private DateTime? _rawOTSignOut;

    // Panel expansion state (mutual exclusivity)
    private bool _shortcutsExpanded = true;        // Open by default
    private bool _manualAdjustmentsExpanded = false;  // Closed by default

    // Adjustment data
    private decimal? _payOverride;

    // Shortcut feedback state
    private bool _isProcessingShortcut = false;
    private string _lastShortcutMessage = "";
    private string _currentShortcutOperation = "";

    // Track what we've loaded to prevent unnecessary reloads
    private int _lastLoadedWorkerId = 0;
    private DateTime _lastLoadedDate = DateTime.MinValue;
    private IDataStorage<DailyWorkCycle>? _rawDataStorage;

    protected override async Task OnParametersSetAsync()
    {
        // Only load data if we don't have it yet or if the parameters actually changed
        if (_dayData == null || _lastLoadedWorkerId != WorkerId || _lastLoadedDate != Date.Date)
        {
            await LoadData();
            _lastLoadedWorkerId = WorkerId;
            _lastLoadedDate = Date.Date;
        }
    }

    protected override void OnInitialized()
    {
        // Get raw data storage
        _rawDataStorage = StorageManager.GetStorageSync<DailyWorkCycle>("WorkerAttendance");
    }

    // === MUTUAL EXCLUSIVITY LOGIC ===

    private async Task HandleShortcutsExpandedChanged(bool isExpanded)
    {
        _shortcutsExpanded = isExpanded;

        // If shortcuts opened, close manual adjustments
        if (isExpanded && _manualAdjustmentsExpanded)
        {
            _manualAdjustmentsExpanded = false;
        }

        StateHasChanged();
    }

    private async Task HandleManualAdjustmentsExpandedChanged(bool isExpanded)
    {
        _manualAdjustmentsExpanded = isExpanded;

        // If manual adjustments opened, close shortcuts
        if (isExpanded && _shortcutsExpanded)
        {
            _shortcutsExpanded = false;
        }

        StateHasChanged();
    }

    // === EVENT HANDLERS ===

    private async Task HandleTimeChanged(TimeAdjustmentPanel.TimeAdjustmentData adjustmentData)
    {
        Logger.LogInformation("Time adjustment changed for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
        await OnAdjustmentChanged.InvokeAsync(adjustmentData);
    }

    private async Task HandleResetToRaw()
    {
        Logger.LogInformation("Reset to raw times requested for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
        await OnResetToRaw.InvokeAsync();
    }

    private async Task HandleResetToCurrent()
    {
        Logger.LogInformation("Reset to current times requested for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
        // TODO: Implement reset to current functionality
    }

    private async Task HandlePayOverrideChanged(decimal? payOverride)
    {
        _payOverride = payOverride;
        Logger.LogInformation("Pay override changed for {WorkerId} on {Date}: {PayOverride}",
            WorkerId, Date.ToString("yyyy-MM-dd"), payOverride?.ToString("F2") ?? "None");

        // Create a time adjustment data object that includes pay override
        var adjustmentData = new TimeAdjustmentPanel.TimeAdjustmentData
            {
                PayOverride = payOverride
                // Note: Times will be null, but that's fine - the parent will merge with existing time data
            };

        await OnAdjustmentChanged.InvokeAsync(adjustmentData);
    }

    // === SHORTCUT HANDLERS ===

    private async Task HandleWorkerOnTime()
    {
        if (_isProcessingShortcut || _dayData?.SignIn == null || _workerSettings == null)
            return;

        try
        {
            _isProcessingShortcut = true;
            _currentShortcutOperation = "workerOnTime";
            _lastShortcutMessage = "Adjusting to on-time...";
            StateHasChanged();

            Logger.LogInformation("Worker On Time shortcut clicked for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));

            // Get current daily work record
            var currentRecord = await GetOrCreateDailyRecord();

            // Apply the worker on-time adjustment
            var adjustedRecord = await AdjustmentService.ApplyWorkerOnTimeAdjustmentAsync(
                currentRecord,
                _workerSettings,
                "Adjusted" // Generic description as requested
            );

            // Save the adjustment
            var fileName = $"{Date:yyyy-MM-dd}_Worker{WorkerId}.json";
            var adjustmentFileName = $"adjustment_{fileName.Replace(".json", "")}";
            await SaveAdjustmentRecord(adjustmentFileName, adjustedRecord);

            // Show success feedback
            _lastShortcutMessage = "✓ Worker marked as on-time";
            StateHasChanged();

            // Auto-close modal after brief delay
            await Task.Delay(1500);
            await CloseModalWithRefresh();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to apply Worker On Time shortcut for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
            _lastShortcutMessage = "✗ Failed to apply adjustment";
            StateHasChanged();
            await Task.Delay(2000);
            _lastShortcutMessage = "";
        }
        finally
        {
            _isProcessingShortcut = false;
            _currentShortcutOperation = "";
            StateHasChanged();
        }
    }

    private async Task HandleVarianceToOT()
    {
        if (_isProcessingShortcut || _dayData?.SignIn == null || _workerSettings == null)
            return;

        try
        {
            _isProcessingShortcut = true;
            _currentShortcutOperation = "varianceToOT";
            _lastShortcutMessage = "Converting variance to OT...";
            StateHasChanged();

            Logger.LogInformation("Variance to OT shortcut clicked for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));

            // Get current daily work record
            var currentRecord = await GetOrCreateDailyRecord();

            // Check if there's positive variance to convert
            if (currentRecord.VarianceMinutes <= 0)
            {
                _lastShortcutMessage = "✗ No positive variance to convert";
                StateHasChanged();
                await Task.Delay(2000);
                _lastShortcutMessage = "";
                return;
            }

            // Apply variance to OT adjustment
            var adjustedRecord = await AdjustmentService.ApplyVarianceToOTAdjustmentAsync(
                currentRecord,
                _workerSettings
            );

            // Save the adjustment
            var fileName = $"{Date:yyyy-MM-dd}_Worker{WorkerId}.json";
            var adjustmentFileName = $"adjustment_{fileName.Replace(".json", "")}";
            await SaveAdjustmentRecord(adjustmentFileName, adjustedRecord);

            // Show success feedback
            _lastShortcutMessage = $"✓ Converted {currentRecord.VarianceMinutes} min to OT";
            StateHasChanged();

            // Auto-close modal after brief delay
            await Task.Delay(1500);
            await CloseModalWithRefresh();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to apply Variance to OT shortcut for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
            _lastShortcutMessage = "✗ Failed to convert variance";
            StateHasChanged();
            await Task.Delay(2000);
            _lastShortcutMessage = "";
        }
        finally
        {
            _isProcessingShortcut = false;
            _currentShortcutOperation = "";
            StateHasChanged();
        }
    }

    private async Task HandleManualSignOut()
    {
        if (_isProcessingShortcut || _dayData?.SignIn == null || _workerSettings == null)
            return;

        try
        {
            _isProcessingShortcut = true;
            _currentShortcutOperation = "manualSignOut";
            _lastShortcutMessage = "Setting manual sign-out...";
            StateHasChanged();

            Logger.LogInformation("Manual sign-out shortcut clicked for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));

            // Get current daily work record
            var currentRecord = await GetOrCreateDailyRecord();

            // Check if worker already has sign-out time
            if (currentRecord.NormalSignOut.HasValue)
            {
                _lastShortcutMessage = "✗ Worker already signed out";
                StateHasChanged();
                await Task.Delay(2000);
                _lastShortcutMessage = "";
                return;
            }

            // Apply manual sign-out adjustment (uses expected end time)
            var adjustedRecord = await AdjustmentService.ApplyManualSignOutAdjustmentAsync(
                currentRecord,
                _workerSettings
            );

            // Save the adjustment
            var fileName = $"{Date:yyyy-MM-dd}_Worker{WorkerId}.json";
            var adjustmentFileName = $"adjustment_{fileName.Replace(".json", "")}";
            await SaveAdjustmentRecord(adjustmentFileName, adjustedRecord);

            // Show success feedback
            var signOutTime = adjustedRecord.AppliedAdjustment?.AdjustedSignOut?.ToString("HH:mm") ?? "N/A";
            _lastShortcutMessage = $"✓ Signed out at {signOutTime}";
            StateHasChanged();

            // Auto-close modal after brief delay
            await Task.Delay(1500);
            await CloseModalWithRefresh();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to apply Manual Sign-out shortcut for {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
            _lastShortcutMessage = "✗ Failed to set sign-out";
            StateHasChanged();
            await Task.Delay(2000);
            _lastShortcutMessage = "";
        }
        finally
        {
            _isProcessingShortcut = false;
            _currentShortcutOperation = "";
            StateHasChanged();
        }
    }

    // === HELPER METHODS ===

    private decimal CalculateCurrentDailyPay()
    {
        return _workerSettings?.DailyPayRate ?? 350m;
    }

    private async Task<DailyWorkRecord> GetOrCreateDailyRecord()
    {
        // Convert WorkerDisplayData to DailyWorkRecord for adjustment service
        return new DailyWorkRecord
            {
                Date = Date,
                HasData = _dayData?.SignIn.HasValue ?? false,
                WorkHours = _dayData?.NormalWorkHours ?? 0,
                OTHours = _dayData?.OTWorkHours ?? 0,
                OnTime = _dayData?.IsOnTime ?? false,
                LateMinutes = _dayData?.LateMinutes ?? 0,
                VarianceMinutes = _dayData?.VarianceMinutes ?? 0,
                DailyPay = _dayData?.DailyPay ?? 0,
                NormalSignIn = _dayData?.SignIn,
                NormalSignOut = _dayData?.SignOut,
                OTSignIn = _dayData?.OTSignIn,
                OTSignOut = _dayData?.OTSignOut,
                HasAdjustments = _dayData?.HasAdjustments ?? false
            };
    }

    private async Task SaveAdjustmentRecord(string adjustmentFileName, DailyWorkRecord adjustedRecord)
    {
        var adjustmentStorage = StorageManager.GetStorageSync<DailyWorkRecord>("WorkerWeeklyData");

        // Create the final adjustment record
        var finalRecord = new DailyWorkRecord
            {
                Date = Date,
                HasAdjustments = true,
                AppliedAdjustment = adjustedRecord.AppliedAdjustment
            };

        await adjustmentStorage.SaveAsync(adjustmentFileName, finalRecord);
        Logger.LogInformation("Successfully saved shortcut adjustment for worker {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
    }

    private async Task CloseModalWithRefresh()
    {
        // Notify parent that data has changed so it can refresh
        await OnDataChanged.InvokeAsync();

        // Close the modal
        await OnSaved.InvokeAsync();
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            _error = null;

            Logger.LogInformation("Loading adjustment data for worker {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));

            // Load worker settings
            _workerSettings = await SettingsService.GetSettingsAsync(WorkerId, WorkerName);

            // Load day data
            var fileName = $"{Date:yyyy-MM-dd}_Worker{WorkerId}.json";
            _dayData = await DataService.GetCompleteDataAsync(fileName, _workerSettings);

            // Load raw data for reset functionality
            await LoadRawTimes(fileName);

            Logger.LogInformation("Successfully loaded adjustment data for worker {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading adjustment data for worker {WorkerId} on {Date}", WorkerId, Date.ToString("yyyy-MM-dd"));
            _error = $"Failed to load data: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadRawTimes(string fileName)
    {
        try
        {
            if (_rawDataStorage == null) return;

            var rawCycle = await _rawDataStorage.LoadAsync(fileName);
            if (rawCycle == null) return;

            var normalRecords = rawCycle.Records.Where(r => r.WorkCycle == WorkCycle.Normal).ToList();
            var otRecords = rawCycle.Records.Where(r => r.WorkCycle == WorkCycle.OT).ToList();

            _rawSignIn = normalRecords.FirstOrDefault(r => r.Type == AttendanceType.CheckIn)?.Timestamp;
            _rawSignOut = normalRecords.FirstOrDefault(r => r.Type == AttendanceType.CheckOut)?.Timestamp;
            _rawOTSignIn = otRecords.FirstOrDefault(r => r.Type == AttendanceType.CheckIn)?.Timestamp;
            _rawOTSignOut = otRecords.FirstOrDefault(r => r.Type == AttendanceType.CheckOut)?.Timestamp;

            Logger.LogDebug("Loaded raw times: SignIn={SignIn}, SignOut={SignOut}",
                _rawSignIn?.ToString("HH:mm") ?? "None",
                _rawSignOut?.ToString("HH:mm") ?? "None");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Could not load raw data for {FileName}", fileName);
            // Set to null if we can't load raw times
            _rawSignIn = _rawSignOut = _rawOTSignIn = _rawOTSignOut = null;
        }
    }
}