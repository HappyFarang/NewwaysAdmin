@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/WorkerDetailsComponents/WeeklyTableComponents/ColumnTogglePanel.razor *@
@* Purpose: Collapsible column visibility toggle panel with table layout *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Services.Workers

<div class="card mb-3">
    <div class="card-header py-2" style="cursor: pointer;" @onclick="TogglePanel">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <small class="fw-bold">
                    <span class="bi bi-eye me-1"></span>
                    Column Visibility (@VisibleColumns.Count of @AllColumns.Count visible)
                </small>
            </div>
            <div class="d-flex align-items-center gap-2">
                @if (_isExpanded)
                {
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-secondary btn-sm"
                                @onclick="OnResetDefault"
                                @onclick:stopPropagation="true"
                                title="Reset to defaults">
                            <span class="bi bi-arrow-clockwise"></span>
                        </button>
                        <button class="btn btn-outline-secondary btn-sm"
                                @onclick="OnToggleAll"
                                @onclick:stopPropagation="true"
                                title="Toggle all columns">
                            <span class="bi bi-eye"></span>
                        </button>
                    </div>
                }
                <span class="bi @(_isExpanded ? "bi-chevron-up" : "bi-chevron-down")"></span>
            </div>
        </div>
    </div>

    @if (_isExpanded)
    {
        <div class="card-body py-2">
            <div class="table-responsive">
                <table class="table table-sm table-borderless mb-0">
                    <thead>
                        <tr>
                            @foreach (var category in Categories)
                            {
                                var categoryColumns = AllColumns.Where(c => c.Category == category).ToList();
                                var visibleInCategory = categoryColumns.Count(c => VisibleColumns.Contains(c.Key));

                                <th class="text-center border-end">
                                    <small class="fw-bold text-muted d-block">@category</small>
                                    <small class="text-muted">(@visibleInCategory/@categoryColumns.Count)</small>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @foreach (var category in Categories)
                            {
                                var categoryColumns = AllColumns.Where(c => c.Category == category).OrderBy(c => c.SortOrder).ToList();

                                <td class="border-end" style="vertical-align: top; padding: 0.5rem;">
                                    <div class="d-flex flex-wrap" style="gap: 0.25rem;">
                                        @foreach (var column in categoryColumns)
                                        {
                                            var isVisible = VisibleColumns.Contains(column.Key);
                                            <button type="button"
                                                    class="btn @(isVisible ? "btn-primary" : "btn-outline-primary")"
                                                    style="font-size: 0.65rem; padding: 0.15rem 0.35rem;"
                                                    @onclick="() => OnColumnToggle(column.Key)"
                                                    title="@column.Description">
                                                @if (!string.IsNullOrEmpty(column.Icon))
                                                {
                                                    <span class="@column.Icon me-1"></span>
                                                }
                                                @column.DisplayName
                                            </button>
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<TableColumn> AllColumns { get; set; } = new();

    [Parameter, EditorRequired]
    public List<string> Categories { get; set; } = new();

    [Parameter, EditorRequired]
    public HashSet<string> VisibleColumns { get; set; } = new();

    [Parameter]
    public EventCallback<string> OnColumnToggled { get; set; }

    [Parameter]
    public EventCallback OnResetToDefault { get; set; }

    [Parameter]
    public EventCallback OnToggleAllColumns { get; set; }

    private bool _isExpanded = false;

    private void TogglePanel()
    {
        _isExpanded = !_isExpanded;
    }

    private async Task OnColumnToggle(string columnKey)
    {
        await OnColumnToggled.InvokeAsync(columnKey);
    }

    private async Task OnResetDefault()
    {
        await OnResetToDefault.InvokeAsync();
    }

    private async Task OnToggleAll()
    {
        await OnToggleAllColumns.InvokeAsync();
    }
}