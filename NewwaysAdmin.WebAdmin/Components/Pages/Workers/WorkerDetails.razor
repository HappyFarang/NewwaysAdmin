@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/WorkerDetails.razor *@
@* Purpose: FULLY MIGRATED - Worker details page using only new WorkerDataService *@
@* APPROACH: Complete replacement of weekly system with daily-based aggregation *@

@page "/worker-details"
@page "/worker-details/{WorkerId:int}"
@using NewwaysAdmin.WebAdmin.Services.Workers
@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Components.Pages.Workers.Components
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject WorkerDashboardService DashboardService
@inject WorkerDataService DataService  @* NEW: Single source of truth *@
@inject WorkerSettingsService SettingsService
@inject ILogger<WorkerDetails> Logger

<PageTitle>Worker Details</PageTitle>

<div class="container-fluid mt-3">
    <!-- Navigation Tabs -->
    <WorkerNavigationTabs />

    <!-- Worker Selector -->
    <WorkerSelector Workers="@_allWorkers"
                    SelectedWorkerId="@_selectedWorkerId"
                    SelectedWorker="@_selectedWorker"
                    OnWorkerSelected="@HandleWorkerSelected" />

    @if (_selectedWorker != null)
    {
        @if (_isLoadingData)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading worker data...</p>
            </div>
        }
        else
        {
            <!-- Settings Section -->
            <WorkerSettingsCard WorkerId="@_selectedWorkerId"
                                WorkerName="@_selectedWorker.WorkerName"
                                OnSettingsSaved="@HandleSettingsSaved" />

            <!-- NEW: Simple Stats Card using aggregated daily data -->
            <WorkerSimpleStatsCard WeeklyDisplayData="@_weeklyDisplayData"
                                   WeekNumber="@_currentWeekNumber"
                                   WeekStartDate="@_currentWeekStartDate" />

            <!-- NEW: Clean Weekly Table using only WorkerDataService -->
            <WorkerCleanWeeklyTable WeeklyDisplayData="@_weeklyDisplayData"
                                    SelectedWeekOffset="@_selectedWeekOffset"
                                    WeekStartDate="@_currentWeekStartDate"
                                    OnWeekSelected="@HandleWeekSelected"
                                    OnDayUpdated="@HandleDayUpdated" />
        }
    }
    else
    {
        <div class="alert alert-info">
            <span class="bi bi-info-circle me-2"></span>
            Please select a worker to view details.
        </div>
    }
</div>

@code {
    [Parameter]
    public int? WorkerId { get; set; }

    // Clean state using only WorkerDisplayData
    private List<WorkerStatus> _allWorkers = new();
    private int _selectedWorkerId = 0;
    private WorkerStatus? _selectedWorker;
    private List<WorkerDisplayData> _weeklyDisplayData = new();
    private int _selectedWeekOffset = 0; // 0 = current week
    private int _currentWeekNumber = 0;
    private DateTime _currentWeekStartDate;
    private bool _isLoadingData = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkers();

        // If WorkerId parameter is provided, select that worker
        if (WorkerId.HasValue && WorkerId.Value > 0)
        {
            _selectedWorkerId = WorkerId.Value;
            await LoadWorkerData();
        }

        // Calculate current week info
        _currentWeekNumber = GetWeekNumber(DateTime.Today);
        _currentWeekStartDate = GetWeekStartDate(0);
    }

    private async Task LoadWorkers()
    {
        try
        {
            var dashboardData = await DashboardService.GetTodaysDashboardDataAsync();
            _allWorkers = dashboardData.ActiveWorkers
                .Concat(dashboardData.InactiveWorkers)
                .OrderBy(w => w.WorkerName)
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load workers");
        }
    }

    private async Task HandleWorkerSelected(int workerId)
    {
        _selectedWorkerId = workerId;
        await LoadWorkerData();
    }

    private async Task LoadWorkerData()
    {
        _selectedWorker = _allWorkers.FirstOrDefault(w => w.WorkerId == _selectedWorkerId);

        if (_selectedWorker != null)
        {
            await LoadWeeklyDisplayData(_selectedWeekOffset);
        }
    }

    // NEW: Load week data using only WorkerDataService
    private async Task LoadWeeklyDisplayData(int weeksAgo)
    {
        if (_selectedWorker == null) return;

        try
        {
            _isLoadingData = true;
            _selectedWeekOffset = weeksAgo;

            var weekStartDate = GetWeekStartDate(weeksAgo);
            _currentWeekStartDate = weekStartDate;
            _currentWeekNumber = GetWeekNumber(weekStartDate);

            _weeklyDisplayData.Clear();

            // Load worker settings once for the week
            var settings = await SettingsService.GetSettingsAsync(_selectedWorker.WorkerId, _selectedWorker.WorkerName);

            Logger.LogInformation("Loading week data starting {WeekStart} for worker {WorkerId} using WorkerDataService", 
                weekStartDate.ToString("yyyy-MM-dd"), _selectedWorker.WorkerId);

            // Load display data for each day of the week using WorkerDataService
            for (int i = 0; i < 7; i++)
            {
                var date = weekStartDate.AddDays(i);
                var fileName = $"{date:yyyy-MM-dd}_Worker{_selectedWorker.WorkerId}.json";

                try
                {
                    var displayData = await DataService.GetCompleteDataAsync(fileName, settings);
                    if (displayData != null)
                    {
                        // Ensure the filename is set correctly
                        displayData.AttendanceFileName = fileName;
                        _weeklyDisplayData.Add(displayData);
                        
                        Logger.LogDebug("Loaded {Date}: Hours={Hours:F1}, HasAdjustments={HasAdjustments}", 
                            date.ToString("yyyy-MM-dd"), displayData.TotalWorkHours, displayData.HasAdjustments);
                    }
                    else
                    {
                        // Create placeholder for days with no attendance data
                        var placeholder = new WorkerDisplayData
                        {
                            WorkerId = _selectedWorker.WorkerId,
                            WorkerName = _selectedWorker.WorkerName,
                            AttendanceFileName = fileName,
                            HasWorkActivity = false,
                            HasAdjustments = false
                        };
                        _weeklyDisplayData.Add(placeholder);
                        Logger.LogDebug("No data for {Date}, created placeholder", date.ToString("yyyy-MM-dd"));
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Failed to load data for {Date}", date.ToString("yyyy-MM-dd"));
                    
                    // Create error placeholder
                    var errorData = new WorkerDisplayData
                    {
                        WorkerId = _selectedWorker.WorkerId,
                        WorkerName = _selectedWorker.WorkerName,
                        AttendanceFileName = fileName,
                        HasError = true,
                        ErrorMessage = "Failed to load data"
                    };
                    _weeklyDisplayData.Add(errorData);
                }
            }

            Logger.LogInformation("Loaded {Count} daily records for week {WeekNumber} using WorkerDataService", 
                _weeklyDisplayData.Count, _currentWeekNumber);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load weekly display data for worker {WorkerId}", _selectedWorkerId);
        }
        finally
        {
            _isLoadingData = false;
        }
    }

    private async Task HandleWeekSelected(int weeksAgo)
    {
        await LoadWeeklyDisplayData(weeksAgo);
    }

    private async Task HandleSettingsSaved()
    {
        // Settings changed - reload current week data
        if (_selectedWorker != null)
        {
            Logger.LogInformation("Settings saved, reloading week data...");
            await LoadWeeklyDisplayData(_selectedWeekOffset);
        }
    }

    // NEW: Handle individual day updates from adjustment system
    private async Task HandleDayUpdated(string attendanceFileName)
    {
        if (_selectedWorker == null) return;

        try
        {
            Logger.LogInformation("Day updated: {FileName}, reloading that day's data", attendanceFileName);
            
            // Find and reload just the updated day
            var settings = await SettingsService.GetSettingsAsync(_selectedWorker.WorkerId, _selectedWorker.WorkerName);
            var updatedData = await DataService.GetCompleteDataAsync(attendanceFileName, settings);
            
            if (updatedData != null)
            {
                // Find the day in our current data and replace it
                var existingIndex = _weeklyDisplayData.FindIndex(d => d.AttendanceFileName == attendanceFileName);
                if (existingIndex >= 0)
                {
                    updatedData.AttendanceFileName = attendanceFileName;
                    _weeklyDisplayData[existingIndex] = updatedData;
                    StateHasChanged(); // Force UI update
                    
                    Logger.LogInformation("Updated day data: {FileName}, HasAdjustments={HasAdjustments}", 
                        attendanceFileName, updatedData.HasAdjustments);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update day data for {FileName}", attendanceFileName);
        }
    }

    private DateTime GetWeekStartDate(int weeksAgo)
    {
        var today = DateTime.Today;
        var daysSinceSunday = (int)today.DayOfWeek;
        var lastSunday = today.AddDays(-daysSinceSunday);
        return lastSunday.AddDays(-7 * weeksAgo);
    }

    private int GetWeekNumber(DateTime date)
    {
        var culture = System.Globalization.CultureInfo.CurrentCulture;
        var calendar = culture.Calendar;
        var calendarWeekRule = culture.DateTimeFormat.CalendarWeekRule;
        var firstDayOfWeek = culture.DateTimeFormat.FirstDayOfWeek;
        return calendar.GetWeekOfYear(date, calendarWeekRule, firstDayOfWeek);
    }
}