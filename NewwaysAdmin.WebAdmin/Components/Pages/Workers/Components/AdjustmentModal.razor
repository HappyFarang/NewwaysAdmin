@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/Components/AdjustmentModal.razor *@
@* Purpose: Modal for making daily work adjustments with quick actions and manual inputs *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Services.Workers
@using NewwaysAdmin.WebAdmin.Services.Auth
@inject AdjustmentService AdjustmentService

<!-- Modal -->
<div class="modal fade @(_isVisible ? "show" : "")"
     style="display: @(_isVisible ? "block" : "none")"
     tabindex="-1"
     aria-hidden="@(!_isVisible)">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-gear me-2"></i>
                    Adjust Work Day - @(_currentDay?.Date.ToString("dddd, MMMM dd, yyyy") ?? "")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>

            <div class="modal-body">
                @if (_currentDay != null && _settings != null)
                {
                    <!-- Current Status Display -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h6 class="mb-0">Current Status</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-6"><strong>Work Hours:</strong></div>
                                        <div class="col-6">@_currentDay.WorkHours.ToString("F1")h</div>

                                        <div class="col-6"><strong>OT Hours:</strong></div>
                                        <div class="col-6">@_currentDay.OTHours.ToString("F1")h</div>

                                        <div class="col-6"><strong>Variance:</strong></div>
                                        <div class="col-6">@_currentDay.VarianceDisplay</div>

                                        <div class="col-6"><strong>On Time:</strong></div>
                                        <div class="col-6">
                                            @if (_currentDay.OnTime)
                                            {
                                                <span class="badge bg-success">Yes</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning text-dark">Late @_currentDay.LateMinutes min</span>
                                            }
                                        </div>

                                        <div class="col-6"><strong>Sign In:</strong></div>
                                        <div class="col-6">@_currentDay.NormalSignInFormatted</div>

                                        <div class="col-6"><strong>Sign Out:</strong></div>
                                        <div class="col-6">@_currentDay.NormalSignOutFormatted</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Previous Adjustment Display -->
                        <div class="col-md-6">
                            @if (_currentDay.HasAdjustments && _currentDay.AppliedAdjustment != null)
                            {
                                <div class="card border-warning">
                                    <div class="card-header bg-warning text-dark">
                                        <h6 class="mb-0">Previous Adjustment</h6>
                                    </div>
                                    <div class="card-body">
                                        <p><strong>Type:</strong> @_currentDay.AppliedAdjustment.Type</p>
                                        <p><strong>Description:</strong> @_currentDay.AppliedAdjustment.Description</p>
                                        <p><strong>Applied:</strong> @_currentDay.AppliedAdjustment.AppliedAt.ToString("yyyy-MM-dd HH:mm")</p>
                                        <p><strong>By:</strong> @_currentDay.AppliedAdjustment.AppliedBy</p>
                                        <small class="text-muted">Changes: @_currentDay.AppliedAdjustment.ChangeSummary</small>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="card border-light">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0">No Previous Adjustments</h6>
                                    </div>
                                    <div class="card-body text-center text-muted">
                                        <i class="bi bi-info-circle me-2"></i>
                                        This day has not been adjusted yet.
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Quick Actions Section -->
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white">
                            <h6 class="mb-0">
                                <i class="bi bi-lightning me-2"></i>Quick Fixes
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <!-- Worker On Time -->
                                <div class="col-md-6">
                                    <div class="d-grid">
                                        <button type="button"
                                                class="btn btn-outline-success"
                                                @onclick="ApplyWorkerOnTime"
                                                disabled="@(_isProcessing || _currentDay.OnTime)">
                                            <i class="bi bi-clock-fill me-2"></i>
                                            Worker On Time
                                        </button>
                                    </div>
                                    <small class="text-muted">Override late status - worker was collecting coffee</small>
                                </div>

                                <!-- Convert Variance to OT -->
                                <div class="col-md-6">
                                    <div class="d-grid">
                                        <button type="button"
                                                class="btn btn-outline-info"
                                                @onclick="ApplyVarianceToOT"
                                                disabled="@(_isProcessing || _currentDay.VarianceMinutes <= 0)">
                                            <i class="bi bi-arrow-right-circle me-2"></i>
                                            Convert Variance to OT
                                        </button>
                                    </div>
                                    <small class="text-muted">
                                        @if (_currentDay.VarianceMinutes > 0)
                                        {
                                            <span>Convert @_currentDay.VarianceMinutes min to overtime</span>
                                        }
                                        else
                                        {
                                            <span>No positive variance to convert</span>
                                        }
                                    </small>
                                </div>

                                <!-- Manual Sign Out -->
                                <div class="col-md-6">
                                    <div class="d-grid">
                                        <button type="button"
                                                class="btn btn-outline-warning"
                                                @onclick="ApplyNormalSignOut"
                                                disabled="@_isProcessing">
                                            <i class="bi bi-box-arrow-right me-2"></i>
                                            Sign Out (Normal Time)
                                        </button>
                                    </div>
                                    <small class="text-muted">Sign out at expected time (@GetExpectedSignOutTime())</small>
                                </div>

                                <!-- Clear Adjustments -->
                                @if (_currentDay.HasAdjustments)
                                {
                                    <div class="col-md-6">
                                        <div class="d-grid">
                                            <button type="button"
                                                    class="btn btn-outline-danger"
                                                    @onclick="ClearAdjustments"
                                                    disabled="@_isProcessing">
                                                <i class="bi bi-arrow-counterclockwise me-2"></i>
                                                Clear Adjustments
                                            </button>
                                        </div>
                                        <small class="text-muted">Reset to original calculated values</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Manual Input Section -->
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">
                                <i class="bi bi-pencil me-2"></i>Manual Adjustments
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <!-- Custom Description -->
                                <div class="col-12">
                                    <label class="form-label">Description</label>
                                    <input type="text"
                                           class="form-control"
                                           @bind="_customDescription"
                                           placeholder="Optional: Reason for adjustment (auto-generated if left empty)"
                                           maxlength="200" />
                                </div>
                                <!-- Manual Sign In Time -->
                                <div class="col-md-6">
                                    <label class="form-label">Custom Sign-In Time</label>
                                    <input type="time"
                                           class="form-control"
                                           value="@_customSignInTime"
                                           @onchange="@((ChangeEventArgs e) => _customSignInTime = e.Value?.ToString() ?? "")"
                                           step="60" />
                                    <small class="text-muted">Leave empty to keep original time</small>
                                </div>
                                <!-- Manual Sign Out Time -->
                                <div class="col-md-6">
                                    <label class="form-label">Custom Sign-Out Time</label>
                                    <input type="time"
                                           class="form-control"
                                           value="@_customSignOutTime"
                                           @onchange="@((ChangeEventArgs e) => _customSignOutTime = e.Value?.ToString() ?? "")"
                                           step="60" />
                                    <small class="text-muted">Leave empty to use normal calculation</small>
                                </div>

                                <!-- Manual OT Hours -->
                                <div class="col-md-6">
                                    <label class="form-label">Manual OT Hours</label>
                                    <input type="number"
                                           class="form-control"
                                           value="@(_customOTHours?.ToString("F1") ?? "")"
                                           @onchange="@((ChangeEventArgs e) => _customOTHours = ParseDecimal(e.Value?.ToString()))"
                                           step="0.5"
                                           min="0"
                                           max="12"
                                           placeholder="@(_currentDay.OTHours.ToString("F1"))" />
                                    <small class="text-muted">Override calculated OT hours</small>
                                </div>

                                <!-- On Time Override -->
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input type="checkbox"
                                               class="form-check-input"
                                               id="onTimeOverride"
                                               @bind="_overrideOnTime" />
                                        <label class="form-check-label" for="onTimeOverride">
                                            Override On-Time Status
                                        </label>
                                    </div>
                                    @if (_overrideOnTime)
                                    {
                                        <select class="form-select mt-2" @bind="_customOnTimeStatus">
                                            <option value="true">On Time</option>
                                            <option value="false">Late</option>
                                        </select>
                                    }
                                </div>

                                <!-- Apply Manual Adjustment -->
                                <div class="col-12">
                                    <div class="d-grid">
                                        <button type="button"
                                                class="btn btn-primary"
                                                @onclick="ApplyManualAdjustment"
                                                disabled="@_isProcessing">
                                            <i class="bi bi-check-lg me-2"></i>
                                            Apply Manual Adjustment
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Error/Success Messages -->
                    @if (!string.IsNullOrEmpty(_message))
                    {
                        <div class="alert @(_isError ? "alert-danger" : "alert-success") mt-3">
                            <i class="bi @(_isError ? "bi-exclamation-triangle" : "bi-check-circle") me-2"></i>
                            @_message
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading day details...</p>
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Backdrop -->
@if (_isVisible)
{
    <div class="modal-backdrop fade show" @onclick="CloseModal"></div>
}

@code {
    [Parameter] public EventCallback<DailyWorkRecord> OnAdjustmentApplied { get; set; }

    private bool _isVisible = false;
    private DailyWorkRecord? _currentDay;
    private WorkerSettings? _settings;
    private bool _isProcessing = false;
    private string _message = "";
    private bool _isError = false;

    // Manual input fields
    private string _customDescription = "";
    private string _customSignInTime = "";
    private string _customSignOutTime = "";
    private decimal? _customOTHours;
    private bool _overrideOnTime = false;
    private string _customOnTimeStatus = "true";

    public async Task ShowAsync(DailyWorkRecord day, WorkerSettings settings)
    {
        _currentDay = day;
        _settings = settings;
        _isVisible = true;
        _message = "";
        _isError = false;

        // Reset manual input fields
        ResetManualInputs();

        // If day has previous adjustments, populate fields
        if (day.HasAdjustments && day.AppliedAdjustment != null)
        {
            _customDescription = day.AppliedAdjustment.Description;
            if (day.AppliedAdjustment.AdjustedSignOut.HasValue)
            {
                _customSignOutTime = day.AppliedAdjustment.AdjustedSignOut.Value.ToString("HH:mm");
            }
        }

        StateHasChanged();
        await Task.CompletedTask;
    }

    public void CloseModal()
    {
        _isVisible = false;
        _currentDay = null;
        _settings = null;
        ResetManualInputs();
        StateHasChanged();
    }

    private void ResetManualInputs()
    {
        _customDescription = "";
        _customSignOutTime = "";
        _customOTHours = null;
        _overrideOnTime = false;
        _customOnTimeStatus = "true";
    }

    // === QUICK ACTION METHODS ===
    private async Task ApplyWorkerOnTime()
    {
        if (_currentDay == null || _settings == null) return;

        await ProcessAdjustment(async () =>
        {
            var description = string.IsNullOrWhiteSpace(_customDescription)
                ? "Worker on time - collecting coffee"
                : _customDescription;

            return await AdjustmentService.ApplyWorkerOnTimeAdjustmentAsync(_currentDay, _settings, description);
        });
    }

    private async Task ApplyVarianceToOT()
    {
        if (_currentDay == null || _settings == null) return;

        await ProcessAdjustment(async () =>
        {
            return await AdjustmentService.ApplyVarianceToOTAdjustmentAsync(_currentDay, _settings);
        });
    }

    private async Task ApplyNormalSignOut()
    {
        if (_currentDay == null || _settings == null) return;

        await ProcessAdjustment(async () =>
        {
            return await AdjustmentService.ApplyManualSignOutAdjustmentAsync(_currentDay, _settings);
        });
    }

    private async Task ApplyManualAdjustment()
    {
        if (_currentDay == null || _settings == null) return; // REMOVED: || string.IsNullOrWhiteSpace(_customDescription)

        await ProcessAdjustment(async () =>
        {
            // Parse custom sign-in time if provided
            DateTime? customSignIn = null;
            if (!string.IsNullOrWhiteSpace(_customSignInTime) && TimeSpan.TryParse(_customSignInTime, out var signInTimeSpan))
            {
                customSignIn = _currentDay.Date.Add(signInTimeSpan);
            }

            // Parse custom sign-out time if provided
            DateTime? customSignOut = null;
            if (!string.IsNullOrWhiteSpace(_customSignOutTime) && TimeSpan.TryParse(_customSignOutTime, out var timeSpan))
            {
                customSignOut = _currentDay.Date.Add(timeSpan);
            }

            // Determine on-time override
            bool? onTimeOverride = null;
            if (_overrideOnTime)
            {
                onTimeOverride = bool.Parse(_customOnTimeStatus);
            }

            // Use description if provided, otherwise generate a smart default
            var description = string.IsNullOrWhiteSpace(_customDescription)
                ? GenerateDefaultDescription(customSignIn, customSignOut, _customOTHours, onTimeOverride)
                : _customDescription;

            // Use the enhanced custom adjustment method with full timing preservation
            return await AdjustmentService.ApplyCustomAdjustmentAsync(
                _currentDay,
                _settings,
                description,
                customSignIn,
                customSignOut,
                _customOTHours,
                onTimeOverride);
        });
    }

    private string GenerateDefaultDescription(DateTime? customSignIn, DateTime? customSignOut, decimal? customOTHours, bool? onTimeOverride)
    {
        var changes = new List<string>();

        if (customSignIn.HasValue)
            changes.Add($"sign-in to {customSignIn.Value:HH:mm}");

        if (customSignOut.HasValue)
            changes.Add($"sign-out to {customSignOut.Value:HH:mm}");

        if (customOTHours.HasValue)
            changes.Add($"OT hours to {customOTHours.Value:F1}h");

        if (onTimeOverride.HasValue)
            changes.Add($"on-time status to {(onTimeOverride.Value ? "Yes" : "No")}");

        if (changes.Any())
            return $"Manual adjustment: {string.Join(", ", changes)}";

        return "Manual timing adjustment";
    }

    private async Task ClearAdjustments()
    {
        if (_currentDay == null || !_currentDay.HasAdjustments) return;

        _isProcessing = true;
        _message = "";

        try
        {
            // Use the proper reversal method from AdjustmentService
            var restoredDay = await AdjustmentService.ReverseAdjustmentAsync(_currentDay);

            // The service already restored all original values
            await OnAdjustmentApplied.InvokeAsync(restoredDay);
            _message = "Adjustments cleared successfully! Original timing delta restored.";
            _isError = false;
        }
        catch (Exception ex)
        {
            _message = $"Error clearing adjustments: {ex.Message}";
            _isError = true;
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    // === HELPER METHODS ===
    private async Task ProcessAdjustment(Func<Task<DailyWorkRecord>> adjustmentAction)
    {
        _isProcessing = true;
        _message = "";

        try
        {
            Console.WriteLine($"[AdjustmentModal] Processing adjustment for {_currentDay?.Date:yyyy-MM-dd}");
            var adjustedDay = await adjustmentAction();
            Console.WriteLine($"[AdjustmentModal] Adjustment completed. HasAdjustments: {adjustedDay.HasAdjustments}");

            await OnAdjustmentApplied.InvokeAsync(adjustedDay);
            _message = "Adjustment applied successfully!";
            _isError = false;

            Console.WriteLine($"[AdjustmentModal] OnAdjustmentApplied invoked");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AdjustmentModal] Error applying adjustment: {ex.Message}");
            _message = $"Error applying adjustment: {ex.Message}";
            _isError = true;
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private string GetExpectedSignOutTime()
    {
        if (_currentDay?.NormalSignIn == null || _settings == null) return "--:--";

        var expectedEnd = _currentDay.NormalSignIn.Value.AddHours((double)_settings.ExpectedHoursPerDay);
        return expectedEnd.ToString("HH:mm");
    }

    private decimal? ParseDecimal(string? value)
    {
        if (string.IsNullOrWhiteSpace(value)) return null;
        return decimal.TryParse(value, out var result) ? result : null;
    }
}

<style>
    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .card-header h6 {
        margin: 0;
        font-weight: 600;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .text-muted {
        font-size: 0.875rem;
    }

    .alert {
        margin-bottom: 0;
    }
</style>