@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/Components/WorkerCleanWeeklyTable.razor *@
@* Purpose: NEW - Clean weekly table using only WorkerDisplayData from WorkerDataService *@
@* CLEAN: No complex weekly logic, just displays pre-processed daily data with adjustment support *@

@using NewwaysAdmin.WebAdmin.Models.Workers

<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <span class="bi bi-calendar-week me-2"></span>
                Week Details
                @if (WeekStartDate != default)
                {
                    <span class="text-muted small ms-2">
                        (@WeekStartDate.ToString("MMM dd") - @WeekStartDate.AddDays(6).ToString("MMM dd"))
                    </span>
                }
            </h5>
            
            <!-- Week Navigation -->
            <div class="btn-group" role="group">
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => OnWeekSelected.InvokeAsync(SelectedWeekOffset + 1)">
                    <span class="bi bi-chevron-left"></span> Previous Week
                </button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => OnWeekSelected.InvokeAsync(0)" disabled="@(SelectedWeekOffset == 0)">
                    Current Week
                </button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="() => OnWeekSelected.InvokeAsync(SelectedWeekOffset - 1)" disabled="@(SelectedWeekOffset <= 0)">
                    Next Week <span class="bi bi-chevron-right"></span>
                </button>
            </div>
        </div>
    </div>

    @if (WeeklyDisplayData.Any())
    {
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-sm align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 12%;">Date</th>
                            <th style="width: 8%;">Day</th>
                            <th colspan="3" class="text-center bg-primary bg-opacity-10" style="width: 35%;">
                                <i class="bi bi-clock-history me-1"></i>Normal Shift
                            </th>
                            <th style="width: 3%;"></th>
                            <th colspan="3" class="text-center bg-warning bg-opacity-25" style="width: 35%;">
                                <i class="bi bi-clock-fill me-1"></i>Overtime
                            </th>
                            <th style="width: 7%;">Actions</th>
                        </tr>
                        <tr>
                            <th></th>
                            <th></th>
                            <th class="text-center bg-primary bg-opacity-10 small">Sign In</th>
                            <th class="text-center bg-primary bg-opacity-10 small">Sign Out</th>
                            <th class="text-center bg-primary bg-opacity-10 small">Hours</th>
                            <th class="border-start border-end border-3 border-secondary"></th>
                            <th class="text-center bg-warning bg-opacity-25 small">Sign In</th>
                            <th class="text-center bg-warning bg-opacity-25 small">Sign Out</th>
                            <th class="text-center bg-warning bg-opacity-25 small">Hours</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dailyData in WeeklyDisplayData.OrderBy(d => ExtractDateFromFileName(d.AttendanceFileName)))
                        {
                            var date = ExtractDateFromFileName(dailyData.AttendanceFileName);
                            var dayName = date.ToString("ddd");
                            var isToday = date.Date == DateTime.Today;
                            var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                            
                            <tr class="@GetRowClass(dailyData, isToday, isWeekend)">
                                <!-- Date Column -->
                                <td class="fw-bold">
                                    @date.ToString("MMM dd")
                                    @if (isToday)
                                    {
                                        <span class="badge bg-info text-dark ms-1 small">Today</span>
                                    }
                                    @if (dailyData.HasAdjustments)
                                    {
                                        <span class="badge bg-warning text-dark ms-1 small" title="Has manual adjustments">
                                            <i class="bi bi-pencil-square"></i>
                                        </span>
                                    }
                                </td>
                                
                                <!-- Day Column -->
                                <td class="@(isWeekend ? "text-muted" : "")">
                                    @dayName
                                </td>

                                <!-- Normal Shift Columns -->
                                <td class="text-center bg-primary bg-opacity-10">
                                    @if (dailyData.HasWorkActivity)
                                    {
                                        @dailyData.SignInFormatted
                                    }
                                    else
                                    {
                                        <span class="text-muted">--:--</span>
                                    }
                                </td>
                                <td class="text-center bg-primary bg-opacity-10">
                                    @if (dailyData.HasWorkActivity && dailyData.SignOut.HasValue)
                                    {
                                        @dailyData.SignOutFormatted
                                    }
                                    else if (isToday && dailyData.IsCurrentlyWorking)
                                    {
                                        <span class="text-warning small">Working...</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">--:--</span>
                                    }
                                </td>
                                <td class="text-center bg-primary bg-opacity-10">
                                    @if (dailyData.HasWorkActivity && dailyData.NormalWorkHours > 0)
                                    {
                                        <span class="fw-bold">@FormatHours(dailyData.NormalWorkHours)</span>
                                    }
                                    else if (isToday && dailyData.IsCurrentlyWorking && !dailyData.HasOTActivity)
                                    {
                                        <span class="text-warning small">@FormatDuration(dailyData.CurrentDuration)</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">--:--</span>
                                    }
                                </td>

                                <!-- Separator Column -->
                                <td class="border-start border-end border-3 border-secondary"></td>

                                <!-- OT Shift Columns -->
                                <td class="text-center bg-warning bg-opacity-25">
                                    @if (dailyData.HasOTActivity)
                                    {
                                        @dailyData.OTSignInFormatted
                                    }
                                    else
                                    {
                                        <span class="text-muted">--:--</span>
                                    }
                                </td>
                                <td class="text-center bg-warning bg-opacity-25">
                                    @if (dailyData.HasOTActivity && dailyData.OTSignOut.HasValue)
                                    {
                                        @dailyData.OTSignOutFormatted
                                    }
                                    else if (isToday && dailyData.IsCurrentlyWorking && dailyData.HasOTActivity)
                                    {
                                        <span class="text-warning small">Working...</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">--:--</span>
                                    }
                                </td>
                                <td class="text-center bg-warning bg-opacity-25">
                                    @if (dailyData.HasOTActivity && dailyData.OTWorkHours > 0)
                                    {
                                        <span class="fw-bold">@FormatHours(dailyData.OTWorkHours)</span>
                                    }
                                    else if (isToday && dailyData.IsCurrentlyWorking && dailyData.HasOTActivity)
                                    {
                                        <span class="text-warning small">@FormatDuration(dailyData.CurrentDuration)</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">--:--</span>
                                    }
                                </td>

                                <!-- Actions Column -->
                                <td class="text-center">
                                    @if (dailyData.HasWorkActivity || dailyData.HasError)
                                    {
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => HandleAdjustmentClick(dailyData)"
                                                title="Adjust this day's data">
                                            <span class="bi bi-gear"></span>
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted small">No data</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="card-body text-center py-5">
            <div class="text-muted">
                <i class="bi bi-calendar-x fs-1"></i>
                <p class="mt-3">No data available for this week</p>
            </div>
        </div>
    }
</div>

<!-- NEW: Adjustment Modal for daily adjustments -->
<DailyAdjustmentModal @ref="_adjustmentModal"
                      OnAdjustmentApplied="@HandleAdjustmentApplied" />

@code {
    [Parameter]
    public List<WorkerDisplayData> WeeklyDisplayData { get; set; } = new();
    
    [Parameter]
    public int SelectedWeekOffset { get; set; }
    
    [Parameter]
    public DateTime WeekStartDate { get; set; }
    
    [Parameter]
    public EventCallback<int> OnWeekSelected { get; set; }
    
    [Parameter]
    public EventCallback<string> OnDayUpdated { get; set; }

    // Reference to the new daily adjustment modal
    private DailyAdjustmentModal? _adjustmentModal;

    private async Task HandleAdjustmentClick(WorkerDisplayData dailyData)
    {
        if (_adjustmentModal != null)
        {
            await _adjustmentModal.ShowAsync(dailyData);
        }
    }

    private async Task HandleAdjustmentApplied(string attendanceFileName)
    {
        // Notify parent that this day was updated
        await OnDayUpdated.InvokeAsync(attendanceFileName);
    }

    private DateTime ExtractDateFromFileName(string fileName)
    {
        try
        {
            var datePart = fileName.Split('_')[0];
            return DateTime.ParseExact(datePart, "yyyy-MM-dd", null);
        }
        catch
        {
            return DateTime.Today;
        }
    }

    private string GetRowClass(WorkerDisplayData dailyData, bool isToday, bool isWeekend)
    {
        var classes = new List<string>();
        
        if (dailyData.HasError) classes.Add("table-danger");
        else if (dailyData.HasAdjustments) classes.Add("table-warning");
        
        if (isToday) classes.Add("border-start border-info border-3");
        if (isWeekend) classes.Add("bg-light");
        
        return string.Join(" ", classes);
    }

    private string FormatHours(decimal hours)
    {
        if (hours == 0) return "0:00";
        var timeSpan = TimeSpan.FromHours((double)hours);
        return $"{(int)timeSpan.TotalHours}:{timeSpan.Minutes:D2}";
    }

    private string FormatDuration(TimeSpan duration)
    {
        return $"{(int)duration.TotalHours}:{duration.Minutes:D2}";
    }
}