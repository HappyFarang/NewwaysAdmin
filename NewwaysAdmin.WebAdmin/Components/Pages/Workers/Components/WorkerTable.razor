@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/Components/WorkerTable.razor *@
@* Purpose: Table-based worker display showing normal and OT hours in compact format *@
@* UPDATED: Fixed navigation route to /worker-details/{workerId} *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WorkerAttendance.Models
@inject NavigationManager Navigation

<div class="table-responsive">
    <table class="table table-hover table-sm table-striped align-middle">
        <thead class="@HeaderClass">
            <tr>
                <th style="width: 15%;">Worker Name</th>
                <th colspan="3" class="text-center bg-primary bg-opacity-10" style="width: 40%;">
                    <i class="bi bi-clock-history me-2"></i>Normal Shift
                </th>
                <th style="width: 5%;"></th>
                <th colspan="3" class="text-center bg-warning bg-opacity-25" style="width: 40%;">
                    <i class="bi bi-clock-fill me-2"></i>Overtime
                </th>
            </tr>
            <tr>
                <th></th>
                <th class="text-center bg-primary bg-opacity-10">Sign In</th>
                <th class="text-center bg-primary bg-opacity-10">Sign Out</th>
                <th class="text-center bg-primary bg-opacity-10">Total Hrs</th>
                <th class="border-start border-end border-3 border-secondary"></th>
                <th class="text-center bg-warning bg-opacity-25">Sign In</th>
                <th class="text-center bg-warning bg-opacity-25">Sign Out</th>
                <th class="text-center bg-warning bg-opacity-25">Total Hrs</th>
            </tr>
        </thead>
        <tbody>
            @if (Workers.Any())
            {
                @foreach (var worker in Workers)
                {
                    <tr class="@GetRowClass(worker)" style="cursor: pointer;" @onclick="() => NavigateToWorkerDetail(worker.WorkerId)">
                        <td>
                            <strong>@worker.WorkerName</strong>
                        </td>

                        <!-- Normal Shift Columns -->
                        <td class="text-center bg-primary bg-opacity-10">
                            @if (worker.HasCompletedNormalShift || (IsActive && worker.CurrentCycle == WorkCycle.Normal))
                            {
                                @worker.NormalSignInFormatted
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-primary bg-opacity-10">
                            @if (worker.HasCompletedNormalShift)
                            {
                                @worker.NormalSignOutFormatted
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-primary bg-opacity-10">
                            @if (worker.HasCompletedNormalShift)
                            {
                                <strong>@worker.NormalHoursFormatted</strong>
                            }
                            else if (IsActive && worker.CurrentCycle == WorkCycle.Normal)
                            {
                                <span class="fw-bold">@worker.DurationFormatted</span>
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>

                        <!-- Separator Column -->
                        <td class="border-start border-end border-3 border-secondary"></td>

                        <!-- OT Shift Columns -->
                        <td class="text-center bg-warning bg-opacity-25">
                            @if (worker.HasCompletedOTShift || (IsActive && worker.CurrentCycle == WorkCycle.OT))
                            {
                                @worker.OTSignInFormatted
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-warning bg-opacity-25">
                            @if (worker.HasCompletedOTShift)
                            {
                                @worker.OTSignOutFormatted
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-warning bg-opacity-25">
                            @if (worker.HasCompletedOTShift)
                            {
                                <strong>@worker.OTHoursFormatted</strong>
                            }
                            else if (IsActive && worker.CurrentCycle == WorkCycle.OT)
                            {
                                <span class="fw-bold">@worker.DurationFormatted</span>
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center text-muted py-4">
                        <i class="bi bi-info-circle me-2"></i>
                        @EmptyMessage
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .table th {
        font-weight: 600;
        font-size: 0.85rem;
    }

    .table td {
        vertical-align: middle;
        padding: 0.75rem 0.5rem;
    }

    .worker-row-active {
        border-left: 3px solid #28a745;
    }

    .worker-row-inactive {
        opacity: 0.85;
    }
</style>

@code {
    [Parameter]
    public List<WorkerStatus> Workers { get; set; } = new();

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public string HeaderClass { get; set; } = "table-light";

    [Parameter]
    public string EmptyMessage { get; set; } = "No workers found.";

    private void NavigateToWorkerDetail(int workerId)
    {
        // UPDATED: Changed from /worker-activity/{workerId} to /worker-details/{workerId}
        Navigation.NavigateTo($"/worker-details/{workerId}");
    }

    private string GetRowClass(WorkerStatus worker)
    {
        return IsActive ? "worker-row-active" : "worker-row-inactive";
    }
}