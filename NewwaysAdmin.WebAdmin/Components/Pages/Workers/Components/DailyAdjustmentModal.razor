@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/Components/DailyAdjustmentModal.razor *@
@* Purpose: NEW - Modal for adjusting daily attendance using the new daily adjustment system *@
@* CLEAN: Works directly with WorkerDisplayData and creates/updates daily adjustment files *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Services.Workers
@using NewwaysAdmin.WebAdmin.Infrastructure.Storage
@using NewwaysAdmin.Shared.IO
@inject WorkerDataService DataService
@inject WorkerSettingsService SettingsService
@inject IServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime
@inject ILogger<DailyAdjustmentModal> Logger

<!-- Modal -->
<div class="modal fade" id="dailyAdjustmentModal" tabindex="-1" aria-labelledby="dailyAdjustmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dailyAdjustmentModalLabel">
                    <span class="bi bi-gear me-2"></span>
                    Adjust Day Data
                    @if (_currentData != null)
                    {
                        <span class="text-muted">- @ExtractDateFromFileName(_currentData.AttendanceFileName).ToString("MMM dd, yyyy")</span>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            @if (_currentData != null)
            {
                <div class="modal-body">
                    <!-- Current Data Display -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6>Current Data</h6>
                            <div class="card bg-light">
                                <div class="card-body small">
                                    <div class="row">
                                        <div class="col-6">
                                            <strong>Normal Shift:</strong><br>
                                            In: @_currentData.SignInFormatted<br>
                                            Out: @_currentData.SignOutFormatted<br>
                                            Hours: @FormatHours(_currentData.NormalWorkHours)
                                        </div>
                                        <div class="col-6">
                                            <strong>Overtime:</strong><br>
                                            In: @_currentData.OTSignInFormatted<br>
                                            Out: @_currentData.OTSignOutFormatted<br>
                                            Hours: @FormatHours(_currentData.OTWorkHours)
                                        </div>
                                    </div>
                                    @if (_currentData.HasAdjustments)
                                    {
                                        <div class="mt-2 text-warning">
                                            <small><i class="bi bi-exclamation-triangle"></i> This day already has adjustments</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Adjustment Options</h6>
                            <div class="form-group mb-3">
                                <label class="form-label">Adjustment Type</label>
                                <select class="form-select" @bind="_adjustmentType">
                                    <option value="TimeChange">Change Sign-in/Sign-out Times</option>
                                    <option value="ManualHours">Set Manual Hours</option>
                                    <option value="OnTimeOverride">Override On-time Status</option>
                                    <option value="RemoveAdjustment">Remove All Adjustments</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Adjustment Forms (conditional based on type) -->
                    @if (_adjustmentType == "TimeChange")
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Normal Shift Times</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <label class="form-label">Sign In</label>
                                        <input type="time" class="form-control" @bind="_newSignInTime" />
                                    </div>
                                    <div class="col-6">
                                        <label class="form-label">Sign Out</label>
                                        <input type="time" class="form-control" @bind="_newSignOutTime" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6>Overtime Times</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <label class="form-label">OT Sign In</label>
                                        <input type="time" class="form-control" @bind="_newOTSignInTime" />
                                    </div>
                                    <div class="col-6">
                                        <label class="form-label">OT Sign Out</label>
                                        <input type="time" class="form-control" @bind="_newOTSignOutTime" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (_adjustmentType == "ManualHours")
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">Normal Hours</label>
                                <input type="number" step="0.25" min="0" max="24" class="form-control" @bind="_manualNormalHours" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Overtime Hours</label>
                                <input type="number" step="0.25" min="0" max="24" class="form-control" @bind="_manualOTHours" />
                            </div>
                        </div>
                    }
                    else if (_adjustmentType == "OnTimeOverride")
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="_overrideOnTime" id="onTimeCheck">
                            <label class="form-check-label" for="onTimeCheck">
                                Mark as On Time (regardless of actual sign-in time)
                            </label>
                        </div>
                    }
                    else if (_adjustmentType == "RemoveAdjustment")
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            This will remove all adjustments and restore original attendance data.
                        </div>
                    }

                    <!-- Reason/Description -->
                    <div class="mt-4">
                        <label class="form-label">Reason for Adjustment</label>
                        <textarea class="form-control" rows="2" @bind="_adjustmentReason"
                                  placeholder="Brief description of why this adjustment is needed..."></textarea>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ApplyAdjustment" disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Apply Adjustment
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<string> OnAdjustmentApplied { get; set; }

    private WorkerDisplayData? _currentData;
    private string _adjustmentType = "TimeChange";
    private bool _isSaving = false;

    // Time adjustment fields
    private string _newSignInTime = "";
    private string _newSignOutTime = "";
    private string _newOTSignInTime = "";
    private string _newOTSignOutTime = "";

    // Manual hours fields
    private decimal _manualNormalHours = 0;
    private decimal _manualOTHours = 0;

    // Override fields
    private bool _overrideOnTime = false;

    // General fields
    private string _adjustmentReason = "";

    public async Task ShowAsync(WorkerDisplayData dailyData)
    {
        _currentData = dailyData;
        ResetForm();

        // Populate current values
        PopulateCurrentValues();

        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('dailyAdjustmentModal')).show()");
    }

    private void ResetForm()
    {
        _adjustmentType = "TimeChange";
        _newSignInTime = "";
        _newSignOutTime = "";
        _newOTSignInTime = "";
        _newOTSignOutTime = "";
        _manualNormalHours = 0;
        _manualOTHours = 0;
        _overrideOnTime = false;
        _adjustmentReason = "";
        _isSaving = false;
    }

    private void PopulateCurrentValues()
    {
        if (_currentData == null) return;

        // Populate time fields with current values
        _newSignInTime = _currentData.SignIn?.ToString("HH:mm") ?? "";
        _newSignOutTime = _currentData.SignOut?.ToString("HH:mm") ?? "";
        _newOTSignInTime = _currentData.OTSignIn?.ToString("HH:mm") ?? "";
        _newOTSignOutTime = _currentData.OTSignOut?.ToString("HH:mm") ?? "";

        // Populate manual hours with current values
        _manualNormalHours = _currentData.NormalWorkHours;
        _manualOTHours = _currentData.OTWorkHours;

        _overrideOnTime = _currentData.IsOnTime;
    }

    private async Task ApplyAdjustment()
    {
        if (_currentData == null) return;

        try
        {
            _isSaving = true;

            Logger.LogInformation("Applying {AdjustmentType} adjustment to {FileName}", _adjustmentType, _currentData.AttendanceFileName);

            // Load the current adjustment file or create a new one
            var adjustmentFileName = $"adjustment_{_currentData.AttendanceFileName.Replace(".json", "")}";
            var adjustmentStorage = await GetAdjustmentStorageAsync();

            DailyWorkRecord adjustmentRecord;

            try
            {
                // Try to load existing adjustment
                adjustmentRecord = await adjustmentStorage.LoadAsync(adjustmentFileName);
            }
            catch
            {
                // Create new adjustment record with current data as baseline
                adjustmentRecord = new DailyWorkRecord
                    {
                        Date = ExtractDateFromFileName(_currentData.AttendanceFileName),
                        HasData = _currentData.HasWorkActivity,
                        WorkHours = _currentData.NormalWorkHours,
                        OTHours = _currentData.OTWorkHours,
                        OnTime = _currentData.IsOnTime,
                        LateMinutes = _currentData.LateMinutes,
                        VarianceMinutes = _currentData.VarianceMinutes,
                        NormalSignIn = _currentData.SignIn,
                        NormalSignOut = _currentData.SignOut,
                        OTSignIn = _currentData.OTSignIn,
                        OTSignOut = _currentData.OTSignOut,
                        HasAdjustments = false
                    };
            }

            // Apply the adjustment based on type
            switch (_adjustmentType)
            {
                case "TimeChange":
                    await ApplyTimeChangeAdjustment(adjustmentRecord);
                    break;
                case "ManualHours":
                    await ApplyManualHoursAdjustment(adjustmentRecord);
                    break;
                case "OnTimeOverride":
                    await ApplyOnTimeOverrideAdjustment(adjustmentRecord);
                    break;
                case "RemoveAdjustment":
                    await RemoveAdjustments(adjustmentRecord);
                    break;
            }

            // Save the adjustment record
            await adjustmentStorage.SaveAsync(adjustmentFileName, adjustmentRecord);

            Logger.LogInformation("Successfully saved adjustment to {AdjustmentFileName}", adjustmentFileName);

            // Close modal
            await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('dailyAdjustmentModal')).hide()");

            // Notify parent that adjustment was applied
            await OnAdjustmentApplied.InvokeAsync(_currentData.AttendanceFileName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to apply adjustment to {FileName}", _currentData?.AttendanceFileName);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task ApplyTimeChangeAdjustment(DailyWorkRecord record)
    {
        var date = record.Date.Date;

        // Parse new times
        DateTime? newSignIn = null, newSignOut = null, newOTSignIn = null, newOTSignOut = null;

        if (!string.IsNullOrEmpty(_newSignInTime) && TimeSpan.TryParse(_newSignInTime, out var signInTime))
            newSignIn = date.Add(signInTime);

        if (!string.IsNullOrEmpty(_newSignOutTime) && TimeSpan.TryParse(_newSignOutTime, out var signOutTime))
            newSignOut = date.Add(signOutTime);

        if (!string.IsNullOrEmpty(_newOTSignInTime) && TimeSpan.TryParse(_newOTSignInTime, out var otSignInTime))
            newOTSignIn = date.Add(otSignInTime);

        if (!string.IsNullOrEmpty(_newOTSignOutTime) && TimeSpan.TryParse(_newOTSignOutTime, out var otSignOutTime))
            newOTSignOut = date.Add(otSignOutTime);

        // Create adjustment
        var adjustment = new DailyAdjustment
            {
                Type = AdjustmentType.ManualTimeEntry,
                Description = _adjustmentReason.Trim(),
                AppliedAt = DateTime.Now,
                AppliedBy = "Admin", // TODO: Get actual user

                // Store original values
                OriginalWorkHours = record.WorkHours,
                OriginalOTHours = record.OTHours,
                OriginalOnTime = record.OnTime,
                OriginalLateMinutes = record.LateMinutes,
                OriginalVarianceMinutes = record.VarianceMinutes,
                OriginalSignIn = record.NormalSignIn,
                OriginalSignOut = record.NormalSignOut,

                // Set adjusted values
                AdjustedSignIn = newSignIn,
                AdjustedSignOut = newSignOut,
                AdjustedOTSignIn = newOTSignIn,
                AdjustedOTSignOut = newOTSignOut
            };

        // Calculate new hours based on adjusted times
        if (newSignIn.HasValue && newSignOut.HasValue)
        {
            adjustment.AdjustedWorkHours = (decimal)(newSignOut.Value - newSignIn.Value).TotalHours;
        }
        else
        {
            adjustment.AdjustedWorkHours = record.WorkHours;
        }

        if (newOTSignIn.HasValue && newOTSignOut.HasValue)
        {
            adjustment.AdjustedOTHours = (decimal)(newOTSignOut.Value - newOTSignIn.Value).TotalHours;
        }
        else
        {
            adjustment.AdjustedOTHours = record.OTHours;
        }

        // TODO: Calculate adjusted on-time status and variance based on settings

        // Apply adjustment
        record.HasAdjustments = true;
        record.AppliedAdjustment = adjustment;

        Logger.LogInformation("Applied time change adjustment: {Description}", adjustment.Description);
    }

    private async Task ApplyManualHoursAdjustment(DailyWorkRecord record)
    {
        var adjustment = new DailyAdjustment
            {
                Type = AdjustmentType.ManualTimeEntry,
                Description = $"Manual hours entry: {_manualNormalHours:F2}h normal, {_manualOTHours:F2}h OT. {_adjustmentReason.Trim()}",
                AppliedAt = DateTime.Now,
                AppliedBy = "Admin", // TODO: Get actual user

                // Store original values
                OriginalWorkHours = record.WorkHours,
                OriginalOTHours = record.OTHours,
                OriginalOnTime = record.OnTime,

                // Set adjusted values
                AdjustedWorkHours = _manualNormalHours,
                AdjustedOTHours = _manualOTHours
            };

        // Apply adjustment
        record.HasAdjustments = true;
        record.AppliedAdjustment = adjustment;

        Logger.LogInformation("Applied manual hours adjustment: {NormalHours}h normal, {OTHours}h OT",
            _manualNormalHours, _manualOTHours);
    }

    private async Task ApplyOnTimeOverrideAdjustment(DailyWorkRecord record)
    {
        var adjustment = new DailyAdjustment
            {
                Type = AdjustmentType.OnTimeOverride,
                Description = $"On-time override: {(_overrideOnTime ? "Marked as on-time" : "Marked as late")}. {_adjustmentReason.Trim()}",
                AppliedAt = DateTime.Now,
                AppliedBy = "Admin", // TODO: Get actual user

                // Store original values
                OriginalOnTime = record.OnTime,
                OriginalLateMinutes = record.LateMinutes,

                // Set adjusted values
                AdjustedOnTime = _overrideOnTime,
                AdjustedLateMinutes = _overrideOnTime ? 0 : record.LateMinutes
            };

        // Apply adjustment
        record.HasAdjustments = true;
        record.AppliedAdjustment = adjustment;

        Logger.LogInformation("Applied on-time override: {OnTime}", _overrideOnTime);
    }

    private async Task RemoveAdjustments(DailyWorkRecord record)
    {
        // Simply clear the adjustments
        record.HasAdjustments = false;
        record.AppliedAdjustment = null;

        Logger.LogInformation("Removed all adjustments from {Date}", record.Date.ToString("yyyy-MM-dd"));
    }

    // Helper to get adjustment storage
    private async Task<IDataStorage<DailyWorkRecord>> GetAdjustmentStorageAsync()
    {
        // This will need to be injected or accessed via the DataService
        // For now, we'll create it the same way WorkerDataService does
        var storageManager = ServiceProvider.GetRequiredService<StorageManager>();
        return storageManager.GetStorageSync<DailyWorkRecord>("WorkerWeeklyData");
    }

    private DateTime ExtractDateFromFileName(string fileName)
    {
        try
        {
            var datePart = fileName.Split('_')[0];
            return DateTime.ParseExact(datePart, "yyyy-MM-dd", null);
        }
        catch
        {
            return DateTime.Today;
        }
    }

    private string FormatHours(decimal hours)
    {
        if (hours == 0) return "0:00";
        var timeSpan = TimeSpan.FromHours((double)hours);
        return $"{(int)timeSpan.TotalHours}:{timeSpan.Minutes:D2}";
    }
}