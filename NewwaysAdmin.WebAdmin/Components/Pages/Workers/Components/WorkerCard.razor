@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/Components/WorkerCard.razor *@
@* Purpose: Reusable worker card component with admin sign-out capability *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WorkerAttendance.Models
@inject NavigationManager Navigation

<div class="card @BorderClass h-100 worker-card">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-start">
            <h6 class="card-title mb-0" style="cursor: pointer;" @onclick="NavigateToWorkerDetail">
                @Worker.WorkerName
            </h6>
            
            @if (IsActive && ShowAdminControls)
            {
                <button class="btn btn-sm btn-outline-danger" 
                        @onclick="ShowSignOutConfirmation"
                        @onclick:stopPropagation="true"
                        title="Force sign-out">
                    <span class="bi bi-box-arrow-right"></span>
                </button>
            }
        </div>

        @if (IsActive)
        {
            <!-- ACTIVE WORKER DISPLAY -->
            <div class="small mt-2" style="cursor: pointer;" @onclick="NavigateToWorkerDetail">
                <div class="mb-2">
                    <span class="badge @CycleBadgeClass">@Worker.CycleDisplay</span>
                </div>
                <div class="text-muted mb-1">
                    <span class="bi bi-clock me-1"></span>
                    Signed in: @Worker.LastActivityFormatted
                </div>
                <div class="text-muted">
                    <span class="bi bi-hourglass-split me-1"></span>
                    Duration: @Worker.DurationFormatted
                </div>
            </div>
        }
        else
        {
            <!-- INACTIVE WORKER DISPLAY -->
            <div class="small mt-2" style="cursor: pointer;" @onclick="NavigateToWorkerDetail">
                <!-- Normal Shift -->
                @if (Worker.NormalSignIn != null)
                {
                    <div class="mb-2">
                        <strong>Normal Shift</strong>
                        @if (Worker.HasOT)
                        {
                            <span class="badge bg-secondary ms-1">Completed</span>
                        }
                    </div>
                    <div class="text-muted mb-1">
                        <span class="bi bi-box-arrow-in-right me-1"></span>
                        In: @Worker.NormalSignInFormatted
                    </div>
                    <div class="text-muted mb-1">
                        <span class="bi bi-box-arrow-left me-1"></span>
                        Out: @Worker.NormalSignOutFormatted
                    </div>
                    <div class="text-muted mb-2">
                        <span class="bi bi-clock-history me-1"></span>
                        Hours: @Worker.NormalHoursFormatted
                    </div>
                }

                <!-- OT Shift -->
                @if (Worker.HasOT)
                {
                    <div class="mb-2">
                        <strong>Overtime</strong>
                        <span class="badge bg-warning text-dark ms-1">OT</span>
                    </div>
                    <div class="text-muted mb-1">
                        <span class="bi bi-box-arrow-in-right me-1"></span>
                        In: @Worker.OTSignInFormatted
                    </div>
                    <div class="text-muted mb-1">
                        <span class="bi bi-box-arrow-left me-1"></span>
                        Out: @Worker.OTSignOutFormatted
                    </div>
                    <div class="text-muted">
                        <span class="bi bi-clock-history me-1"></span>
                        Hours: @Worker.OTHoursFormatted
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .worker-card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .worker-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
</style>

@code {
    [Parameter]
    public WorkerStatus Worker { get; set; } = null!;

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public bool ShowAdminControls { get; set; } = true;

    [Parameter]
    public EventCallback<int> OnSignOutRequested { get; set; }

    private string BorderClass => IsActive ? "border-success" : "border-secondary";

    private string CycleBadgeClass => Worker.CurrentCycle == WorkCycle.OT
        ? "bg-warning text-dark"
        : "bg-success";

    private void NavigateToWorkerDetail()
    {
        Navigation.NavigateTo($"/worker-activity/{Worker.WorkerId}");
    }

    private async Task ShowSignOutConfirmation()
    {
        await OnSignOutRequested.InvokeAsync(Worker.WorkerId);
    }
}