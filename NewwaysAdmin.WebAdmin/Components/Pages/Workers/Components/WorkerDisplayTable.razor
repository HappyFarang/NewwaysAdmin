@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/Components/WorkerDisplayTable.razor *@
@* Purpose: NEW - Table component using WorkerDisplayData from new WorkerDataService *@
@* CLEAN: No adjustment logic needed - data comes pre-processed *@

@using NewwaysAdmin.WebAdmin.Models.Workers
@inject NavigationManager Navigation

<div class="table-responsive">
    <table class="table table-hover table-sm table-striped align-middle">
        <thead class="@HeaderClass">
            <tr>
                <th style="width: 15%;">Worker Name</th>
                <th colspan="3" class="text-center bg-primary bg-opacity-10" style="width: 40%;">
                    <i class="bi bi-clock-history me-2"></i>Normal Shift
                </th>
                <th style="width: 5%;"></th>
                <th colspan="3" class="text-center bg-warning bg-opacity-25" style="width: 40%;">
                    <i class="bi bi-clock-fill me-2"></i>Overtime
                </th>
            </tr>
            <tr>
                <th></th>
                <th class="text-center bg-primary bg-opacity-10">Sign In</th>
                <th class="text-center bg-primary bg-opacity-10">Sign Out</th>
                <th class="text-center bg-primary bg-opacity-10">Total Hrs</th>
                <th class="border-start border-end border-3 border-secondary"></th>
                <th class="text-center bg-warning bg-opacity-25">Sign In</th>
                <th class="text-center bg-warning bg-opacity-25">Sign Out</th>
                <th class="text-center bg-warning bg-opacity-25">Total Hrs</th>
            </tr>
        </thead>
        <tbody>
            @if (Workers.Any())
            {
                @foreach (var worker in Workers)
                {
                    <tr class="@GetRowClass(worker)" style="cursor: pointer;" @onclick="() => NavigateToWorkerDetail(worker.WorkerId)">
                        <!-- Worker Name with Status Indicators -->
                        <td class="fw-bold">
                            <div class="d-flex align-items-center">
                                <span>@worker.WorkerName</span>

                                @* Adjustment Indicator *@
                                @if (worker.HasAdjustments)
                                {
                                    <span class="badge bg-warning text-dark ms-2" title="Has manual adjustments">
                                        <i class="bi bi-pencil-square"></i>
                                    </span>
                                }

                                @* Activity Status *@
                                @if (IsActive)
                                {
                                    <span class="badge @worker.GetStatusBadgeClass() ms-2">
                                        @worker.GetStatusBadge()
                                    </span>
                                }

                                @* Error Indicator *@
                                @if (worker.HasError)
                                {
                                    <span class="badge bg-danger ms-2" title="@worker.ErrorMessage">
                                        <i class="bi bi-exclamation-triangle"></i>
                                    </span>
                                }
                            </div>
                        </td>

                        <!-- Normal Shift Columns -->
                        <td class="text-center bg-primary bg-opacity-10">
                            @if (worker.HasWorkActivity)
                            {
                                @worker.SignInFormatted
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-primary bg-opacity-10">
                            @if (worker.HasWorkActivity && worker.SignOut.HasValue)
                            {
                                @worker.SignOutFormatted
                            }
                            else if (IsActive && worker.IsCurrentlyWorking)
                            {
                                <span class="text-warning">Working...</span>
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-primary bg-opacity-10">
                            @if (worker.HasWorkActivity && worker.NormalWorkHours > 0)
                            {
                                <strong>@FormatHours(worker.NormalWorkHours)</strong>
                            }
                            else if (IsActive && worker.IsCurrentlyWorking && !worker.HasOTActivity)
                            {
                                <span class="fw-bold">@FormatDuration(worker.CurrentDuration)</span>
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>

                        <!-- Separator Column -->
                        <td class="border-start border-end border-3 border-secondary"></td>

                        <!-- OT Shift Columns -->
                        <td class="text-center bg-warning bg-opacity-25">
                            @if (worker.HasOTActivity)
                            {
                                @worker.OTSignInFormatted
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-warning bg-opacity-25">
                            @if (worker.HasOTActivity && worker.OTSignOut.HasValue)
                            {
                                @worker.OTSignOutFormatted
                            }
                            else if (IsActive && worker.IsCurrentlyWorking && worker.HasOTActivity)
                            {
                                <span class="text-warning">Working...</span>
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                        <td class="text-center bg-warning bg-opacity-25">
                            @if (worker.HasOTActivity && worker.OTWorkHours > 0)
                            {
                                <strong>@FormatHours(worker.OTWorkHours)</strong>
                            }
                            else if (IsActive && worker.IsCurrentlyWorking && worker.HasOTActivity)
                            {
                                <span class="fw-bold">@FormatDuration(worker.CurrentDuration)</span>
                            }
                            else
                            {
                                <span class="text-muted">--:--</span>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center text-muted py-4">
                        <i class="bi bi-info-circle me-2"></i>
                        @EmptyMessage
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .table th {
        font-weight: 600;
        font-size: 0.85rem;
    }

    .table td {
        vertical-align: middle;
        padding: 0.75rem 0.5rem;
    }

    .worker-row-active {
        border-left: 3px solid #28a745;
    }

    .worker-row-inactive {
        opacity: 0.85;
    }

    .worker-row-error {
        border-left: 3px solid #dc3545;
    }

    .worker-row-adjusted {
        border-left: 3px solid #ffc107;
    }
</style>

@code {
    [Parameter]
    public List<WorkerDisplayData> Workers { get; set; } = new();

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public string HeaderClass { get; set; } = "table-light";

    [Parameter]
    public string EmptyMessage { get; set; } = "No workers found.";

    private void NavigateToWorkerDetail(int workerId)
    {
        Navigation.NavigateTo($"/worker-details/{workerId}");
    }

    private string GetRowClass(WorkerDisplayData worker)
    {
        if (worker.HasError) return "worker-row-error";
        if (worker.HasAdjustments) return "worker-row-adjusted";
        return IsActive ? "worker-row-active" : "worker-row-inactive";
    }

    private string FormatHours(decimal hours)
    {
        var timeSpan = TimeSpan.FromHours((double)hours);
        return timeSpan.ToString(@"h\:mm");
    }

    private string FormatDuration(TimeSpan duration)
    {
        return duration.ToString(@"h\:mm");
    }
}