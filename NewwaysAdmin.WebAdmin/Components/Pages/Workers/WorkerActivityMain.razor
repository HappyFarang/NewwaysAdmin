@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/WorkerActivityMain.razor *@
@* Purpose: Main worker activity dashboard page - orchestrates child components *@
@* UPDATED: Added navigation tabs, removed large header *@

@page "/worker-activity"
@using NewwaysAdmin.WebAdmin.Services.Workers
@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Components.Pages.Workers.Components
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject WorkerDashboardService DashboardService
@inject ILogger<WorkerActivityMain> Logger

<PageTitle>Worker Activity</PageTitle>

<div class="container-fluid mt-3">
    <!-- Navigation Tabs -->
    <WorkerNavigationTabs />

    <!-- Refresh Controls -->
    <div class="d-flex justify-content-end mb-3">
        <span class="text-muted small me-2 align-self-center">
            Last updated: @(_dashboardData?.RefreshTime.ToString("HH:mm:ss") ?? "--:--:--")
        </span>
        <button class="btn btn-sm btn-outline-primary" @onclick="RefreshDashboard" disabled="@_isLoading">
            <span class="bi bi-arrow-clockwise"></span>
            @(_isLoading ? "Refreshing..." : "Refresh")
        </button>
    </div>

    @if (_isLoading && _dashboardData == null)
    {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading worker activity...</p>
            </div>
    }
    else if (_dashboardData != null)
    {
            <ActiveWorkersCard Workers="@_dashboardData.ActiveWorkers" />
            <InactiveWorkersCard Workers="@_dashboardData.InactiveWorkers" />
    }
    else if (_error != null)
    {
            <div class="alert alert-danger" role="alert">
                <h5 class="alert-heading">
                    <span class="bi bi-exclamation-triangle me-2"></span>
                    Error Loading Data
                </h5>
                <p>@_error</p>
                <button class="btn btn-danger btn-sm" @onclick="RefreshDashboard">
                    <span class="bi bi-arrow-clockwise me-1"></span>
                    Try Again
                </button>
            </div>
    }
</div>

@code {
    private DashboardData? _dashboardData;
    private bool _isLoading = true;
    private string? _error;
    private Dictionary<int, DailyWorkRecord> _todaysAdjustments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboard();
        await LoadTodaysAdjustments();
    }

    private async Task LoadTodaysAdjustments()
    {
        try
        {
            _todaysAdjustments = await DashboardService.GetTodaysAdjustmentsAsync();
            ApplyAdjustmentsToWorkers();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load today's adjustments");
        }
    }

    private void ApplyAdjustmentsToWorkers()
    {
        if (_dashboardData == null) return;

        // Apply adjustments to active workers
        foreach (var worker in _dashboardData.ActiveWorkers)
        {
            if (_todaysAdjustments.TryGetValue(worker.WorkerId, out var adjustment))
            {
                worker.ApplyTodaysAdjustments(adjustment);
            }
        }

        // Apply adjustments to inactive workers
        foreach (var worker in _dashboardData.InactiveWorkers)
        {
            if (_todaysAdjustments.TryGetValue(worker.WorkerId, out var adjustment))
            {
                worker.ApplyTodaysAdjustments(adjustment);
            }
        }
    }

    private async Task LoadDashboard()
    {
        try
        {
            _isLoading = true;
            _error = null;
            _dashboardData = await DashboardService.GetTodaysDashboardDataAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load worker dashboard");
            _error = "Failed to load worker data. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboard();
    }
}