@* File: NewwaysAdmin.WebAdmin/Components/Pages/Workers/WorkerActivityMain.razor *@
@* Purpose: MIGRATED - Main worker activity dashboard using new WorkerDataService *@
@* CHANGE: Now uses WorkerDataService + WorkerDisplayData instead of WorkerDashboardService + WorkerStatus *@

@page "/worker-activity"
@using NewwaysAdmin.WebAdmin.Services.Workers
@using NewwaysAdmin.WebAdmin.Models.Workers
@using NewwaysAdmin.WebAdmin.Components.Pages.Workers.Components
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject WorkerDataService DataService
@inject WorkerSettingsService SettingsService
@* Keep DashboardService for worker list - will migrate later *@
@inject WorkerDashboardService DashboardService
@inject ILogger<WorkerActivityMain> Logger

<PageTitle>Worker Activity</PageTitle>

<div class="container-fluid mt-3">
    <!-- Navigation Tabs -->
    <WorkerNavigationTabs />

    <!-- Refresh Controls -->
    <div class="d-flex justify-content-end mb-3">
        <span class="text-muted small me-2 align-self-center">
            Last updated: @(_refreshTime.ToString("HH:mm:ss"))
        </span>
        <button class="btn btn-sm btn-outline-primary" @onclick="RefreshDashboard" disabled="@_isLoading">
            <span class="bi bi-arrow-clockwise"></span>
            @(_isLoading ? "Refreshing..." : "Refresh")
        </button>
    </div>

    @if (_isLoading && !_activeWorkers.Any() && !_inactiveWorkers.Any())
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading worker activity...</p>
        </div>
    }
    else if (_error != null)
    {
        <div class="alert alert-danger" role="alert">
            <h5 class="alert-heading">
                <span class="bi bi-exclamation-triangle me-2"></span>
                Error Loading Data
            </h5>
            <p>@_error</p>
            <button class="btn btn-danger btn-sm" @onclick="RefreshDashboard">
                <span class="bi bi-arrow-clockwise me-1"></span>
                Try Again
            </button>
        </div>
    }
    else
    {
        <!-- Active Workers Card -->
        <div class="card mb-4">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">
                    <span class="bi bi-check-circle me-2"></span>
                    Active Workers (@_activeWorkers.Count)
                </h5>
            </div>
            <div class="card-body p-0">
                <WorkerDisplayTable Workers="@_activeWorkers"
                                    IsActive="true"
                                    HeaderClass="table-success"
                                    EmptyMessage="No workers are currently signed in." />
            </div>
        </div>

        <!-- Inactive Workers Card -->
        <div class="card">
            <div class="card-header bg-secondary text-white">
                <h5 class="mb-0">
                    <span class="bi bi-dash-circle me-2"></span>
                    Inactive Workers (@_inactiveWorkers.Count)
                </h5>
            </div>
            <div class="card-body p-0">
                <WorkerDisplayTable Workers="@_inactiveWorkers"
                                    IsActive="false"
                                    HeaderClass="table-light"
                                    EmptyMessage="No inactive workers for today." />
            </div>
        </div>
    }
</div>

@code {
    // NEW: Clean state with WorkerDisplayData
    private List<WorkerDisplayData> _activeWorkers = new();
    private List<WorkerDisplayData> _inactiveWorkers = new();
    private bool _isLoading = true;
    private string? _error;
    private DateTime _refreshTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboard();
    }

    private async Task LoadDashboard()
    {
        try
        {
            _isLoading = true;
            _error = null;
            _refreshTime = DateTime.Now;

            // STEP 1: Get basic worker list from old service (temporary)
            // TODO: Later migrate this to a simpler worker enumeration service
            var dashboardData = await DashboardService.GetTodaysDashboardDataAsync();
            var allWorkers = dashboardData.ActiveWorkers.Concat(dashboardData.InactiveWorkers);

            Logger.LogInformation("Processing {WorkerCount} workers with new WorkerDataService", allWorkers.Count());

            var activeWorkers = new List<WorkerDisplayData>();
            var inactiveWorkers = new List<WorkerDisplayData>();

            // STEP 2: Process each worker with the new service
            foreach (var workerStatus in allWorkers)
            {
                try
                {
                    // Generate filename from worker data
                    var fileName = $"{workerStatus.CycleDate:yyyy-MM-dd}_Worker{workerStatus.WorkerId}.json";

                    // Load worker settings
                    var settings = await SettingsService.GetSettingsAsync(workerStatus.WorkerId, workerStatus.WorkerName);

                    // Get complete data using new service - THIS IS THE KEY CHANGE
                    var displayData = await DataService.GetCompleteDataAsync(fileName, settings);

                    if (displayData != null)
                    {
                        // Set activity flags based on current status
                        displayData.IsCurrentlyWorking = workerStatus.IsActive;
                        displayData.HasWorkActivity = workerStatus.HasActivity;
                        displayData.CurrentDuration = workerStatus.CurrentDuration ?? TimeSpan.Zero;

                        // Add to appropriate list
                        if (workerStatus.IsActive)
                        {
                            activeWorkers.Add(displayData);
                        }
                        else
                        {
                            inactiveWorkers.Add(displayData);
                        }

                        Logger.LogDebug("Processed worker {WorkerId} with new service - HasAdjustments: {HasAdjustments}",
                            displayData.WorkerId, displayData.HasAdjustments);
                    }
                    else
                    {
                        Logger.LogWarning("Failed to get display data for worker {WorkerId} file {FileName}",
                            workerStatus.WorkerId, fileName);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error processing worker {WorkerId} with new service", workerStatus.WorkerId);
                }
            }

            // Update state
            _activeWorkers = activeWorkers.OrderBy(w => w.WorkerName).ToList();
            _inactiveWorkers = inactiveWorkers.OrderBy(w => w.WorkerName).ToList();

            Logger.LogInformation("Migration complete: {ActiveCount} active, {InactiveCount} inactive workers processed with new service",
                _activeWorkers.Count, _inactiveWorkers.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load worker dashboard with new service");
            _error = "Failed to load worker data. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboard();
    }
}