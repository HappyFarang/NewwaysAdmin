@page "/settings"
@using NewwaysAdmin.WebAdmin.Services.Auth
@using NewwaysAdmin.WebAdmin.Models.Auth
@using NewwaysAdmin.WebAdmin.Components.Features.Settings.Accounts
@using NewwaysAdmin.SharedModels.Config
@using NewwaysAdmin.WebAdmin.Components.Features.Settings.PdfProcessor
@using NewwaysAdmin.WebAdmin.Components.Features.Settings.PdfAnalyzer
@using NewwaysAdmin.WebAdmin.Components.Features.Settings.OcrAnalyzer
@using NewwaysAdmin.WebAdmin.Components.Settings.GoogleSheets
@using NewwaysAdmin.WebAdmin.Components.Features.Settings.BankSlipCollections

@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<PageTitle>System Settings</PageTitle>

<div class="page-container">
    <div class="toolbar-wrapper">
        <div class="toolbar">
            <div class="toolbar-buttons">
                <button class="btn @(ActiveView == ViewType.Accounts ? "active" : "")"
                        @onclick="() => SwitchView(ViewType.Accounts)">
                    Accounts
                </button>
                <button class="btn @(ActiveView == ViewType.GoogleSheets ? "active" : "")"
                        @onclick="() => SwitchView(ViewType.GoogleSheets)">
                    Google Sheets
                </button>
                <button class="btn @(ActiveView == ViewType.PdfProcessor ? "active" : "")"
                        @onclick="() => SwitchView(ViewType.PdfProcessor)">
                    PDF Processor
                </button>
                <button class="btn @(ActiveView == ViewType.PdfAnalyzer ? "active" : "")"
                        @onclick="() => SwitchView(ViewType.PdfAnalyzer)">
                    PDF Analyzer
                </button>
                <button class="btn @(ActiveView == ViewType.OcrAnalyzer ? "active" : "")"
                        @onclick="() => SwitchView(ViewType.OcrAnalyzer)">
                    <i class="bi bi-eye"></i> Spatial OCR <!-- Updated name -->
                </button>
                <button class="btn @(ActiveView == ViewType.BankSlipCollections ? "active" : "")"
                        @onclick="() => SwitchView(ViewType.BankSlipCollections)">
                    <i class="bi bi-collection"></i> Bank Slip Collections
                </button>
            </div>
        </div>
    </div>

    <div class="content-wrapper">
        @if (!isAdmin)
        {
            <p>Access Denied. This page is only available to administrators.</p>
        }
        else
        {
            @switch (ActiveView)
            {
                case ViewType.Accounts:
                    <Accounts />
                    break;
                case ViewType.PdfProcessor:
                    <PdfProcessor Config="@_config" />
                    break;
                case ViewType.PdfAnalyzer:
                    <PdfAnalyzer />
                    break;
                case ViewType.OcrAnalyzer:
                    <SpatialOcrAnalyzer /> 
                    break;
                case ViewType.GoogleSheets:
                    <GoogleSheetsSettings />
                    break;
                case ViewType.BankSlipCollections:
                    <BankSlipCollectionsPage />
                    break;
            }
        }
    </div>
</div>

@code {
    [Inject] public ConfigProvider ConfigProvider { get; set; } = null!;
    private ProcessorConfig? _config;
    private bool isAdmin = false;

    public enum ViewType
    {
        Accounts,
        PdfProcessor,
        PdfAnalyzer,
        OcrAnalyzer,
        GoogleSheets,
        BankSlipCollections
    }

    private ViewType ActiveView { get; set; } = ViewType.Accounts;

    protected override async Task OnInitializedAsync()
    {
        var currentSession = await AuthService.GetCurrentSessionAsync();
        isAdmin = currentSession?.IsAdmin == true;

        if (isAdmin)
        {
            try
            {
                _config = await ConfigProvider.LoadAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading config: {ex.Message}");
                _config = new ProcessorConfig();
            }
        }
    }

    private void SwitchView(ViewType viewType)
    {
        ActiveView = viewType;
        StateHasChanged();
    }
}