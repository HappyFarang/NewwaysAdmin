@* NewwaysAdmin.WebAdmin/Components/AuthorizeModule.razor - Simplified Version *@
@using Microsoft.AspNetCore.Authorization
@using NewwaysAdmin.WebAdmin.Models.Auth
@using NewwaysAdmin.WebAdmin.Authorization

<AuthorizeView Policy="@Policy">
    <Authorized>
        @ChildContent
    </Authorized>
    <NotAuthorized>
        @if (ShowAccessDenied)
        {
            <div class="alert alert-warning">
                <h4>Access Denied</h4>
                <p>You don't have permission to access this @(ModuleId ?? "resource").</p>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string? ModuleId { get; set; }
    [Parameter] public AccessLevel MinimumLevel { get; set; } = AccessLevel.Read;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool ShowAccessDenied { get; set; } = true;

    private string Policy => !string.IsNullOrEmpty(ModuleId) ? $"Module_{ModuleId}_{MinimumLevel}" : "";
}

@* NewwaysAdmin.WebAdmin/Components/AuthorizePage.razor - Simplified Version *@
@using Microsoft.AspNetCore.Authorization
@using NewwaysAdmin.WebAdmin.Models.Auth

<AuthorizeView Policy="@Policy">
    <Authorized>
        @ChildContent
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card border-warning">
                        <div class="card-body text-center">
                            <i class="bi bi-shield-exclamation display-1 text-warning"></i>
                            <h2 class="mt-3 text-warning">Access Denied</h2>
                            <p class="text-muted">You don't have permission to access this page.</p>
                            <p class="text-muted">Please contact your administrator if you believe this is an error.</p>
                            <a href="/home" class="btn btn-primary">Return to Home</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string? PageId { get; set; }
    [Parameter] public AccessLevel MinimumLevel { get; set; } = AccessLevel.Read;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string Policy => !string.IsNullOrEmpty(PageId) ? $"Page_{PageId}_{MinimumLevel}" : "";
}